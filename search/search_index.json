{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home A Roblox plugin for designing your own tracks and building them quickly. Designed for the Roblox Roller Coaster and Theme Park Community. Warning This is still a work in progress. The API is still changing and thus this code may not work properly. Thanks to: The Coaster Team And documentation viewers like you. Thank you","title":"Home"},{"location":"#home","text":"A Roblox plugin for designing your own tracks and building them quickly. Designed for the Roblox Roller Coaster and Theme Park Community. Warning This is still a work in progress. The API is still changing and thus this code may not work properly.","title":"Home"},{"location":"#thanks-to","text":"The Coaster Team And documentation viewers like you. Thank you","title":"Thanks to:"},{"location":"changelog/","text":"Changelog Note This is the Changelog for the TrackBuilder plugin Based on https://keepachangelog.com/en/1.0.0/ [Unreleased] [0.1.0] - 2021-01-04 Added Able to Build TrackGroups from the GUI Load TrackGroups and Tracks from the GUI Set Start and End Position Overhauled type checking to use t Build Pattern constructors for: Segments Section TrackGroup PhysicsRails MeshData CFrameTracks fromInstance constructors for: Segments Section PhysicsRails TrackGroup Added Section SegmentOffset MidTrackObject Segment Plugin Version Text Changed Section Interval to SegmentLength Fixed Crossbeam offsets not being passed correctly Reduced amount of Promises created for Section:CreateAsync() Optimization not using Segment's own offsets [0.0.2] - 2020-12-06 Added Initial docs page Changed Renamed Tie to TrackObject Shortened module index names for PointToPointCFrameTrack and PointToPointCFrameTrack2 Now PointToPoint and PointToPoint2 respectfully Fixed CFrameTrack.IsType now exposed in the top module Fixes type checking bug with BaseSection:Create() BuildLast with StartPosition > EndPosition [0.0.1] - 2020-12-06 Uploaded to Github Added Very minimal GUI Run Programs Print Track Positions","title":"Changelog"},{"location":"changelog/#changelog","text":"Note This is the Changelog for the TrackBuilder plugin Based on https://keepachangelog.com/en/1.0.0/","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"[Unreleased]"},{"location":"changelog/#010-2021-01-04","text":"","title":"[0.1.0] - 2021-01-04"},{"location":"changelog/#added","text":"Able to Build TrackGroups from the GUI Load TrackGroups and Tracks from the GUI Set Start and End Position Overhauled type checking to use t Build Pattern constructors for: Segments Section TrackGroup PhysicsRails MeshData CFrameTracks fromInstance constructors for: Segments Section PhysicsRails TrackGroup Added Section SegmentOffset MidTrackObject Segment Plugin Version Text","title":"Added"},{"location":"changelog/#changed","text":"Section Interval to SegmentLength","title":"Changed"},{"location":"changelog/#fixed","text":"Crossbeam offsets not being passed correctly Reduced amount of Promises created for Section:CreateAsync() Optimization not using Segment's own offsets","title":"Fixed"},{"location":"changelog/#002-2020-12-06","text":"","title":"[0.0.2] - 2020-12-06"},{"location":"changelog/#added_1","text":"Initial docs page","title":"Added"},{"location":"changelog/#changed_1","text":"Renamed Tie to TrackObject Shortened module index names for PointToPointCFrameTrack and PointToPointCFrameTrack2 Now PointToPoint and PointToPoint2 respectfully","title":"Changed"},{"location":"changelog/#fixed_1","text":"CFrameTrack.IsType now exposed in the top module Fixes type checking bug with BaseSection:Create() BuildLast with StartPosition > EndPosition","title":"Fixed"},{"location":"changelog/#001-2020-12-06","text":"Uploaded to Github","title":"[0.0.1] - 2020-12-06"},{"location":"changelog/#added_2","text":"Very minimal GUI Run Programs Print Track Positions","title":"Added"},{"location":"credits/","text":"Credits t https://github.com/osyrisrblx/t Roblox Lua Promise https://github.com/evaera/roblox-lua-promise RoactMaterial https://github.com/howmanysmall/RoactMaterial2 Roact https://github.com/Roblox/roact Rodux https://github.com/Roblox/rodux Roact-Rodux https://github.com/Roblox/roact-rodux","title":"Credits"},{"location":"credits/#credits","text":"","title":"Credits"},{"location":"credits/#t","text":"https://github.com/osyrisrblx/t","title":"t"},{"location":"credits/#roblox-lua-promise","text":"https://github.com/evaera/roblox-lua-promise","title":"Roblox Lua Promise"},{"location":"credits/#roactmaterial","text":"https://github.com/howmanysmall/RoactMaterial2","title":"RoactMaterial"},{"location":"credits/#roact","text":"https://github.com/Roblox/roact","title":"Roact"},{"location":"credits/#rodux","text":"https://github.com/Roblox/rodux","title":"Rodux"},{"location":"credits/#roact-rodux","text":"https://github.com/Roblox/roact-rodux","title":"Roact-Rodux"},{"location":"examples/","text":"Examples Examples go here! Assume MainTrack is the Track you want to build on. Intamin Flat Track Program Builds a track similar to Intamin's 2 Rail track local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) return function ( api ) local TrackGroup = api . TrackGroup local Section = api . Section local Segment = api . Segment local RailSegment = Segment . Rail local TrackObjectSegment = Segment . TrackObject local CrossbeamSegment = Segment . Crossbeam local CFrameTrack = api . CFrameTrack local mainTrack = CFrameTrack . Create ( ReplicatedStorage : FindFirstChild ( \"MainTrack\" )) local BASE_PART = Instance . new ( \"Part\" ) BASE_PART . Anchored = true BASE_PART . TopSurface = \"Smooth\" BASE_PART . BottomSurface = \"Smooth\" BASE_PART . FormFactor = \"Custom\" BASE_PART . Material = Enum . Material . Metal BASE_PART . BrickColor = BrickColor . new ( \"Really black\" ) local leftRailSection = Section . fromData ({ Segment = RailSegment . fromData ({ Name = \"LeftRail\" , BasePart = BASE_PART , Offset = Vector3 . new ( - 3 , 0 , 0 ), Horizontal = true , Size = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), MeshData = { Mesh = \"CylinderMesh\" , Scale = Vector3 . new ( 1 , 1 , 0.2 ), --width is X, height is Y, and length is Z ALWAYS Offset = Vector3 . new (), } }), SegmentLength = 5 , SectionStart = 0 , Optimize = true , BuildEnd = false , }) local rightRailSection = Section . fromData ({ Segment = RailSegment . fromData ({ Name = \"RightRail\" , BasePart = BASE_PART , Offset = Vector3 . new ( 3 , 0 , 0 ), Horizontal = true , Size = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), MeshData = { Mesh = \"CylinderMesh\" , Scale = Vector3 . new ( 1 , 1 , 0.2 ), --width is X, height is Y, and length is Z ALWAYS Offset = Vector3 . new (), } }), SegmentLength = 5 , SectionStart = 0 , Optimize = true , BuildEnd = false , }) local crossbeamSection = Section . fromData ({ Segment = CrossbeamSegment . fromData ({ Name = \"Crossbeam\" , BasePart = BASE_PART , EndOffset = Vector3 . new ( 3 , 0 , 0 ), StartOffset = Vector3 . new ( - 3 , 0 , 0 ), Horizontal = false , Size = Vector3 . new ( .6 , .6 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), MeshData = { Mesh = \"BlockMesh\" , Scale = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Offset = Vector3 . new (), }, }), SegmentLength = 5 , SectionStart = 0 , Optimize = false , BuildEnd = false , }) local TIE_PART = BASE_PART : Clone () TIE_PART . Size = Vector3 . new ( 6 , 0.6 , 0.6 ) TIE_PART . Anchored = true local tieSection = Section . fromData ({ Segment = TrackObjectSegment . fromData ({ Name = \"Tie\" , Object = TIE_PART , Offset = CFrame . new (), UseLookVector = false , }), SegmentLength = 5 , SectionStart = 0 , Optimize = false , BuildEnd = true , }) local trackGroup = TrackGroup . new () trackGroup . Name = \"TestingTrack\" trackGroup : Add ( leftRailSection ) trackGroup : Add ( rightRailSection ) trackGroup : Add ( crossbeamSection ) trackGroup : Add ( tieSection ) local model = trackGroup : Create ( mainTrack , 0 , mainTrack . Length ) model . Parent = workspace warn ( \"Finished!\" ) end BoxBuilderProgram Creates a RMC Single Rail Track local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) return function ( api ) local TrackGroupBuilder = api . TrackGroupBuilder local SectionBuilder = api . SectionBuilder local Segment = api . Segment local RailSegmentBuilder = Segment . RailBuilder local MidTrackObjectSegmentBuilder = Segment . MidTrackObjectBuilder local BoxRailSegmentBuilder = Segment . BoxRailBuilder local RectSegmentBuilder = Segment . RectBuilder local RectRailSegmentBuilder = Segment . RectRailBuilder local CFrameTrack = api . CFrameTrack local mainTrack = CFrameTrack . Create ( ReplicatedStorage : FindFirstChild ( \"MainTrack\" )) local BASE_PART = Instance . new ( \"Part\" ) BASE_PART . Anchored = true BASE_PART . TopSurface = \"Smooth\" BASE_PART . BottomSurface = \"Smooth\" BASE_PART . FormFactor = \"Custom\" local WEDGE = Instance . new ( \"WedgePart\" ) WEDGE . Size = Vector3 . new ( 0.2 , 1 , 1 ) WEDGE . Anchored = true WEDGE . Material = Enum . Material . Metal WEDGE . BrickColor = BrickColor . Black () WEDGE . TopSurface = Enum . SurfaceType . Smooth WEDGE . BottomSurface = Enum . SurfaceType . Smooth local specialMesh = Instance . new ( \"SpecialMesh\" ) specialMesh . MeshType = Enum . MeshType . Wedge specialMesh . Scale = Vector3 . new ( 0.001 , 1 , 1 ) specialMesh . Parent = WEDGE local topSection = SectionBuilder . new () : WithName ( \"Top\" ) : WithSegment ( BoxRailSegmentBuilder . new () : WithWedge ( WEDGE ) : WithTopLeft ( Vector3 . new ( 1.5 , 0.3 , 0 )) : WithTopRight ( Vector3 . new ( - 1.5 , 0.3 , 0 )) : WithBottomLeft ( Vector3 . new ( 1.5 , - 0.3 , 0 )) : WithBottomRight ( Vector3 . new ( - 1.5 , - 0.3 , 0 )) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local spineSection = SectionBuilder . new () : WithName ( \"Spine\" ) : WithSegment ( BoxRailSegmentBuilder . new () : WithWedge ( WEDGE ) : WithTopLeft ( Vector3 . new ( 1 , - 0.2 , 0 )) : WithTopRight ( Vector3 . new ( - 1 , - 0.2 , 0 )) : WithBottomLeft ( Vector3 . new ( 1 , - 1.5 , 0 )) : WithBottomRight ( Vector3 . new ( - 1 , - 1.5 , 0 )) : WithDrawTop ( false ) : WithDrawBottom ( false ) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local BOTTOM_WEDGE = Instance . new ( \"WedgePart\" ) BOTTOM_WEDGE . Size = Vector3 . new ( 0.05 , 0 , 0 ) BOTTOM_WEDGE . Anchored = true BOTTOM_WEDGE . Material = Enum . Material . Metal BOTTOM_WEDGE . BrickColor = BrickColor . Black () BOTTOM_WEDGE . TopSurface = Enum . SurfaceType . Smooth BOTTOM_WEDGE . BottomSurface = Enum . SurfaceType . Smooth local bottomSection = SectionBuilder . new () : WithName ( \"Bottom\" ) : WithSegment ( RectRailSegmentBuilder . new () : WithWedge ( WEDGE ) : WithUseStart ( true ) : WithStartOffset1 ( Vector3 . new ( 1.2 , - 1.5 , 0 )) : WithStartOffset2 ( Vector3 . new ( - 1.2 , - 1.5 , 0 )) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local CHAIN_PART = BASE_PART : Clone () CHAIN_PART . Size = Vector3 . new ( 1 , 0.8 , 1 ) CHAIN_PART . BrickColor = BrickColor . new ( \"Dark stone grey\" ) CHAIN_PART . CanCollide = false local CHAIN_IMAGE = Instance . new ( \"Texture\" ) CHAIN_IMAGE . StudsPerTileU = 1 CHAIN_IMAGE . StudsPerTileV = 1 CHAIN_IMAGE . Texture = \"http://www.roblox.com/asset/?id=56334448\" CHAIN_IMAGE . Face = \"Top\" CHAIN_IMAGE . Parent = CHAIN_PART local chainSection = SectionBuilder . new () : WithName ( \"Chain\" ) : WithSegment ( RailSegmentBuilder . new () : WithBasePart ( CHAIN_PART ) : WithSize ( Vector3 . new ( 1 , 0.2 , 0 )) : WithOffset ( Vector3 . new ( 0 , 0.3 , 0 )) : WithRotation ( Vector3 . new ()) : WithHorizontal ( false ) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local trackGroup = TrackGroupBuilder . new () : WithName ( \"BoxRailTrack\" ) : WithSection ( topSection ) : WithSection ( spineSection ) : WithSection ( bottomSection ) : Finish () local model = trackGroup : Create ( mainTrack , 0 , mainTrack . Length ) local chainModel = chainSection : Create ( mainTrack , 410 , 670 ) chainModel . Parent = model model . Parent = workspace warn ( \"Finished!\" ) end","title":"Examples"},{"location":"examples/#examples","text":"Examples go here! Assume MainTrack is the Track you want to build on.","title":"Examples"},{"location":"examples/#intamin-flat-track-program","text":"Builds a track similar to Intamin's 2 Rail track local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) return function ( api ) local TrackGroup = api . TrackGroup local Section = api . Section local Segment = api . Segment local RailSegment = Segment . Rail local TrackObjectSegment = Segment . TrackObject local CrossbeamSegment = Segment . Crossbeam local CFrameTrack = api . CFrameTrack local mainTrack = CFrameTrack . Create ( ReplicatedStorage : FindFirstChild ( \"MainTrack\" )) local BASE_PART = Instance . new ( \"Part\" ) BASE_PART . Anchored = true BASE_PART . TopSurface = \"Smooth\" BASE_PART . BottomSurface = \"Smooth\" BASE_PART . FormFactor = \"Custom\" BASE_PART . Material = Enum . Material . Metal BASE_PART . BrickColor = BrickColor . new ( \"Really black\" ) local leftRailSection = Section . fromData ({ Segment = RailSegment . fromData ({ Name = \"LeftRail\" , BasePart = BASE_PART , Offset = Vector3 . new ( - 3 , 0 , 0 ), Horizontal = true , Size = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), MeshData = { Mesh = \"CylinderMesh\" , Scale = Vector3 . new ( 1 , 1 , 0.2 ), --width is X, height is Y, and length is Z ALWAYS Offset = Vector3 . new (), } }), SegmentLength = 5 , SectionStart = 0 , Optimize = true , BuildEnd = false , }) local rightRailSection = Section . fromData ({ Segment = RailSegment . fromData ({ Name = \"RightRail\" , BasePart = BASE_PART , Offset = Vector3 . new ( 3 , 0 , 0 ), Horizontal = true , Size = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), MeshData = { Mesh = \"CylinderMesh\" , Scale = Vector3 . new ( 1 , 1 , 0.2 ), --width is X, height is Y, and length is Z ALWAYS Offset = Vector3 . new (), } }), SegmentLength = 5 , SectionStart = 0 , Optimize = true , BuildEnd = false , }) local crossbeamSection = Section . fromData ({ Segment = CrossbeamSegment . fromData ({ Name = \"Crossbeam\" , BasePart = BASE_PART , EndOffset = Vector3 . new ( 3 , 0 , 0 ), StartOffset = Vector3 . new ( - 3 , 0 , 0 ), Horizontal = false , Size = Vector3 . new ( .6 , .6 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), MeshData = { Mesh = \"BlockMesh\" , Scale = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Offset = Vector3 . new (), }, }), SegmentLength = 5 , SectionStart = 0 , Optimize = false , BuildEnd = false , }) local TIE_PART = BASE_PART : Clone () TIE_PART . Size = Vector3 . new ( 6 , 0.6 , 0.6 ) TIE_PART . Anchored = true local tieSection = Section . fromData ({ Segment = TrackObjectSegment . fromData ({ Name = \"Tie\" , Object = TIE_PART , Offset = CFrame . new (), UseLookVector = false , }), SegmentLength = 5 , SectionStart = 0 , Optimize = false , BuildEnd = true , }) local trackGroup = TrackGroup . new () trackGroup . Name = \"TestingTrack\" trackGroup : Add ( leftRailSection ) trackGroup : Add ( rightRailSection ) trackGroup : Add ( crossbeamSection ) trackGroup : Add ( tieSection ) local model = trackGroup : Create ( mainTrack , 0 , mainTrack . Length ) model . Parent = workspace warn ( \"Finished!\" ) end","title":"Intamin Flat Track Program"},{"location":"examples/#boxbuilderprogram","text":"Creates a RMC Single Rail Track local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) return function ( api ) local TrackGroupBuilder = api . TrackGroupBuilder local SectionBuilder = api . SectionBuilder local Segment = api . Segment local RailSegmentBuilder = Segment . RailBuilder local MidTrackObjectSegmentBuilder = Segment . MidTrackObjectBuilder local BoxRailSegmentBuilder = Segment . BoxRailBuilder local RectSegmentBuilder = Segment . RectBuilder local RectRailSegmentBuilder = Segment . RectRailBuilder local CFrameTrack = api . CFrameTrack local mainTrack = CFrameTrack . Create ( ReplicatedStorage : FindFirstChild ( \"MainTrack\" )) local BASE_PART = Instance . new ( \"Part\" ) BASE_PART . Anchored = true BASE_PART . TopSurface = \"Smooth\" BASE_PART . BottomSurface = \"Smooth\" BASE_PART . FormFactor = \"Custom\" local WEDGE = Instance . new ( \"WedgePart\" ) WEDGE . Size = Vector3 . new ( 0.2 , 1 , 1 ) WEDGE . Anchored = true WEDGE . Material = Enum . Material . Metal WEDGE . BrickColor = BrickColor . Black () WEDGE . TopSurface = Enum . SurfaceType . Smooth WEDGE . BottomSurface = Enum . SurfaceType . Smooth local specialMesh = Instance . new ( \"SpecialMesh\" ) specialMesh . MeshType = Enum . MeshType . Wedge specialMesh . Scale = Vector3 . new ( 0.001 , 1 , 1 ) specialMesh . Parent = WEDGE local topSection = SectionBuilder . new () : WithName ( \"Top\" ) : WithSegment ( BoxRailSegmentBuilder . new () : WithWedge ( WEDGE ) : WithTopLeft ( Vector3 . new ( 1.5 , 0.3 , 0 )) : WithTopRight ( Vector3 . new ( - 1.5 , 0.3 , 0 )) : WithBottomLeft ( Vector3 . new ( 1.5 , - 0.3 , 0 )) : WithBottomRight ( Vector3 . new ( - 1.5 , - 0.3 , 0 )) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local spineSection = SectionBuilder . new () : WithName ( \"Spine\" ) : WithSegment ( BoxRailSegmentBuilder . new () : WithWedge ( WEDGE ) : WithTopLeft ( Vector3 . new ( 1 , - 0.2 , 0 )) : WithTopRight ( Vector3 . new ( - 1 , - 0.2 , 0 )) : WithBottomLeft ( Vector3 . new ( 1 , - 1.5 , 0 )) : WithBottomRight ( Vector3 . new ( - 1 , - 1.5 , 0 )) : WithDrawTop ( false ) : WithDrawBottom ( false ) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local BOTTOM_WEDGE = Instance . new ( \"WedgePart\" ) BOTTOM_WEDGE . Size = Vector3 . new ( 0.05 , 0 , 0 ) BOTTOM_WEDGE . Anchored = true BOTTOM_WEDGE . Material = Enum . Material . Metal BOTTOM_WEDGE . BrickColor = BrickColor . Black () BOTTOM_WEDGE . TopSurface = Enum . SurfaceType . Smooth BOTTOM_WEDGE . BottomSurface = Enum . SurfaceType . Smooth local bottomSection = SectionBuilder . new () : WithName ( \"Bottom\" ) : WithSegment ( RectRailSegmentBuilder . new () : WithWedge ( WEDGE ) : WithUseStart ( true ) : WithStartOffset1 ( Vector3 . new ( 1.2 , - 1.5 , 0 )) : WithStartOffset2 ( Vector3 . new ( - 1.2 , - 1.5 , 0 )) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local CHAIN_PART = BASE_PART : Clone () CHAIN_PART . Size = Vector3 . new ( 1 , 0.8 , 1 ) CHAIN_PART . BrickColor = BrickColor . new ( \"Dark stone grey\" ) CHAIN_PART . CanCollide = false local CHAIN_IMAGE = Instance . new ( \"Texture\" ) CHAIN_IMAGE . StudsPerTileU = 1 CHAIN_IMAGE . StudsPerTileV = 1 CHAIN_IMAGE . Texture = \"http://www.roblox.com/asset/?id=56334448\" CHAIN_IMAGE . Face = \"Top\" CHAIN_IMAGE . Parent = CHAIN_PART local chainSection = SectionBuilder . new () : WithName ( \"Chain\" ) : WithSegment ( RailSegmentBuilder . new () : WithBasePart ( CHAIN_PART ) : WithSize ( Vector3 . new ( 1 , 0.2 , 0 )) : WithOffset ( Vector3 . new ( 0 , 0.3 , 0 )) : WithRotation ( Vector3 . new ()) : WithHorizontal ( false ) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local trackGroup = TrackGroupBuilder . new () : WithName ( \"BoxRailTrack\" ) : WithSection ( topSection ) : WithSection ( spineSection ) : WithSection ( bottomSection ) : Finish () local model = trackGroup : Create ( mainTrack , 0 , mainTrack . Length ) local chainModel = chainSection : Create ( mainTrack , 410 , 670 ) chainModel . Parent = model model . Parent = workspace warn ( \"Finished!\" ) end","title":"BoxBuilderProgram"},{"location":"api/","text":"API This page describes the API that is passed when you run a function from a ModuleScript using the Run Program button. Warning The API is still a work in progress and can change at any time. How to read the API docs This documentation takes inspiration from the Rust programming language. Type is defined after colon : | means the type on either side can be either or. For example BasePart | Model means the type can either be a BasePart or a Model ? means that the type is optional or can be passed as nil. This is used in functions, methods, and tables. Example: optionalType: ?OptionalType Functions and Methods have the returned object as -> -> Type Methods that return Self return the instance of the class it was called from. Classes are documented with a struct-like definition. Methods are not defined in this, only properties and module functions. Example: ClassName { Property1 : Type1, Property2 : Type2, Function : function(arg1 : TypeA, arg2 : TypeB) -> TypeC, } Tables are documented similarly to Classes, but usually do not have a ClassName Properties and their types are usually strict and the type checking will enforce this. Anything type with a ? , however can be optional or passed as nil. Example: { Property1 : Type1, OptionalProperty : ?OptionalType } Methods are defined in their own single-line code block: Class:Method(arg1: TypeA) -> ReturnedType The function documentation of methods has the : similar to how it is used in Lua. Misc Roblox Anything that is a Model should have it's PrimaryPart set. This does not apply if the type can be a Folder , meaning it's a Container object. Module API { CFrameTrack : module, Segment : module, Section : Section, SectionBuilder : SectionBuilder, TrackGroup : TrackGroup, TrackGroupBuilder : TrackGroupBuilder, PhysicsRails : PhysicsRails, PhysicsRailsBuilder : PhysicsRailsBuilder, } Builder Pattern You will notice modules that end with -Builder . These denote Builder Pattern constructors. https://en.wikipedia.org/wiki/Builder_pattern All of these include the methods Build and Finish . Build creates a new object associated with the builder. Finish does the same thing as Build, but destroys the Builder. This means you can continue using the Builder class after building the object. Promise This API uses evaera's Roblox Lua Promise Github Repo: https://github.com/evaera/roblox-lua-promise Docs: https://eryn.io/roblox-lua-promise/lib/","title":"Main"},{"location":"api/#api","text":"This page describes the API that is passed when you run a function from a ModuleScript using the Run Program button. Warning The API is still a work in progress and can change at any time. How to read the API docs This documentation takes inspiration from the Rust programming language. Type is defined after colon : | means the type on either side can be either or. For example BasePart | Model means the type can either be a BasePart or a Model ? means that the type is optional or can be passed as nil. This is used in functions, methods, and tables. Example: optionalType: ?OptionalType Functions and Methods have the returned object as -> -> Type Methods that return Self return the instance of the class it was called from. Classes are documented with a struct-like definition. Methods are not defined in this, only properties and module functions. Example: ClassName { Property1 : Type1, Property2 : Type2, Function : function(arg1 : TypeA, arg2 : TypeB) -> TypeC, } Tables are documented similarly to Classes, but usually do not have a ClassName Properties and their types are usually strict and the type checking will enforce this. Anything type with a ? , however can be optional or passed as nil. Example: { Property1 : Type1, OptionalProperty : ?OptionalType } Methods are defined in their own single-line code block: Class:Method(arg1: TypeA) -> ReturnedType The function documentation of methods has the : similar to how it is used in Lua. Misc Roblox Anything that is a Model should have it's PrimaryPart set. This does not apply if the type can be a Folder , meaning it's a Container object.","title":"API"},{"location":"api/#module","text":"API { CFrameTrack : module, Segment : module, Section : Section, SectionBuilder : SectionBuilder, TrackGroup : TrackGroup, TrackGroupBuilder : TrackGroupBuilder, PhysicsRails : PhysicsRails, PhysicsRailsBuilder : PhysicsRailsBuilder, }","title":"Module"},{"location":"api/#builder-pattern","text":"You will notice modules that end with -Builder . These denote Builder Pattern constructors. https://en.wikipedia.org/wiki/Builder_pattern All of these include the methods Build and Finish . Build creates a new object associated with the builder. Finish does the same thing as Build, but destroys the Builder. This means you can continue using the Builder class after building the object.","title":"Builder Pattern"},{"location":"api/#promise","text":"This API uses evaera's Roblox Lua Promise Github Repo: https://github.com/evaera/roblox-lua-promise Docs: https://eryn.io/roblox-lua-promise/lib/","title":"Promise"},{"location":"api/base_section/","text":"BaseSection Base class for building a section of track from a CFrameTrack Section : BaseSection { Name : string, } Methods Create Creates an Instance created on the given CFrameTrack from startPosition to endPosition BaseSection : Create ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Instance CreateAsync Like Create , but wraps this call in a Promise and returns it. BaseSection : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Promise -> Instance Constructors fromData BaseSection . fromData ( data : table ) -> BaseSection fromInstance BaseSection . fromInstance ( instance : Instance ) -> BaseSection","title":"BaseSection"},{"location":"api/base_section/#basesection","text":"Base class for building a section of track from a CFrameTrack Section : BaseSection { Name : string, }","title":"BaseSection"},{"location":"api/base_section/#methods","text":"","title":"Methods"},{"location":"api/base_section/#create","text":"Creates an Instance created on the given CFrameTrack from startPosition to endPosition BaseSection : Create ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Instance","title":"Create"},{"location":"api/base_section/#createasync","text":"Like Create , but wraps this call in a Promise and returns it. BaseSection : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Promise -> Instance","title":"CreateAsync"},{"location":"api/base_section/#constructors","text":"","title":"Constructors"},{"location":"api/base_section/#fromdata","text":"BaseSection . fromData ( data : table ) -> BaseSection","title":"fromData"},{"location":"api/base_section/#frominstance","text":"BaseSection . fromInstance ( instance : Instance ) -> BaseSection","title":"fromInstance"},{"location":"api/cframe_track/","text":"CFrameTrack Module A 3D line that describes the positions of your track in the workspace Module CFrameTrack { CFrameTrack : CFrameTrack , IsType : function , PointToPoint : PointToPointCFrameTrack , PointToPointBuilder : PointToPointCFrameTrackBuilder , PointToPoint2 : PointToPointCFrameTrack2 , PointToPoint2Builder : PointToPointCFrameTrack2Builder , Create : function , CreateFromData : function , CreateFromInstance : function IsPoints : function , GetPointsFromInstance : function } Factory Pattern The CFrameTrack module provides methods to use a factory pattern for the following functions. Here's a list of the names used and their corresponding classes: { PointToPoint = PointToPointCFrameTrack , PointToPoint2 = PointToPoint2CFrameTrack , } Create CFrameTrack . Create ( value : Instance or table ) -> CFrameTrack CreateFromData CFrameTrack . CreateFromData ( data : table ) -> CFrameTrack CreateFromInstance CFrameTrack . CreateFromInstance ( instance : Instance ) -> CFrameTrack CFrameTrack Base class for all CFrameTrack { Name : string , Length : number , } Constructors fromData CFrameTrack . fromData ( data : table ) -> CFrameTrack fromInstance CFrameTrack . fromInstance ( instance : Instance ) -> CFrameTrack PointToPoint Extends CFrameTrack { IsCircuited : boolean , CircuitRemainder : number , LengthWithoutCircuitRemainder : number , DistanceBetweenPoints : number , Points : CFrame [] } Constructors fromData PointToPointCFrameTrack . fromData ( data : table ) -> PointToPointCFrameTrack data { IsCircuited : boolean , DistanceBetweenPoints : number , Points : CFrame [] } fromInstance PointToPointCFrameTrack . fromInstance ( instance : Instance ) -> PointToPointCFrameTrack instance { TrackClass : StringValue , // Value = \"PointToPoint\" IsCircuited : BoolValue , DistanceBetweenPoints : NumberValue , Points : PointsInstance } PointToPointBuilder Constructors new PointToPointBuilder . new () -> PointToPointBuilder Methods Build PointToPointBuilder : Build () -> PointToPointCFrameTrack2 Finish PointToPointBuilder : Build () -> PointToPointCFrameTrack2 WithPoints PointToPointBuilder : WithPoints ( points : CFrame []) -> Self WithPointsInstance PointToPointBuilder : WithPointsInstance ( pointsInstance : Instance ) -> Self WithIsCircuited PointToPointBuilder : WithIsCircuited ( value : boolean ) -> Self WithDistanceBetweenPoints PointToPointBuilder : WithDistanceBetweenPoints ( value : number ) -> Self PointToPoint2 Extends CFrameTrack { IsCircuited : boolean , CircuitRemainder : number , LengthWithoutCircuitRemainder : number , Hasher : Hasher < CFrame > , } Constructors fromData PointToPointCFrameTrack2 . fromData ( data : table ) -> PointToPointCFrameTrack data { IsCircuited : boolean , HashInterval : number , Points : CFrame [] } fromInstance PointToPointCFrameTrack2 . fromInstance ( instance : Instance ) -> PointToPointCFrameTrack2 instance { TrackClass : StringValue , // Value = \"PointToPoint2\" IsCircuited : BoolValue , HashInterval : ? NumberValue , Points : PointsInstance , } PointToPoint2Builder Constructors new PointToPoint2Builder . new () -> PointToPoint2Builder Methods Build PointToPoint2Builder : Build () -> PointToPointCFrameTrack2 Finish PointToPoint2Builder : Build () -> PointToPointCFrameTrack2 WithPoints PointToPoint2Builder : WithPoints ( points : CFrame []) -> Self WithPointsInstance PointToPoint2Builder : WithPointsInstance ( pointsInstance : Instance ) -> Self WithIsCircuited PointToPoint2Builder : WithIsCircuited ( value : boolean ) -> Self WithHashInterval PointToPoint2Builder : WithHashInterval ( interval : number ) -> Self","title":"CFrameTrack"},{"location":"api/cframe_track/#cframetrack-module","text":"A 3D line that describes the positions of your track in the workspace","title":"CFrameTrack Module"},{"location":"api/cframe_track/#module","text":"CFrameTrack { CFrameTrack : CFrameTrack , IsType : function , PointToPoint : PointToPointCFrameTrack , PointToPointBuilder : PointToPointCFrameTrackBuilder , PointToPoint2 : PointToPointCFrameTrack2 , PointToPoint2Builder : PointToPointCFrameTrack2Builder , Create : function , CreateFromData : function , CreateFromInstance : function IsPoints : function , GetPointsFromInstance : function }","title":"Module"},{"location":"api/cframe_track/#factory-pattern","text":"The CFrameTrack module provides methods to use a factory pattern for the following functions. Here's a list of the names used and their corresponding classes: { PointToPoint = PointToPointCFrameTrack , PointToPoint2 = PointToPoint2CFrameTrack , }","title":"Factory Pattern"},{"location":"api/cframe_track/#create","text":"CFrameTrack . Create ( value : Instance or table ) -> CFrameTrack","title":"Create"},{"location":"api/cframe_track/#createfromdata","text":"CFrameTrack . CreateFromData ( data : table ) -> CFrameTrack","title":"CreateFromData"},{"location":"api/cframe_track/#createfrominstance","text":"CFrameTrack . CreateFromInstance ( instance : Instance ) -> CFrameTrack","title":"CreateFromInstance"},{"location":"api/cframe_track/#cframetrack","text":"Base class for all CFrameTrack { Name : string , Length : number , }","title":"CFrameTrack"},{"location":"api/cframe_track/#constructors","text":"","title":"Constructors"},{"location":"api/cframe_track/#fromdata","text":"CFrameTrack . fromData ( data : table ) -> CFrameTrack","title":"fromData"},{"location":"api/cframe_track/#frominstance","text":"CFrameTrack . fromInstance ( instance : Instance ) -> CFrameTrack","title":"fromInstance"},{"location":"api/cframe_track/#pointtopoint","text":"Extends CFrameTrack { IsCircuited : boolean , CircuitRemainder : number , LengthWithoutCircuitRemainder : number , DistanceBetweenPoints : number , Points : CFrame [] }","title":"PointToPoint"},{"location":"api/cframe_track/#constructors_1","text":"","title":"Constructors"},{"location":"api/cframe_track/#fromdata_1","text":"PointToPointCFrameTrack . fromData ( data : table ) -> PointToPointCFrameTrack","title":"fromData"},{"location":"api/cframe_track/#data","text":"{ IsCircuited : boolean , DistanceBetweenPoints : number , Points : CFrame [] }","title":"data"},{"location":"api/cframe_track/#frominstance_1","text":"PointToPointCFrameTrack . fromInstance ( instance : Instance ) -> PointToPointCFrameTrack","title":"fromInstance"},{"location":"api/cframe_track/#instance","text":"{ TrackClass : StringValue , // Value = \"PointToPoint\" IsCircuited : BoolValue , DistanceBetweenPoints : NumberValue , Points : PointsInstance }","title":"instance"},{"location":"api/cframe_track/#pointtopointbuilder","text":"","title":"PointToPointBuilder"},{"location":"api/cframe_track/#constructors_2","text":"","title":"Constructors"},{"location":"api/cframe_track/#new","text":"PointToPointBuilder . new () -> PointToPointBuilder","title":"new"},{"location":"api/cframe_track/#methods","text":"","title":"Methods"},{"location":"api/cframe_track/#build","text":"PointToPointBuilder : Build () -> PointToPointCFrameTrack2","title":"Build"},{"location":"api/cframe_track/#finish","text":"PointToPointBuilder : Build () -> PointToPointCFrameTrack2","title":"Finish"},{"location":"api/cframe_track/#withpoints","text":"PointToPointBuilder : WithPoints ( points : CFrame []) -> Self","title":"WithPoints"},{"location":"api/cframe_track/#withpointsinstance","text":"PointToPointBuilder : WithPointsInstance ( pointsInstance : Instance ) -> Self","title":"WithPointsInstance"},{"location":"api/cframe_track/#withiscircuited","text":"PointToPointBuilder : WithIsCircuited ( value : boolean ) -> Self","title":"WithIsCircuited"},{"location":"api/cframe_track/#withdistancebetweenpoints","text":"PointToPointBuilder : WithDistanceBetweenPoints ( value : number ) -> Self","title":"WithDistanceBetweenPoints"},{"location":"api/cframe_track/#pointtopoint2","text":"Extends CFrameTrack { IsCircuited : boolean , CircuitRemainder : number , LengthWithoutCircuitRemainder : number , Hasher : Hasher < CFrame > , }","title":"PointToPoint2"},{"location":"api/cframe_track/#constructors_3","text":"","title":"Constructors"},{"location":"api/cframe_track/#fromdata_2","text":"PointToPointCFrameTrack2 . fromData ( data : table ) -> PointToPointCFrameTrack","title":"fromData"},{"location":"api/cframe_track/#data_1","text":"{ IsCircuited : boolean , HashInterval : number , Points : CFrame [] }","title":"data"},{"location":"api/cframe_track/#frominstance_2","text":"PointToPointCFrameTrack2 . fromInstance ( instance : Instance ) -> PointToPointCFrameTrack2","title":"fromInstance"},{"location":"api/cframe_track/#instance_1","text":"{ TrackClass : StringValue , // Value = \"PointToPoint2\" IsCircuited : BoolValue , HashInterval : ? NumberValue , Points : PointsInstance , }","title":"instance"},{"location":"api/cframe_track/#pointtopoint2builder","text":"","title":"PointToPoint2Builder"},{"location":"api/cframe_track/#constructors_4","text":"","title":"Constructors"},{"location":"api/cframe_track/#new_1","text":"PointToPoint2Builder . new () -> PointToPoint2Builder","title":"new"},{"location":"api/cframe_track/#methods_1","text":"","title":"Methods"},{"location":"api/cframe_track/#build_1","text":"PointToPoint2Builder : Build () -> PointToPointCFrameTrack2","title":"Build"},{"location":"api/cframe_track/#finish_1","text":"PointToPoint2Builder : Build () -> PointToPointCFrameTrack2","title":"Finish"},{"location":"api/cframe_track/#withpoints_1","text":"PointToPoint2Builder : WithPoints ( points : CFrame []) -> Self","title":"WithPoints"},{"location":"api/cframe_track/#withpointsinstance_1","text":"PointToPoint2Builder : WithPointsInstance ( pointsInstance : Instance ) -> Self","title":"WithPointsInstance"},{"location":"api/cframe_track/#withiscircuited_1","text":"PointToPoint2Builder : WithIsCircuited ( value : boolean ) -> Self","title":"WithIsCircuited"},{"location":"api/cframe_track/#withhashinterval","text":"PointToPoint2Builder : WithHashInterval ( interval : number ) -> Self","title":"WithHashInterval"},{"location":"api/cframe_util/","text":"CFrame Utility CFrameInstance - CFrameValue - Vector3Value - BasePart - Model - Attachment CFrameOffsetInstance INSTANCE DATA Origin : CFrameInstance Offset : CFrameInstance","title":"CFrame Util"},{"location":"api/cframe_util/#cframe-utility","text":"","title":"CFrame Utility"},{"location":"api/cframe_util/#cframeinstance","text":"- CFrameValue - Vector3Value - BasePart - Model - Attachment","title":"CFrameInstance"},{"location":"api/cframe_util/#cframeoffsetinstance","text":"","title":"CFrameOffsetInstance"},{"location":"api/cframe_util/#instance-data","text":"Origin : CFrameInstance Offset : CFrameInstance","title":"INSTANCE DATA"},{"location":"api/physics_rails/","text":"PhysicsRails Extends Section Builds all the RailSegments it holds along a section of track at once and gives it physics properties. These physics can help move a track. Meant for physics based coasters. PhysicsRails : BaseSection { Name : string, Rails : RailSegments [], Interval : positiveNumber, } Methods Create Creates a Model whose children are segments created from startPosition to endPosition Segment : Create ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Model CreateAsync Like Create , but wraps this call in a Promise and returns it. Segment : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Promise < Model > Constructors fromData Segment . fromData ( data : table ) -> Segment data { Name : string , Rails : RailSegments [], Interval : positiveNumber , } fromInstance Segment . fromInstance ( instance : Instance ) -> Segment instance Children { Rails : Instance , // see RailSegment.fromInstance Interval : NumberValue , }","title":"PhysicsRails"},{"location":"api/physics_rails/#physicsrails","text":"Extends Section Builds all the RailSegments it holds along a section of track at once and gives it physics properties. These physics can help move a track. Meant for physics based coasters. PhysicsRails : BaseSection { Name : string, Rails : RailSegments [], Interval : positiveNumber, }","title":"PhysicsRails"},{"location":"api/physics_rails/#methods","text":"","title":"Methods"},{"location":"api/physics_rails/#create","text":"Creates a Model whose children are segments created from startPosition to endPosition Segment : Create ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Model","title":"Create"},{"location":"api/physics_rails/#createasync","text":"Like Create , but wraps this call in a Promise and returns it. Segment : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Promise < Model >","title":"CreateAsync"},{"location":"api/physics_rails/#constructors","text":"","title":"Constructors"},{"location":"api/physics_rails/#fromdata","text":"Segment . fromData ( data : table ) -> Segment","title":"fromData"},{"location":"api/physics_rails/#data","text":"{ Name : string , Rails : RailSegments [], Interval : positiveNumber , }","title":"data"},{"location":"api/physics_rails/#frominstance","text":"Segment . fromInstance ( instance : Instance ) -> Segment","title":"fromInstance"},{"location":"api/physics_rails/#instance-children","text":"{ Rails : Instance , // see RailSegment.fromInstance Interval : NumberValue , }","title":"instance Children"},{"location":"api/section/","text":"Section Extends Section Builds the given Segment at a set position interval along a section of track. Section : BaseSection { Name : string, Segment : Segment, Interval : positiveNumber, StartOffset : number, Optimize : boolean, BuildEnd : boolean, } Methods Create Creates an Instance created on the given CFrameTrack from startPosition to endPosition Section : Create ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Instance CreateAsync Like Create , but wraps this call in a Promise and returns it. Section : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Promise < Instance > Constructors fromData Section . fromData ( data : table ) -> Section data { Name : ? string , Segment : Segment , Interval : positiveNumber , StartOffset : number , Optimize : boolean , BuildEnd : boolean , } fromInstance Section . fromInstance ( instance : Instance ) -> Section instance Children { Name : StringValue , Segment : Instance , // see Segment.CreateFromInstance Interval : NumberValue , StartOffset : NumberValue , Optimize : BoolValue , BuildEnd : BoolValue , }","title":"Section"},{"location":"api/section/#section","text":"Extends Section Builds the given Segment at a set position interval along a section of track. Section : BaseSection { Name : string, Segment : Segment, Interval : positiveNumber, StartOffset : number, Optimize : boolean, BuildEnd : boolean, }","title":"Section"},{"location":"api/section/#methods","text":"","title":"Methods"},{"location":"api/section/#create","text":"Creates an Instance created on the given CFrameTrack from startPosition to endPosition Section : Create ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Instance","title":"Create"},{"location":"api/section/#createasync","text":"Like Create , but wraps this call in a Promise and returns it. Section : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Promise < Instance >","title":"CreateAsync"},{"location":"api/section/#constructors","text":"","title":"Constructors"},{"location":"api/section/#fromdata","text":"Section . fromData ( data : table ) -> Section","title":"fromData"},{"location":"api/section/#data","text":"{ Name : ? string , Segment : Segment , Interval : positiveNumber , StartOffset : number , Optimize : boolean , BuildEnd : boolean , }","title":"data"},{"location":"api/section/#frominstance","text":"Section . fromInstance ( instance : Instance ) -> Section","title":"fromInstance"},{"location":"api/section/#instance-children","text":"{ Name : StringValue , Segment : Instance , // see Segment.CreateFromInstance Interval : NumberValue , StartOffset : NumberValue , Optimize : BoolValue , BuildEnd : BoolValue , }","title":"instance Children"},{"location":"api/track_group/","text":"TrackGroup Extends Section Builds all the Sections it holds along a section of track at once. TrackGroup : BaseSection { Name : string, Sections : BaseSection[], } Methods Create Creates a Model TrackGroup : Create ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Model CreateAsync Like Create , but wraps this call in a Promise and returns it. TrackGroup : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Promise < Model > Constructors fromData TrackGroup . fromData ( data : table ) -> TrackGroup data { Name : ? string , Sections : BaseSection [] } fromInstance TrackGroup . fromInstance ( instance : Instance ) -> TrackGroup Configurations will be converted to TrackGroups Instances named ASSETS will be ignored. Everything else will be converted to Sections.","title":"TrackGroup"},{"location":"api/track_group/#trackgroup","text":"Extends Section Builds all the Sections it holds along a section of track at once. TrackGroup : BaseSection { Name : string, Sections : BaseSection[], }","title":"TrackGroup"},{"location":"api/track_group/#methods","text":"","title":"Methods"},{"location":"api/track_group/#create","text":"Creates a Model TrackGroup : Create ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Model","title":"Create"},{"location":"api/track_group/#createasync","text":"Like Create , but wraps this call in a Promise and returns it. TrackGroup : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Promise < Model >","title":"CreateAsync"},{"location":"api/track_group/#constructors","text":"","title":"Constructors"},{"location":"api/track_group/#fromdata","text":"TrackGroup . fromData ( data : table ) -> TrackGroup","title":"fromData"},{"location":"api/track_group/#data","text":"{ Name : ? string , Sections : BaseSection [] }","title":"data"},{"location":"api/track_group/#frominstance","text":"TrackGroup . fromInstance ( instance : Instance ) -> TrackGroup Configurations will be converted to TrackGroups Instances named ASSETS will be ignored. Everything else will be converted to Sections.","title":"fromInstance"},{"location":"api/vector3_util/","text":"Vector3 Utility Vector3Instance - CFrameValue - Vector3Value - BasePart - Model - Attachment Vector3OffsetInstance INSTANCE DATA Origin : Vector3Instance Offset : Vector3Instance","title":"Vector3 Util"},{"location":"api/vector3_util/#vector3-utility","text":"","title":"Vector3 Utility"},{"location":"api/vector3_util/#vector3instance","text":"- CFrameValue - Vector3Value - BasePart - Model - Attachment","title":"Vector3Instance"},{"location":"api/vector3_util/#vector3offsetinstance","text":"","title":"Vector3OffsetInstance"},{"location":"api/vector3_util/#instance-data","text":"Origin : Vector3Instance Offset : Vector3Instance","title":"INSTANCE DATA"},{"location":"api/segment/","text":"Segment (Module) Describes how to build a piece of track. Contents MeshData Rail TrackObject MidTrackObject Crossbeam Rect RectRail BoxRail Module Segment { Segment : Segment , IsType : function ( object : any ) -> ( boolean , ? string ), MeshData : MeshData , MeshDataBuilder : MeshDataBuilder , Rail : RailSegment , RailBuilder : RailSegmentBuilder , TrackObject : TrackObjectSegment , TrackObjectBuilder : TrackObjectSegmentBuilder , MidTrackObject : MidTrackObjectSegment , MidTrackObjectBuilder : MidTrackObjectSegmentBuilder , Crossbeam : CrossbeamSegment , CrossbeamBuilder : CrossbeamSegmentBuilder , Rect : RectSegment , RectBuilder : RectSegmentBuilder , RectRail : RectRailSegment , RectRailBuilder : RectRailSegmentBuilder , BoxRail : BoxRailSegment , BoxRailBuilder : BoxRailSegmentBuilder , Create : function ( object : table | Instance ) -> Segment , CreateFromData : function ( data : table ) -> Segment , CreateFromInstance : function ( instance : Instance ) -> Segment , } Type Checking The following functions are used for type checking. IsType Segment.IsType(object : any) -> boolean, ?string Type checking function for a Segment. Returns true if a Segment IsInstanceData Segment.IsInstanceData(object : any) -> boolean, ?string Type checking function for a Instance. Returns true if it has a StringValue called SegmentType CheckInstance Segment.CheckInstance(object : any) -> boolean, ?string Type checking function for a Instance. Returns true if it can be converted into a Segment. Factory Pattern The Segment module provides methods to use a factory pattern for the following functions. Here's a list of the names used and their corresponding classes: { Rail = RailSegment , TrackObject = TrackObjectSegment , MidTrackObject = MidTrackObjectSegment , Crossbeam = CrossbeamSegment , Rect = RectSegment , RectRail = RectRailSegment , BoxRail = BoxRailSegment , } Create Segment.Create(object : any) -> boolean, ?string Type checking function for a Segment. Returns true if a Segment CreateFromData Segment.CreateFromData(object : any) -> boolean, ?string Factory pattern for creating a Segment. Table must have a string called SegmentType as a value. CreateFromInstance Segment.CreateFromInstance(object : any) -> boolean, ?string Factory pattern for creating a Segment. Creates a Segment from an Instance. Instance must have a StringValue named SegmentType as one of it's children. Segment Base Class for all Segments Segment { Name : string } Methods Create Produces a new segment instance based off of the two CFrame positions given Segment : CreateAsync ( startCFrame : CFrame , endCFrame : CFrame ) -> Instance CreateAsync Like Create, but wraps this call in a Promise and returns it. Segment : CreateAsync ( startCFrame : CFrame , endCFrame : CFrame ) -> Promise -> Instance","title":"Module"},{"location":"api/segment/#segment-module","text":"Describes how to build a piece of track.","title":"Segment (Module)"},{"location":"api/segment/#contents","text":"MeshData Rail TrackObject MidTrackObject Crossbeam Rect RectRail BoxRail","title":"Contents"},{"location":"api/segment/#module","text":"Segment { Segment : Segment , IsType : function ( object : any ) -> ( boolean , ? string ), MeshData : MeshData , MeshDataBuilder : MeshDataBuilder , Rail : RailSegment , RailBuilder : RailSegmentBuilder , TrackObject : TrackObjectSegment , TrackObjectBuilder : TrackObjectSegmentBuilder , MidTrackObject : MidTrackObjectSegment , MidTrackObjectBuilder : MidTrackObjectSegmentBuilder , Crossbeam : CrossbeamSegment , CrossbeamBuilder : CrossbeamSegmentBuilder , Rect : RectSegment , RectBuilder : RectSegmentBuilder , RectRail : RectRailSegment , RectRailBuilder : RectRailSegmentBuilder , BoxRail : BoxRailSegment , BoxRailBuilder : BoxRailSegmentBuilder , Create : function ( object : table | Instance ) -> Segment , CreateFromData : function ( data : table ) -> Segment , CreateFromInstance : function ( instance : Instance ) -> Segment , }","title":"Module"},{"location":"api/segment/#type-checking","text":"The following functions are used for type checking.","title":"Type Checking"},{"location":"api/segment/#istype","text":"Segment.IsType(object : any) -> boolean, ?string Type checking function for a Segment. Returns true if a Segment","title":"IsType"},{"location":"api/segment/#isinstancedata","text":"Segment.IsInstanceData(object : any) -> boolean, ?string Type checking function for a Instance. Returns true if it has a StringValue called SegmentType","title":"IsInstanceData"},{"location":"api/segment/#checkinstance","text":"Segment.CheckInstance(object : any) -> boolean, ?string Type checking function for a Instance. Returns true if it can be converted into a Segment.","title":"CheckInstance"},{"location":"api/segment/#factory-pattern","text":"The Segment module provides methods to use a factory pattern for the following functions. Here's a list of the names used and their corresponding classes: { Rail = RailSegment , TrackObject = TrackObjectSegment , MidTrackObject = MidTrackObjectSegment , Crossbeam = CrossbeamSegment , Rect = RectSegment , RectRail = RectRailSegment , BoxRail = BoxRailSegment , }","title":"Factory Pattern"},{"location":"api/segment/#create","text":"Segment.Create(object : any) -> boolean, ?string Type checking function for a Segment. Returns true if a Segment","title":"Create"},{"location":"api/segment/#createfromdata","text":"Segment.CreateFromData(object : any) -> boolean, ?string Factory pattern for creating a Segment. Table must have a string called SegmentType as a value.","title":"CreateFromData"},{"location":"api/segment/#createfrominstance","text":"Segment.CreateFromInstance(object : any) -> boolean, ?string Factory pattern for creating a Segment. Creates a Segment from an Instance. Instance must have a StringValue named SegmentType as one of it's children.","title":"CreateFromInstance"},{"location":"api/segment/#segment","text":"Base Class for all Segments Segment { Name : string }","title":"Segment"},{"location":"api/segment/#methods","text":"","title":"Methods"},{"location":"api/segment/#create_1","text":"Produces a new segment instance based off of the two CFrame positions given Segment : CreateAsync ( startCFrame : CFrame , endCFrame : CFrame ) -> Instance","title":"Create"},{"location":"api/segment/#createasync","text":"Like Create, but wraps this call in a Promise and returns it. Segment : CreateAsync ( startCFrame : CFrame , endCFrame : CFrame ) -> Promise -> Instance","title":"CreateAsync"},{"location":"api/segment/box_rail/","text":"BoxRail Segment Creates a Rail using Triangles based on a box of 4 points. Extrudes a Box from these 4 points. BoxRailSegment Extends Segment BoxRailSegment : Segment { Wedge : WedgePart , TopLeft : Vector3 , TopRight : Vector3 , BottomLeft : Vector3 , BottomRight : Vector3 , DrawTop : boolean , DrawBottom : boolean , DrawLeft : boolean , DrawRight : boolean , } Properties Wedge The wedge used to make the box. This will be cloned each time a new segment is created. TopLeft TopRight BottomLeft BottomRight DrawTop DrawBottom DrawLeft DrawRight Constructors fromData BoxRailSegment . fromData ( data : table ) -> BoxRailSegment data { Name : string , Wedge : WedgePart , TopLeft : Vector3 , TopRight : Vector3 , BottomLeft : Vector3 , BottomRight : Vector3 , DrawTop : ? boolean , DrawBottom : ? boolean , DrawLeft : ? boolean , DrawRight : ? boolean , } fromInstance BoxRailSegment . fromInstance ( instance : Instance ) -> BoxRailSegment instance Children { Wedge : ? WedgePart , TopLeft : Vector3OffsetInstance , TopRight : Vector3OffsetInstance , BottomLeft : Vector3OffsetInstance , BottomRight : Vector3OffsetInstance , DrawTop : ? BoolValue , DrawBottom : ? BoolValue , DrawLeft : ? BoolValue , DrawRight : ? BoolValue , } BoxRailSegmentBuilder Constructors new BoxRailSegmentBuilder . new () -> BoxRailSegmentBuilder Methods WithWedge BoxRailSegmentBuilder : WithWedge ( wedge : WedgePart ) -> self WithTopLeft BoxRailSegmentBuilder : WithTopLeft ( offset : Vector3 ) -> self WithTopRight BoxRailSegmentBuilder : WithTopRight ( offset : Vector3 ) -> self WithBottomLeft BoxRailSegmentBuilder : WithBottomLeft ( offset : Vector3 ) -> self WithBottomRight BoxRailSegmentBuilder : WithBottomRight ( offset : Vector3 ) -> self WithDrawTop BoxRailSegmentBuilder : WithDrawTop ( value : boolean ) -> self WithDrawBottom BoxRailSegmentBuilder : WithDrawBottom ( value : boolean ) -> self WithDrawLeft BoxRailSegmentBuilder : WithDrawLeft ( value : boolean ) -> self WithDrawRight BoxRailSegmentBuilder : WithDrawRight ( value : boolean ) -> self","title":"BoxRail"},{"location":"api/segment/box_rail/#boxrail-segment","text":"Creates a Rail using Triangles based on a box of 4 points. Extrudes a Box from these 4 points.","title":"BoxRail Segment"},{"location":"api/segment/box_rail/#boxrailsegment","text":"Extends Segment BoxRailSegment : Segment { Wedge : WedgePart , TopLeft : Vector3 , TopRight : Vector3 , BottomLeft : Vector3 , BottomRight : Vector3 , DrawTop : boolean , DrawBottom : boolean , DrawLeft : boolean , DrawRight : boolean , }","title":"BoxRailSegment"},{"location":"api/segment/box_rail/#properties","text":"Wedge The wedge used to make the box. This will be cloned each time a new segment is created. TopLeft TopRight BottomLeft BottomRight DrawTop DrawBottom DrawLeft DrawRight","title":"Properties"},{"location":"api/segment/box_rail/#constructors","text":"","title":"Constructors"},{"location":"api/segment/box_rail/#fromdata","text":"BoxRailSegment . fromData ( data : table ) -> BoxRailSegment","title":"fromData"},{"location":"api/segment/box_rail/#data","text":"{ Name : string , Wedge : WedgePart , TopLeft : Vector3 , TopRight : Vector3 , BottomLeft : Vector3 , BottomRight : Vector3 , DrawTop : ? boolean , DrawBottom : ? boolean , DrawLeft : ? boolean , DrawRight : ? boolean , }","title":"data"},{"location":"api/segment/box_rail/#frominstance","text":"BoxRailSegment . fromInstance ( instance : Instance ) -> BoxRailSegment","title":"fromInstance"},{"location":"api/segment/box_rail/#instance-children","text":"{ Wedge : ? WedgePart , TopLeft : Vector3OffsetInstance , TopRight : Vector3OffsetInstance , BottomLeft : Vector3OffsetInstance , BottomRight : Vector3OffsetInstance , DrawTop : ? BoolValue , DrawBottom : ? BoolValue , DrawLeft : ? BoolValue , DrawRight : ? BoolValue , }","title":"instance Children"},{"location":"api/segment/box_rail/#boxrailsegmentbuilder","text":"","title":"BoxRailSegmentBuilder"},{"location":"api/segment/box_rail/#constructors_1","text":"","title":"Constructors"},{"location":"api/segment/box_rail/#new","text":"BoxRailSegmentBuilder . new () -> BoxRailSegmentBuilder","title":"new"},{"location":"api/segment/box_rail/#methods","text":"","title":"Methods"},{"location":"api/segment/box_rail/#withwedge","text":"BoxRailSegmentBuilder : WithWedge ( wedge : WedgePart ) -> self","title":"WithWedge"},{"location":"api/segment/box_rail/#withtopleft","text":"BoxRailSegmentBuilder : WithTopLeft ( offset : Vector3 ) -> self","title":"WithTopLeft"},{"location":"api/segment/box_rail/#withtopright","text":"BoxRailSegmentBuilder : WithTopRight ( offset : Vector3 ) -> self","title":"WithTopRight"},{"location":"api/segment/box_rail/#withbottomleft","text":"BoxRailSegmentBuilder : WithBottomLeft ( offset : Vector3 ) -> self","title":"WithBottomLeft"},{"location":"api/segment/box_rail/#withbottomright","text":"BoxRailSegmentBuilder : WithBottomRight ( offset : Vector3 ) -> self","title":"WithBottomRight"},{"location":"api/segment/box_rail/#withdrawtop","text":"BoxRailSegmentBuilder : WithDrawTop ( value : boolean ) -> self","title":"WithDrawTop"},{"location":"api/segment/box_rail/#withdrawbottom","text":"BoxRailSegmentBuilder : WithDrawBottom ( value : boolean ) -> self","title":"WithDrawBottom"},{"location":"api/segment/box_rail/#withdrawleft","text":"BoxRailSegmentBuilder : WithDrawLeft ( value : boolean ) -> self","title":"WithDrawLeft"},{"location":"api/segment/box_rail/#withdrawright","text":"BoxRailSegmentBuilder : WithDrawRight ( value : boolean ) -> self","title":"WithDrawRight"},{"location":"api/segment/crossbeam/","text":"Crossbeam Segment Creates a BasePart that is positioned and sized parallel to the Track. Similar to Crossbeams in NewSmooth plugins CrossbeamSegment Extends Segment CrossbeamSegment : Segment { BasePart : BasePart , StartOffset : Vector3 , EndOffset : Vector3 , Size : Vector3 , Rotation : Vector3 , Horizontal : boolean MeshData : MeshData , } Properties BasePart The part used to make the rails. This will be cloned each time a new segment is created. StartOffset The offset from the CFrame EndOffset The offset from the CFrame Size Z is ignored Rotation Rotation Horizontal If this is horizontal. Used by CylinderMesh rails MeshData Data for a mesh that will be added to the rail on segment creation. See MeshData Constructors fromData CrossbeamSegment . fromData ( data : table ) -> CrossbeamSegment data { Name : string , BasePart : BasePart , Offset : Vector3 , Size : Vector3 , Rotation : Vector3 , Horizontal : boolean MeshData : ? MeshData , } fromInstance CrossbeamSegment . fromInstance ( instance : Instance ) -> CrossbeamSegment instance Children { BasePart : BasePart , Offset : Vector3OffsetInstance , Size : ? Vector3Value , Rotation : ? Vector3Value , Horizontal : ? BoolValue , MeshData : Instance , // see MeshData.fromInstance } CrossbeamSegmentBuilder Constructors new CrossbeamSegmentBuilder . new () -> CrossbeamSegmentBuilder Methods WithBasePart CrossbeamSegmentBuilder : WithBasePart ( basePart : BasePart ) -> self WithStartOffset CrossbeamSegmentBuilder : WithStartOffset ( offset : Vector3 ) -> self WithEndOffset CrossbeamSegmentBuilder : WithEndOffset ( offset : Vector3 ) -> self WithSize CrossbeamSegmentBuilder : WithSize ( size : Vector3 ) -> self WithHorizontal CrossbeamSegmentBuilder : WithHorizontal ( horizontal : boolean ) -> self WithMeshData CrossbeamSegmentBuilder : WithMeshData ( meshData : MeshData ) -> self","title":"Crossbeam"},{"location":"api/segment/crossbeam/#crossbeam-segment","text":"Creates a BasePart that is positioned and sized parallel to the Track. Similar to Crossbeams in NewSmooth plugins","title":"Crossbeam Segment"},{"location":"api/segment/crossbeam/#crossbeamsegment","text":"Extends Segment CrossbeamSegment : Segment { BasePart : BasePart , StartOffset : Vector3 , EndOffset : Vector3 , Size : Vector3 , Rotation : Vector3 , Horizontal : boolean MeshData : MeshData , }","title":"CrossbeamSegment"},{"location":"api/segment/crossbeam/#properties","text":"BasePart The part used to make the rails. This will be cloned each time a new segment is created. StartOffset The offset from the CFrame EndOffset The offset from the CFrame Size Z is ignored Rotation Rotation Horizontal If this is horizontal. Used by CylinderMesh rails MeshData Data for a mesh that will be added to the rail on segment creation. See MeshData","title":"Properties"},{"location":"api/segment/crossbeam/#constructors","text":"","title":"Constructors"},{"location":"api/segment/crossbeam/#fromdata","text":"CrossbeamSegment . fromData ( data : table ) -> CrossbeamSegment","title":"fromData"},{"location":"api/segment/crossbeam/#data","text":"{ Name : string , BasePart : BasePart , Offset : Vector3 , Size : Vector3 , Rotation : Vector3 , Horizontal : boolean MeshData : ? MeshData , }","title":"data"},{"location":"api/segment/crossbeam/#frominstance","text":"CrossbeamSegment . fromInstance ( instance : Instance ) -> CrossbeamSegment","title":"fromInstance"},{"location":"api/segment/crossbeam/#instance-children","text":"{ BasePart : BasePart , Offset : Vector3OffsetInstance , Size : ? Vector3Value , Rotation : ? Vector3Value , Horizontal : ? BoolValue , MeshData : Instance , // see MeshData.fromInstance }","title":"instance Children"},{"location":"api/segment/crossbeam/#crossbeamsegmentbuilder","text":"","title":"CrossbeamSegmentBuilder"},{"location":"api/segment/crossbeam/#constructors_1","text":"","title":"Constructors"},{"location":"api/segment/crossbeam/#new","text":"CrossbeamSegmentBuilder . new () -> CrossbeamSegmentBuilder","title":"new"},{"location":"api/segment/crossbeam/#methods","text":"","title":"Methods"},{"location":"api/segment/crossbeam/#withbasepart","text":"CrossbeamSegmentBuilder : WithBasePart ( basePart : BasePart ) -> self","title":"WithBasePart"},{"location":"api/segment/crossbeam/#withstartoffset","text":"CrossbeamSegmentBuilder : WithStartOffset ( offset : Vector3 ) -> self","title":"WithStartOffset"},{"location":"api/segment/crossbeam/#withendoffset","text":"CrossbeamSegmentBuilder : WithEndOffset ( offset : Vector3 ) -> self","title":"WithEndOffset"},{"location":"api/segment/crossbeam/#withsize","text":"CrossbeamSegmentBuilder : WithSize ( size : Vector3 ) -> self","title":"WithSize"},{"location":"api/segment/crossbeam/#withhorizontal","text":"CrossbeamSegmentBuilder : WithHorizontal ( horizontal : boolean ) -> self","title":"WithHorizontal"},{"location":"api/segment/crossbeam/#withmeshdata","text":"CrossbeamSegmentBuilder : WithMeshData ( meshData : MeshData ) -> self","title":"WithMeshData"},{"location":"api/segment/mesh_data/","text":"MeshData This page defines documentation for MeshData and MeshDataBuilder MeshData { Mesh : string, MeshType : Enum.MeshType, Offset : Vector3, Scale : Vector3, } Mesh data struct for the NewSmooth Algorithm. Used by: RailSegment CrossbeamSegment Properties Mesh Constructors fromData MeshData . fromData ( data : table ) -> MeshData data { Mesh : string , MeshType : Enum . MeshType , Offset : Vector3 , Scale : Vector3 , } fromInstance MeshData . fromInstance ( instance : Instance ) -> MeshData instance Children { Mesh : StringValue , MeshType : StringValue , Offset : Vector3Value , Scale : Vector3Value , } fromMesh MeshData . fromMesh ( meshInstance : MeshInstance ) -> MeshData Creates MeshData from a given Mesh. MeshDataBuilder MeshDataBuilder { Mesh : string, MeshType : string, Offset : Vector3, Scale : Vector3, } Methods WithMesh MeshDataBuilder : WithMesh ( mesh : string ) -> self WithMeshType MeshDataBuilder : WithMeshType ( mesh : string ) -> self WithOffset MeshDataBuilder : WithOffset ( offset : Vector3 ) -> self WithScale MeshDataBuilder : WithScale ( scale : Vector3 ) -> self","title":"MeshData"},{"location":"api/segment/mesh_data/#meshdata","text":"This page defines documentation for MeshData and MeshDataBuilder","title":"MeshData"},{"location":"api/segment/mesh_data/#meshdata_1","text":"{ Mesh : string, MeshType : Enum.MeshType, Offset : Vector3, Scale : Vector3, } Mesh data struct for the NewSmooth Algorithm. Used by: RailSegment CrossbeamSegment","title":"MeshData"},{"location":"api/segment/mesh_data/#properties","text":"","title":"Properties"},{"location":"api/segment/mesh_data/#mesh","text":"","title":"Mesh"},{"location":"api/segment/mesh_data/#constructors","text":"","title":"Constructors"},{"location":"api/segment/mesh_data/#fromdata","text":"MeshData . fromData ( data : table ) -> MeshData","title":"fromData"},{"location":"api/segment/mesh_data/#data","text":"{ Mesh : string , MeshType : Enum . MeshType , Offset : Vector3 , Scale : Vector3 , }","title":"data"},{"location":"api/segment/mesh_data/#frominstance","text":"MeshData . fromInstance ( instance : Instance ) -> MeshData","title":"fromInstance"},{"location":"api/segment/mesh_data/#instance-children","text":"{ Mesh : StringValue , MeshType : StringValue , Offset : Vector3Value , Scale : Vector3Value , }","title":"instance Children"},{"location":"api/segment/mesh_data/#frommesh","text":"MeshData . fromMesh ( meshInstance : MeshInstance ) -> MeshData Creates MeshData from a given Mesh.","title":"fromMesh"},{"location":"api/segment/mesh_data/#meshdatabuilder","text":"MeshDataBuilder { Mesh : string, MeshType : string, Offset : Vector3, Scale : Vector3, }","title":"MeshDataBuilder"},{"location":"api/segment/mesh_data/#methods","text":"","title":"Methods"},{"location":"api/segment/mesh_data/#withmesh","text":"MeshDataBuilder : WithMesh ( mesh : string ) -> self","title":"WithMesh"},{"location":"api/segment/mesh_data/#withmeshtype","text":"MeshDataBuilder : WithMeshType ( mesh : string ) -> self","title":"WithMeshType"},{"location":"api/segment/mesh_data/#withoffset","text":"MeshDataBuilder : WithOffset ( offset : Vector3 ) -> self","title":"WithOffset"},{"location":"api/segment/mesh_data/#withscale","text":"MeshDataBuilder : WithScale ( scale : Vector3 ) -> self","title":"WithScale"},{"location":"api/segment/mid_track_object/","text":"MidTrackObject Segment Creates an object, either a BasePart or a Model, that is positioned at a given point in the track. Compared to TrackObject, will position the object between two TrackPositions. MidTrackObjectSegment Extends Segment MidTrackObjectSegment : Segment { Object : BasePart | Model , Offset : CFrame , UseLookVector : boolean } Properties Object The part used to make the rails. This will be cloned each time a new segment is created. Offset The offset from the CFrame UseLookVector If true, uses LookVector and applies no rotation. Constructors fromData MidTrackObjectSegment . fromData ( data : table ) -> MidTrackObjectSegment data { Name : string , Object : BasePart | Model , Offset : CFrame , UseLookVector : boolean } fromInstance MidTrackObjectSegment . fromInstance ( instance : Instance ) -> MidTrackObjectSegment instance Children { Object : BasePart | Model , Offset : CFrameOffsetInstance , UseLookVector : ? BoolValue , } MidTrackObjectSegmentBuilder Constructors new MidTrackObjectSegmentBuilder . new () -> MidTrackObjectSegmentBuilder Methods WithObject MidTrackObjectSegmentBuilder : WithObject ( object : BasePart | Model ) -> self WithOffset MidTrackObjectSegmentBuilder : WithOffset ( offset : CFrame ) -> self WithUseLookVector MidTrackObjectSegmentBuilder : WithUseLookVector ( useLookVector : boolean ) -> self","title":"MidTrackObject"},{"location":"api/segment/mid_track_object/#midtrackobject-segment","text":"Creates an object, either a BasePart or a Model, that is positioned at a given point in the track. Compared to TrackObject, will position the object between two TrackPositions.","title":"MidTrackObject Segment"},{"location":"api/segment/mid_track_object/#midtrackobjectsegment","text":"Extends Segment MidTrackObjectSegment : Segment { Object : BasePart | Model , Offset : CFrame , UseLookVector : boolean }","title":"MidTrackObjectSegment"},{"location":"api/segment/mid_track_object/#properties","text":"Object The part used to make the rails. This will be cloned each time a new segment is created. Offset The offset from the CFrame UseLookVector If true, uses LookVector and applies no rotation.","title":"Properties"},{"location":"api/segment/mid_track_object/#constructors","text":"","title":"Constructors"},{"location":"api/segment/mid_track_object/#fromdata","text":"MidTrackObjectSegment . fromData ( data : table ) -> MidTrackObjectSegment","title":"fromData"},{"location":"api/segment/mid_track_object/#data","text":"{ Name : string , Object : BasePart | Model , Offset : CFrame , UseLookVector : boolean }","title":"data"},{"location":"api/segment/mid_track_object/#frominstance","text":"MidTrackObjectSegment . fromInstance ( instance : Instance ) -> MidTrackObjectSegment","title":"fromInstance"},{"location":"api/segment/mid_track_object/#instance-children","text":"{ Object : BasePart | Model , Offset : CFrameOffsetInstance , UseLookVector : ? BoolValue , }","title":"instance Children"},{"location":"api/segment/mid_track_object/#midtrackobjectsegmentbuilder","text":"","title":"MidTrackObjectSegmentBuilder"},{"location":"api/segment/mid_track_object/#constructors_1","text":"","title":"Constructors"},{"location":"api/segment/mid_track_object/#new","text":"MidTrackObjectSegmentBuilder . new () -> MidTrackObjectSegmentBuilder","title":"new"},{"location":"api/segment/mid_track_object/#methods","text":"","title":"Methods"},{"location":"api/segment/mid_track_object/#withobject","text":"MidTrackObjectSegmentBuilder : WithObject ( object : BasePart | Model ) -> self","title":"WithObject"},{"location":"api/segment/mid_track_object/#withoffset","text":"MidTrackObjectSegmentBuilder : WithOffset ( offset : CFrame ) -> self","title":"WithOffset"},{"location":"api/segment/mid_track_object/#withuselookvector","text":"MidTrackObjectSegmentBuilder : WithUseLookVector ( useLookVector : boolean ) -> self","title":"WithUseLookVector"},{"location":"api/segment/rail/","text":"Rail Segment Creates a BasePart that is positioned and sized parallel to the Track. Similar to Rails in NewSmooth plugins RailSegment Extends Segment RailSegment : Segment { BasePart : BasePart , Offset : Vector3 , Size : Vector3 , Rotation : Vector3 , Horizontal : boolean MeshData : MeshData , } Properties BasePart The part used to make the rails. This will be cloned each time a new segment is created. Offset The offset from the CFrame Size Z is ignored Rotation Rotation Horizontal If this is horizontal. Used by CylinderMesh rails MeshData Data for a mesh that will be added to the rail on segment creation. See MeshData Constructors fromData RailSegment . fromData ( data : table ) -> RailSegment data { Name : string , BasePart : BasePart , Offset : Vector3 , Size : Vector3 , Rotation : Vector3 , Horizontal : boolean MeshData : ? MeshData , } fromInstance RailSegment . fromInstance ( instance : Instance ) -> RailSegment instance Children { BasePart : BasePart , Offset : ? Vector3OffsetInstance , // see Vector3OffsetInstance Size : ? Vector3Value , Rotation : ? Vector3Value , Horizontal : ? BoolValue , MeshData : ? Instance , // see MeshData.fromInstance } RailSegmentBuilder Constructors new RailSegmentBuilder . new () -> RailSegmentBuilder Methods WithBasePart RailSegmentBuilder : WithBasePart ( basePart : BasePart ) -> self WithOffset RailSegmentBuilder : WithOffset ( offset : Vector3 ) -> self WithSize RailSegmentBuilder : WithSize ( size : Vector3 ) -> self WithHorizontal RailSegmentBuilder : WithHorizontal ( horizontal : boolean ) -> self WithMeshData RailSegmentBuilder : WithMeshData ( meshData : MeshData ) -> self","title":"Rail"},{"location":"api/segment/rail/#rail-segment","text":"Creates a BasePart that is positioned and sized parallel to the Track. Similar to Rails in NewSmooth plugins","title":"Rail Segment"},{"location":"api/segment/rail/#railsegment","text":"Extends Segment RailSegment : Segment { BasePart : BasePart , Offset : Vector3 , Size : Vector3 , Rotation : Vector3 , Horizontal : boolean MeshData : MeshData , }","title":"RailSegment"},{"location":"api/segment/rail/#properties","text":"BasePart The part used to make the rails. This will be cloned each time a new segment is created. Offset The offset from the CFrame Size Z is ignored Rotation Rotation Horizontal If this is horizontal. Used by CylinderMesh rails MeshData Data for a mesh that will be added to the rail on segment creation. See MeshData","title":"Properties"},{"location":"api/segment/rail/#constructors","text":"","title":"Constructors"},{"location":"api/segment/rail/#fromdata","text":"RailSegment . fromData ( data : table ) -> RailSegment","title":"fromData"},{"location":"api/segment/rail/#data","text":"{ Name : string , BasePart : BasePart , Offset : Vector3 , Size : Vector3 , Rotation : Vector3 , Horizontal : boolean MeshData : ? MeshData , }","title":"data"},{"location":"api/segment/rail/#frominstance","text":"RailSegment . fromInstance ( instance : Instance ) -> RailSegment","title":"fromInstance"},{"location":"api/segment/rail/#instance-children","text":"{ BasePart : BasePart , Offset : ? Vector3OffsetInstance , // see Vector3OffsetInstance Size : ? Vector3Value , Rotation : ? Vector3Value , Horizontal : ? BoolValue , MeshData : ? Instance , // see MeshData.fromInstance }","title":"instance Children"},{"location":"api/segment/rail/#railsegmentbuilder","text":"","title":"RailSegmentBuilder"},{"location":"api/segment/rail/#constructors_1","text":"","title":"Constructors"},{"location":"api/segment/rail/#new","text":"RailSegmentBuilder . new () -> RailSegmentBuilder","title":"new"},{"location":"api/segment/rail/#methods","text":"","title":"Methods"},{"location":"api/segment/rail/#withbasepart","text":"RailSegmentBuilder : WithBasePart ( basePart : BasePart ) -> self","title":"WithBasePart"},{"location":"api/segment/rail/#withoffset","text":"RailSegmentBuilder : WithOffset ( offset : Vector3 ) -> self","title":"WithOffset"},{"location":"api/segment/rail/#withsize","text":"RailSegmentBuilder : WithSize ( size : Vector3 ) -> self","title":"WithSize"},{"location":"api/segment/rail/#withhorizontal","text":"RailSegmentBuilder : WithHorizontal ( horizontal : boolean ) -> self","title":"WithHorizontal"},{"location":"api/segment/rail/#withmeshdata","text":"RailSegmentBuilder : WithMeshData ( meshData : MeshData ) -> self","title":"WithMeshData"},{"location":"api/segment/rect/","text":"Rect Segment Creates a Rectangle made out of 2 triangle/wedges and positioned at a given point in the track. RectSegment Extends Segment RectSegment : Segment { Wedge : WedgePart , P0 : Vector3 , P1 : Vector3 , P2 : Vector3 , P3 : Vector3 , } Properties Wedge The WedgePart used to make the rectangle. This will be cloned each time a new segment is created. P0 Offset 1 P1 Offset 2 P2 Offset 3 P3 Offset 4 Constructors fromData RectSegment . fromData ( data : table ) -> RectSegment data { Name : string , Wedge : WedgePart , P0 : Vector3 , P1 : Vector3 , P2 : Vector3 , P3 : Vector3 , } fromInstance RectSegment . fromInstance ( instance : Instance ) -> RectSegment instance Children { Wedge : ? WedgePart , P0 : Vector3OffsetInstance , P1 : Vector3OffsetInstance , P2 : Vector3OffsetInstance , P3 : Vector3OffsetInstance , } RectSegmentBuilder Constructors new RectSegmentBuilder . new () -> RectSegmentBuilder Methods WithWedge RectSegmentBuilder : WithWedge ( basePart : BasePart ) -> self WithP0 RectSegmentBuilder : WithP0 ( offset : Vector3 ) -> self WithP1 RectSegmentBuilder : WithP1 ( offset : Vector3 ) -> self WithP2 RectSegmentBuilder : WithP2 ( offset : Vector3 ) -> self WithP3 RectSegmentBuilder : WithP3 ( offset : Vector3 ) -> self","title":"Rect"},{"location":"api/segment/rect/#rect-segment","text":"Creates a Rectangle made out of 2 triangle/wedges and positioned at a given point in the track.","title":"Rect Segment"},{"location":"api/segment/rect/#rectsegment","text":"Extends Segment RectSegment : Segment { Wedge : WedgePart , P0 : Vector3 , P1 : Vector3 , P2 : Vector3 , P3 : Vector3 , }","title":"RectSegment"},{"location":"api/segment/rect/#properties","text":"Wedge The WedgePart used to make the rectangle. This will be cloned each time a new segment is created. P0 Offset 1 P1 Offset 2 P2 Offset 3 P3 Offset 4","title":"Properties"},{"location":"api/segment/rect/#constructors","text":"","title":"Constructors"},{"location":"api/segment/rect/#fromdata","text":"RectSegment . fromData ( data : table ) -> RectSegment","title":"fromData"},{"location":"api/segment/rect/#data","text":"{ Name : string , Wedge : WedgePart , P0 : Vector3 , P1 : Vector3 , P2 : Vector3 , P3 : Vector3 , }","title":"data"},{"location":"api/segment/rect/#frominstance","text":"RectSegment . fromInstance ( instance : Instance ) -> RectSegment","title":"fromInstance"},{"location":"api/segment/rect/#instance-children","text":"{ Wedge : ? WedgePart , P0 : Vector3OffsetInstance , P1 : Vector3OffsetInstance , P2 : Vector3OffsetInstance , P3 : Vector3OffsetInstance , }","title":"instance Children"},{"location":"api/segment/rect/#rectsegmentbuilder","text":"","title":"RectSegmentBuilder"},{"location":"api/segment/rect/#constructors_1","text":"","title":"Constructors"},{"location":"api/segment/rect/#new","text":"RectSegmentBuilder . new () -> RectSegmentBuilder","title":"new"},{"location":"api/segment/rect/#methods","text":"","title":"Methods"},{"location":"api/segment/rect/#withwedge","text":"RectSegmentBuilder : WithWedge ( basePart : BasePart ) -> self","title":"WithWedge"},{"location":"api/segment/rect/#withp0","text":"RectSegmentBuilder : WithP0 ( offset : Vector3 ) -> self","title":"WithP0"},{"location":"api/segment/rect/#withp1","text":"RectSegmentBuilder : WithP1 ( offset : Vector3 ) -> self","title":"WithP1"},{"location":"api/segment/rect/#withp2","text":"RectSegmentBuilder : WithP2 ( offset : Vector3 ) -> self","title":"WithP2"},{"location":"api/segment/rect/#withp3","text":"RectSegmentBuilder : WithP3 ( offset : Vector3 ) -> self","title":"WithP3"},{"location":"api/segment/rect_rail/","text":"RectRail Segment Creates a Rail using Triangles based on 4 points. Two points are offsets from the start position and two are offsets from the end position. RectRailSegment Extends Segment RectRailSegment : Segment { Wedge : WedgePart , StartOffset1 : Vector3 , StartOffset2 : Vector3 , EndOffset1 : Vector3 , EndOffset2 : Vector3 , } Properties Wedge StartOffset1 Offset relative to the start position StartOffset2 Offset relative to the start position EndOffset1 Offset relative to the end position EndOffset2 Offset relative to the end position Constructors fromData RectRailSegment . fromData ( data : table ) -> RectRailSegment data { Name : string , Wedge : WedgePart , StartOffset1 : Vector3 , StartOffset2 : Vector3 , EndOffset1 : Vector3 , EndOffset2 : Vector3 , } fromInstance RectRailSegment . fromInstance ( instance : Instance ) -> RectRailSegment instance Children { Wedge : ? WedgePart , StartOffset1 : Vector3OffsetInstance , StartOffset2 : Vector3OffsetInstance , EndOffset1 : Vector3OffsetInstance , EndOffset2 : Vector3OffsetInstance , } RectRailSegmentBuilder { Name : string , Wedge : WedgePart , StartOffset1 : Vector3 , StartOffset2 : Vector3 , EndOffset1 : Vector3 , EndOffset2 : Vector3 , } Constructors new RectRailSegmentBuilder . new () -> RectRailSegmentBuilder Methods WithWedge RectRailSegmentBuilder : WithWedge ( wedge : WedgePart ) -> self WithOffset RectRailSegmentBuilder : WithOffset ( offset : Vector3 ) -> self","title":"RectRail"},{"location":"api/segment/rect_rail/#rectrail-segment","text":"Creates a Rail using Triangles based on 4 points. Two points are offsets from the start position and two are offsets from the end position.","title":"RectRail Segment"},{"location":"api/segment/rect_rail/#rectrailsegment","text":"Extends Segment RectRailSegment : Segment { Wedge : WedgePart , StartOffset1 : Vector3 , StartOffset2 : Vector3 , EndOffset1 : Vector3 , EndOffset2 : Vector3 , }","title":"RectRailSegment"},{"location":"api/segment/rect_rail/#properties","text":"Wedge StartOffset1 Offset relative to the start position StartOffset2 Offset relative to the start position EndOffset1 Offset relative to the end position EndOffset2 Offset relative to the end position","title":"Properties"},{"location":"api/segment/rect_rail/#constructors","text":"","title":"Constructors"},{"location":"api/segment/rect_rail/#fromdata","text":"RectRailSegment . fromData ( data : table ) -> RectRailSegment","title":"fromData"},{"location":"api/segment/rect_rail/#data","text":"{ Name : string , Wedge : WedgePart , StartOffset1 : Vector3 , StartOffset2 : Vector3 , EndOffset1 : Vector3 , EndOffset2 : Vector3 , }","title":"data"},{"location":"api/segment/rect_rail/#frominstance","text":"RectRailSegment . fromInstance ( instance : Instance ) -> RectRailSegment","title":"fromInstance"},{"location":"api/segment/rect_rail/#instance-children","text":"{ Wedge : ? WedgePart , StartOffset1 : Vector3OffsetInstance , StartOffset2 : Vector3OffsetInstance , EndOffset1 : Vector3OffsetInstance , EndOffset2 : Vector3OffsetInstance , }","title":"instance Children"},{"location":"api/segment/rect_rail/#rectrailsegmentbuilder","text":"{ Name : string , Wedge : WedgePart , StartOffset1 : Vector3 , StartOffset2 : Vector3 , EndOffset1 : Vector3 , EndOffset2 : Vector3 , }","title":"RectRailSegmentBuilder"},{"location":"api/segment/rect_rail/#constructors_1","text":"","title":"Constructors"},{"location":"api/segment/rect_rail/#new","text":"RectRailSegmentBuilder . new () -> RectRailSegmentBuilder","title":"new"},{"location":"api/segment/rect_rail/#methods","text":"","title":"Methods"},{"location":"api/segment/rect_rail/#withwedge","text":"RectRailSegmentBuilder : WithWedge ( wedge : WedgePart ) -> self","title":"WithWedge"},{"location":"api/segment/rect_rail/#withoffset","text":"RectRailSegmentBuilder : WithOffset ( offset : Vector3 ) -> self","title":"WithOffset"},{"location":"api/segment/track_object/","text":"TrackObject Segment Creates an object, either a BasePart or a Model, that is positioned at a given point in the track. Similar to ties in NewSmooth. TrackObjectSegment Extends Segment TrackObjectSegment : Segment { Object : BasePart | Model , Offset : CFrame , UseLookVector : boolean } Properties Object The part used to make the rails. This will be cloned each time a new segment is created. Offset The offset from the CFrame UseLookVector If true, uses LookVector and applies no rotation. Constructors fromData TrackObjectSegment . fromData ( data : table ) -> TrackObjectSegment data { Name : string , Object : BasePart | Model , Offset : CFrame , UseLookVector : boolean } fromInstance TrackObjectSegment . fromInstance ( instance : Instance ) -> TrackObjectSegment instance Children { Object : BasePart | Model , Offset : CFrameOffsetInstance , UseLookVector : ? BoolValue , } TrackObjectSegmentBuilder Constructors new TrackObjectSegmentBuilder . new () -> TrackObjectSegmentBuilder Methods WithObject TrackObjectSegmentBuilder : WithObject ( object : BasePart | Model ) -> self WithOffset TrackObjectSegmentBuilder : WithOffset ( offset : CFrame ) -> self WithUseLookVector TrackObjectSegmentBuilder : WithUseLookVector ( useLookVector : boolean ) -> self","title":"TrackObject"},{"location":"api/segment/track_object/#trackobject-segment","text":"Creates an object, either a BasePart or a Model, that is positioned at a given point in the track. Similar to ties in NewSmooth.","title":"TrackObject Segment"},{"location":"api/segment/track_object/#trackobjectsegment","text":"Extends Segment TrackObjectSegment : Segment { Object : BasePart | Model , Offset : CFrame , UseLookVector : boolean }","title":"TrackObjectSegment"},{"location":"api/segment/track_object/#properties","text":"Object The part used to make the rails. This will be cloned each time a new segment is created. Offset The offset from the CFrame UseLookVector If true, uses LookVector and applies no rotation.","title":"Properties"},{"location":"api/segment/track_object/#constructors","text":"","title":"Constructors"},{"location":"api/segment/track_object/#fromdata","text":"TrackObjectSegment . fromData ( data : table ) -> TrackObjectSegment","title":"fromData"},{"location":"api/segment/track_object/#data","text":"{ Name : string , Object : BasePart | Model , Offset : CFrame , UseLookVector : boolean }","title":"data"},{"location":"api/segment/track_object/#frominstance","text":"TrackObjectSegment . fromInstance ( instance : Instance ) -> TrackObjectSegment","title":"fromInstance"},{"location":"api/segment/track_object/#instance-children","text":"{ Object : BasePart | Model , Offset : CFrameOffsetInstance , UseLookVector : ? BoolValue , }","title":"instance Children"},{"location":"api/segment/track_object/#trackobjectsegmentbuilder","text":"","title":"TrackObjectSegmentBuilder"},{"location":"api/segment/track_object/#constructors_1","text":"","title":"Constructors"},{"location":"api/segment/track_object/#new","text":"TrackObjectSegmentBuilder . new () -> TrackObjectSegmentBuilder","title":"new"},{"location":"api/segment/track_object/#methods","text":"","title":"Methods"},{"location":"api/segment/track_object/#withobject","text":"TrackObjectSegmentBuilder : WithObject ( object : BasePart | Model ) -> self","title":"WithObject"},{"location":"api/segment/track_object/#withoffset","text":"TrackObjectSegmentBuilder : WithOffset ( offset : CFrame ) -> self","title":"WithOffset"},{"location":"api/segment/track_object/#withuselookvector","text":"TrackObjectSegmentBuilder : WithUseLookVector ( useLookVector : boolean ) -> self","title":"WithUseLookVector"},{"location":"quick_start/","text":"About This is a plugin for building tracks for roller coasters fast Better description coming soon. Why Because speed and less clicking","title":"About"},{"location":"quick_start/#about","text":"This is a plugin for building tracks for roller coasters fast Better description coming soon.","title":"About"},{"location":"quick_start/#why","text":"Because speed and less clicking","title":"Why"},{"location":"quick_start/installation/","text":"Installation From Roblox Install the plugin from here https://www.roblox.com/library/6189078047/ From Github Download a copy from the releases. https://github.com/Twin1Twin2/track-builder/releases Alternatively, you can clone the project using git and use Rojo to build it yourself.","title":"Installation"},{"location":"quick_start/installation/#installation","text":"","title":"Installation"},{"location":"quick_start/installation/#from-roblox","text":"Install the plugin from here https://www.roblox.com/library/6189078047/","title":"From Roblox"},{"location":"quick_start/installation/#from-github","text":"Download a copy from the releases. https://github.com/Twin1Twin2/track-builder/releases Alternatively, you can clone the project using git and use Rojo to build it yourself.","title":"From Github"},{"location":"quick_start/porting_from_newsmooth/","text":"Porting From NewSmooth Warning This tutorial is still a work in progress For this tutorial, we will be referencing the Intamin NewSmooth converter. Specifically, we will be looking at the SuperSpine TrackType. Additionally, we will be adding our own twist to the crossbeams that you cannot normally do with NewSmooth without switching converters. Warning This tutorial will not go over setting up physics for physics based coasters. Rails -- physics rails local rails = { leftrail = { current = Vector3 . new ( - 3 , 0 , 0 ), previous = Vector3 . new ( - 3 , 0 , 0 ), Horizontal = true , BrickColor = ba . RailColor , Size = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), Mesh = \"CylinderMesh\" , Meshscale = Vector3 . new ( 1 , 1 , 0.2 ), --width is X, height is Y, and length is Z ALWAYS Meshoffset = Vector3 . new (), Properties = { --any properties you want on the bricks like Friction or Material or Transparency Friction = 0 , } }, rightrail = { current = Vector3 . new ( 3 , 0 , 0 ), previous = Vector3 . new ( 3 , 0 , 0 ), Horizontal = true , BrickColor = ba . RailColor , Size = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), Mesh = \"CylinderMesh\" , Meshoffset = Vector3 . new (), Meshscale = Vector3 . new ( 1 , 1 , 0.2 ), --width is X, height is Y, and length is Z ALWAYS Properties = { Friction = 0 , }, }, } --- Super Spine rails rails = { beam1 = { current = Vector3 . new ( 0 , - 1 - 0.3 , 0 ), previous = Vector3 . new ( 0 , - 1 - 0.3 , 0 ), Horizontal = false , BrickColor = ba . SpineColor , Size = Vector3 . new ( 1.8 , 2 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), Mesh = \"BlockMesh\" , Meshscale = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Meshoffset = Vector3 . new (), Properties = { CanCollide = false , }, }, beam2 = { current = Vector3 . new ( 0 , - 2.3 , 0 ), previous = Vector3 . new ( 0 , - 2.3 , 0 ), Horizontal = true , BrickColor = ba . SpineColor , Size = Vector3 . new ( 1.8 , 1.8 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), Mesh = \"CylinderMesh\" , Meshscale = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Meshoffset = Vector3 . new (), Properties = { CanCollide = false , }, }, }, RailSegment Misc Part Properties BrickColor Properties Works by cloning the given part. See size for Size property Current and Previous For all rails, the current and previous are the exact same. Crossbeams have a different current and previous . RailSegment.Offset Horizontal Horizontal is a value which tells if this rail should be rotated along the _ axis. It is used primarily by CylinderMesh rails. In the future, this could be changed to allow all axis. RailSegment.Horizontal Size RailSegment.Size Rotation RailSegment.Rotation Ties -- Super Spine ties ties = { tie1 = { ClassName = \"Part\" , offset = CFrame . new ( 0 , 0 , 0 ), BrickColor = ba . TieColor , Mesh = \"BlockMesh\" , Meshscale = Vector3 . new ( 1 , 1 , 1 ), --width is X, height is Y, and length is Z ALWAYS Meshoffset = Vector3 . new (), Properties = { CanCollide = false , Size = Vector3 . new ( 6 , .6 , .6 ), }, }, }, TrackObject A TrackObject is an object placed at a given point on the track. It does not require resizing as Rails and Crossbeams stretch to expand to the whole segment. A TrackObject's object can be either anything that is a BasePart or a Model with it's PrimaryPart set. It was named TrackObject instead of Tie to signify the versatility of this Segment . You will see in the later section Brakes, Transport, and MagLaunch/Brakes how it could it be used for these elements. Misc Part Properties ClassName BrickColor Mesh MeshScale MeshOffset Properties TrackObject.Object Offset TrackObject.Offset Crossbeams -- Super Spine Crossbeams crossbeams = { crossbeam = { current = Vector3 . new ( 3 , 0 , 0 ), previous = Vector3 . new ( - 3 , 0 , 0 ), Horizontal = false , BrickColor = ba . SpineColor , Size = Vector3 . new ( .6 , .6 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), Mesh = \"BlockMesh\" , Meshscale = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Meshoffset = Vector3 . new (), Properties = { CanCollide = false , }, }, }, Misc Part Properties BrickColor Properties Current CrossbeamSegment.EndOffset Previous CrossbeamSegment.StartOffset Horizontal CrossbeamSegment.Horizontal Size CrossbeamSegment.Size Rotation CrossbeamSegment.Rotation MeshData CrossbeamSegment.MeshData Similar to RailSegment's MeshData. Chainlift A Chainlift is just a square rail with a chain texture. Brakes, Transport, and MagLaunch/Brakes These elements in NewSmooth are designed to stretch to fit a variety of Segment lengths. It is recommended you convert these to a model and use them as TrackObjects.","title":"Porting From NewSmooth"},{"location":"quick_start/porting_from_newsmooth/#porting-from-newsmooth","text":"Warning This tutorial is still a work in progress For this tutorial, we will be referencing the Intamin NewSmooth converter. Specifically, we will be looking at the SuperSpine TrackType. Additionally, we will be adding our own twist to the crossbeams that you cannot normally do with NewSmooth without switching converters. Warning This tutorial will not go over setting up physics for physics based coasters.","title":"Porting From NewSmooth"},{"location":"quick_start/porting_from_newsmooth/#rails","text":"-- physics rails local rails = { leftrail = { current = Vector3 . new ( - 3 , 0 , 0 ), previous = Vector3 . new ( - 3 , 0 , 0 ), Horizontal = true , BrickColor = ba . RailColor , Size = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), Mesh = \"CylinderMesh\" , Meshscale = Vector3 . new ( 1 , 1 , 0.2 ), --width is X, height is Y, and length is Z ALWAYS Meshoffset = Vector3 . new (), Properties = { --any properties you want on the bricks like Friction or Material or Transparency Friction = 0 , } }, rightrail = { current = Vector3 . new ( 3 , 0 , 0 ), previous = Vector3 . new ( 3 , 0 , 0 ), Horizontal = true , BrickColor = ba . RailColor , Size = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), Mesh = \"CylinderMesh\" , Meshoffset = Vector3 . new (), Meshscale = Vector3 . new ( 1 , 1 , 0.2 ), --width is X, height is Y, and length is Z ALWAYS Properties = { Friction = 0 , }, }, } --- Super Spine rails rails = { beam1 = { current = Vector3 . new ( 0 , - 1 - 0.3 , 0 ), previous = Vector3 . new ( 0 , - 1 - 0.3 , 0 ), Horizontal = false , BrickColor = ba . SpineColor , Size = Vector3 . new ( 1.8 , 2 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), Mesh = \"BlockMesh\" , Meshscale = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Meshoffset = Vector3 . new (), Properties = { CanCollide = false , }, }, beam2 = { current = Vector3 . new ( 0 , - 2.3 , 0 ), previous = Vector3 . new ( 0 , - 2.3 , 0 ), Horizontal = true , BrickColor = ba . SpineColor , Size = Vector3 . new ( 1.8 , 1.8 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), Mesh = \"CylinderMesh\" , Meshscale = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Meshoffset = Vector3 . new (), Properties = { CanCollide = false , }, }, }, RailSegment","title":"Rails"},{"location":"quick_start/porting_from_newsmooth/#misc-part-properties","text":"BrickColor Properties Works by cloning the given part. See size for Size property","title":"Misc Part Properties"},{"location":"quick_start/porting_from_newsmooth/#current-and-previous","text":"For all rails, the current and previous are the exact same. Crossbeams have a different current and previous . RailSegment.Offset","title":"Current and Previous"},{"location":"quick_start/porting_from_newsmooth/#horizontal","text":"Horizontal is a value which tells if this rail should be rotated along the _ axis. It is used primarily by CylinderMesh rails. In the future, this could be changed to allow all axis. RailSegment.Horizontal","title":"Horizontal"},{"location":"quick_start/porting_from_newsmooth/#size","text":"RailSegment.Size","title":"Size"},{"location":"quick_start/porting_from_newsmooth/#rotation","text":"RailSegment.Rotation","title":"Rotation"},{"location":"quick_start/porting_from_newsmooth/#ties","text":"-- Super Spine ties ties = { tie1 = { ClassName = \"Part\" , offset = CFrame . new ( 0 , 0 , 0 ), BrickColor = ba . TieColor , Mesh = \"BlockMesh\" , Meshscale = Vector3 . new ( 1 , 1 , 1 ), --width is X, height is Y, and length is Z ALWAYS Meshoffset = Vector3 . new (), Properties = { CanCollide = false , Size = Vector3 . new ( 6 , .6 , .6 ), }, }, }, TrackObject A TrackObject is an object placed at a given point on the track. It does not require resizing as Rails and Crossbeams stretch to expand to the whole segment. A TrackObject's object can be either anything that is a BasePart or a Model with it's PrimaryPart set. It was named TrackObject instead of Tie to signify the versatility of this Segment . You will see in the later section Brakes, Transport, and MagLaunch/Brakes how it could it be used for these elements.","title":"Ties"},{"location":"quick_start/porting_from_newsmooth/#misc-part-properties_1","text":"ClassName BrickColor Mesh MeshScale MeshOffset Properties TrackObject.Object","title":"Misc Part Properties"},{"location":"quick_start/porting_from_newsmooth/#offset","text":"TrackObject.Offset","title":"Offset"},{"location":"quick_start/porting_from_newsmooth/#crossbeams","text":"-- Super Spine Crossbeams crossbeams = { crossbeam = { current = Vector3 . new ( 3 , 0 , 0 ), previous = Vector3 . new ( - 3 , 0 , 0 ), Horizontal = false , BrickColor = ba . SpineColor , Size = Vector3 . new ( .6 , .6 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), Mesh = \"BlockMesh\" , Meshscale = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Meshoffset = Vector3 . new (), Properties = { CanCollide = false , }, }, },","title":"Crossbeams"},{"location":"quick_start/porting_from_newsmooth/#misc-part-properties_2","text":"BrickColor Properties","title":"Misc Part Properties"},{"location":"quick_start/porting_from_newsmooth/#current","text":"CrossbeamSegment.EndOffset","title":"Current"},{"location":"quick_start/porting_from_newsmooth/#previous","text":"CrossbeamSegment.StartOffset","title":"Previous"},{"location":"quick_start/porting_from_newsmooth/#horizontal_1","text":"CrossbeamSegment.Horizontal","title":"Horizontal"},{"location":"quick_start/porting_from_newsmooth/#size_1","text":"CrossbeamSegment.Size","title":"Size"},{"location":"quick_start/porting_from_newsmooth/#rotation_1","text":"CrossbeamSegment.Rotation","title":"Rotation"},{"location":"quick_start/porting_from_newsmooth/#meshdata","text":"CrossbeamSegment.MeshData Similar to RailSegment's MeshData.","title":"MeshData"},{"location":"quick_start/porting_from_newsmooth/#chainlift","text":"A Chainlift is just a square rail with a chain texture.","title":"Chainlift"},{"location":"quick_start/porting_from_newsmooth/#brakes-transport-and-maglaunchbrakes","text":"These elements in NewSmooth are designed to stretch to fit a variety of Segment lengths. It is recommended you convert these to a model and use them as TrackObjects.","title":"Brakes, Transport, and MagLaunch/Brakes"},{"location":"quick_start/writing_a_program/","text":"Writing A Program Warning This is still a work in progress. The API is still changing and thus this code may not work properly. Why Program? For programmers or anyone with a good handle of Roblox Lua, it can be faster than setting it up manually. Additionally, the GUI is still a work in progress, so you still have access to all of the API. What is a Program? ModuleScript that returns a function. This function takes the API as it's argument The API is passed in as an argument instead of injected into the script environment as Roblox would yell at you for errors. Track Setup As there are a ton a points, we will set this up via Instance. Setup Points Requires that the points be named in order from start to end. TheEpicTwin's Edit of Spacek's Coaster Plugin OrderedPoints local trackPoints = workspace : FindFirstChild ( \"Track\" ) local cframeTrack = PointToPoint2Builder . new () : WithName ( \"MyTrack\" ) : WithPoints ( trackPoints ) : WithIsCircuited ( true ) : WithHashInterval ( 10 ) : Finish () Program API CFrameTrack Segment Section TrackGroup PhysicsRails CFrameTrack a 3D line that defines the position of the track. Segment builds a Part or Model from on a start and an end CFrame. Section builds segments from a start and end position for a given track. TrackGroup builds multiple sections for a track from a start and end position. Segments: Rail TrackObject MidTrackObject Crossbeam Rect RectRail BoxRail For now, we will only be using 3. Check the examples if you would like to see how the others are used. Left Rail local RailSegmentBuilder = Segment . RailBuilder local leftRailSection = SectionBuilder . new () : WithName ( \"LeftRail\" ) : WithSegment ( RailSegmentBuilder . new () : WithBasePart ( RAIL_PART ) : WithOffset ( Vector3 . new ( - 3 , 0 , 0 )) : WithHorizontal ( true ) : WithMeshData ( MeshDataBuilder . new () : WithMesh ( \"CylinderMesh\" ) : WithOffset ( Vector3 . new ( 0 , 0 , 0 )) : WithScale ( Vector3 . new ( 1 , 1 , 0.2 )) : Finish () ) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () Right Rail local rightRailSection = SectionBuilder . new () : WithName ( \"RightRail\" ) : WithSegment ( RailSegmentBuilder . new () : WithBasePart ( RAIL_PART ) : WithOffset ( Vector3 . new ( 3 , 0 , 0 )) : WithHorizontal ( true ) : WithMeshData ( MeshDataBuilder . new () : WithMesh ( \"CylinderMesh\" ) : WithOffset ( Vector3 . new ( 0 , 0 , 0 )) : WithScale ( Vector3 . new ( 1 , 1 , 0.2 )) : Finish () ) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () Tie local tieSection = SectionBuilder . new () : WithName ( \"Tie\" ) : WithSegment ( TrackObjectSegmentBuilder . new () : WithTrackObject ( TIE_PART ) : WithOffset ( CFrame . new ( 0 , 0 , 0 )) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () Crossbeam local crossbeamSection = SectionBuilder . new () : WithName ( \"Crossbeam\" ) : WithSegment ( CrossbeamSegmentBuilder . new () : WithBasePart ( CROSSBEAM_PART ) : WithStartOffset ( Vector3 . new ( 3 , 0 , 0 )) : WithEndOffset ( Vector3 . new ( - 3 , 0 , 0 )) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () Build local trackGroup = TrackGroupBuilder . new () : WithName ( \"MyTrack\" ) : WithSection ( leftRailSection ) : WithSection ( rightRailSection ) : WithSection ( tieSection ) : WithSection ( crossbeamSection ) : Finish () local trackModel = trackGroup : Create ( cframeTrack , 0 , cframeTrack . Length ) trackModel . Parent = workspace Full Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 return function ( api ) local TrackGroup = api . TrackGroup local Section = api . Section local CFrameTrack = api . CFrameTrack local PointToPoint2Builder = CFrameTrack . PointToPoint2Builder local Segment = api . Segment local RailSegmentBuilder = Segment . RailBuilder local TrackObjectSegmentBuilder = Segment . TrackObjectBuilder local CrossbeamBuilder = Segment . CrossbeamBuilder local trackPoints = workspace : FindFirstChild ( \"Track\" ) local cframeTrack = PointToPoint2Builder . new () : WithName ( \"MyTrack\" ) : WithPoints ( trackPoints ) : WithIsCircuited ( true ) : WithHashInterval ( 10 ) : Finish () local leftRailSection = SectionBuilder . new () : WithName ( \"LeftRail\" ) : WithSegment ( RailSegment . new () : WithBasePart ( RAIL_PART ) : WithOffset ( Vector3 . new ( - 3 , 0 , 0 )) : WithHorizontal ( true ) : WithMeshData ( MeshDataBuilder . new () : WithMesh ( \"CylinderMesh\" ) : WithOffset ( Vector3 . new ( 0 , 0 , 0 )) : WithScale ( Vector3 . new ( 1 , 1 , 0.2 )) : Finish () ) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local rightRailSection = SectionBuilder . new () : WithName ( \"RightRail\" ) : WithSegment ( RailSegmentBuilder . new () : WithBasePart ( RAIL_PART ) : WithOffset ( Vector3 . new ( 3 , 0 , 0 )) : WithHorizontal ( true ) : WithMeshData ( MeshDataBuilder . new () : WithMesh ( \"CylinderMesh\" ) : WithOffset ( Vector3 . new ( 0 , 0 , 0 )) : WithScale ( Vector3 . new ( 1 , 1 , 0.2 )) : Finish () ) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local tieSection = SectionBuilder . new () : WithName ( \"Tie\" ) : WithSegment ( TrackObjectSegmentBuilder . new () : WithTrackObject ( TIE_PART ) : WithOffset ( CFrame . new ( 0 , 0 , 0 )) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local crossbeamSection = SectionBuilder . new () : WithName ( \"Crossbeam\" ) : WithSegment ( CrossbeamSegmentBuilder . new () : WithBasePart ( CROSSBEAM_PART ) : WithStartOffset ( Vector3 . new ( 3 , 0 , 0 )) : WithEndOffset ( Vector3 . new ( - 3 , 0 , 0 )) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local trackGroup = TrackGroupBuilder . new () : WithName ( \"MyTrack\" ) : WithSection ( leftRailSection ) : WithSection ( rightRailSection ) : WithSection ( tieSection ) : WithSection ( crossbeamSection ) : Finish () local model = Instance . new ( \"Model\" ) local trackModel = trackGroup : Create ( cframeTrack , 0 , cframeTrack . Length ) trackModel . Parent = model local chainLiftModel = chainLiftSection : Create ( cframeTrack , 100 , 200 ) chainLiftModel . Parent = model local brakesModel = brakesSection : Create ( cframeTrack , 400 , 500 ) brakesModel . Parent = model model . Parent = workspace end","title":"Writing A Program"},{"location":"quick_start/writing_a_program/#writing-a-program","text":"Warning This is still a work in progress. The API is still changing and thus this code may not work properly.","title":"Writing A Program"},{"location":"quick_start/writing_a_program/#why-program","text":"For programmers or anyone with a good handle of Roblox Lua, it can be faster than setting it up manually. Additionally, the GUI is still a work in progress, so you still have access to all of the API.","title":"Why Program?"},{"location":"quick_start/writing_a_program/#what-is-a-program","text":"ModuleScript that returns a function. This function takes the API as it's argument The API is passed in as an argument instead of injected into the script environment as Roblox would yell at you for errors.","title":"What is a Program?"},{"location":"quick_start/writing_a_program/#track-setup","text":"As there are a ton a points, we will set this up via Instance.","title":"Track Setup"},{"location":"quick_start/writing_a_program/#setup-points","text":"Requires that the points be named in order from start to end. TheEpicTwin's Edit of Spacek's Coaster Plugin OrderedPoints local trackPoints = workspace : FindFirstChild ( \"Track\" ) local cframeTrack = PointToPoint2Builder . new () : WithName ( \"MyTrack\" ) : WithPoints ( trackPoints ) : WithIsCircuited ( true ) : WithHashInterval ( 10 ) : Finish ()","title":"Setup Points"},{"location":"quick_start/writing_a_program/#program-api","text":"CFrameTrack Segment Section TrackGroup PhysicsRails CFrameTrack a 3D line that defines the position of the track. Segment builds a Part or Model from on a start and an end CFrame. Section builds segments from a start and end position for a given track. TrackGroup builds multiple sections for a track from a start and end position. Segments: Rail TrackObject MidTrackObject Crossbeam Rect RectRail BoxRail For now, we will only be using 3. Check the examples if you would like to see how the others are used.","title":"Program API"},{"location":"quick_start/writing_a_program/#left-rail","text":"local RailSegmentBuilder = Segment . RailBuilder local leftRailSection = SectionBuilder . new () : WithName ( \"LeftRail\" ) : WithSegment ( RailSegmentBuilder . new () : WithBasePart ( RAIL_PART ) : WithOffset ( Vector3 . new ( - 3 , 0 , 0 )) : WithHorizontal ( true ) : WithMeshData ( MeshDataBuilder . new () : WithMesh ( \"CylinderMesh\" ) : WithOffset ( Vector3 . new ( 0 , 0 , 0 )) : WithScale ( Vector3 . new ( 1 , 1 , 0.2 )) : Finish () ) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish ()","title":"Left Rail"},{"location":"quick_start/writing_a_program/#right-rail","text":"local rightRailSection = SectionBuilder . new () : WithName ( \"RightRail\" ) : WithSegment ( RailSegmentBuilder . new () : WithBasePart ( RAIL_PART ) : WithOffset ( Vector3 . new ( 3 , 0 , 0 )) : WithHorizontal ( true ) : WithMeshData ( MeshDataBuilder . new () : WithMesh ( \"CylinderMesh\" ) : WithOffset ( Vector3 . new ( 0 , 0 , 0 )) : WithScale ( Vector3 . new ( 1 , 1 , 0.2 )) : Finish () ) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish ()","title":"Right Rail"},{"location":"quick_start/writing_a_program/#tie","text":"local tieSection = SectionBuilder . new () : WithName ( \"Tie\" ) : WithSegment ( TrackObjectSegmentBuilder . new () : WithTrackObject ( TIE_PART ) : WithOffset ( CFrame . new ( 0 , 0 , 0 )) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish ()","title":"Tie"},{"location":"quick_start/writing_a_program/#crossbeam","text":"local crossbeamSection = SectionBuilder . new () : WithName ( \"Crossbeam\" ) : WithSegment ( CrossbeamSegmentBuilder . new () : WithBasePart ( CROSSBEAM_PART ) : WithStartOffset ( Vector3 . new ( 3 , 0 , 0 )) : WithEndOffset ( Vector3 . new ( - 3 , 0 , 0 )) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish ()","title":"Crossbeam"},{"location":"quick_start/writing_a_program/#build","text":"local trackGroup = TrackGroupBuilder . new () : WithName ( \"MyTrack\" ) : WithSection ( leftRailSection ) : WithSection ( rightRailSection ) : WithSection ( tieSection ) : WithSection ( crossbeamSection ) : Finish () local trackModel = trackGroup : Create ( cframeTrack , 0 , cframeTrack . Length ) trackModel . Parent = workspace","title":"Build"},{"location":"quick_start/writing_a_program/#full-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 return function ( api ) local TrackGroup = api . TrackGroup local Section = api . Section local CFrameTrack = api . CFrameTrack local PointToPoint2Builder = CFrameTrack . PointToPoint2Builder local Segment = api . Segment local RailSegmentBuilder = Segment . RailBuilder local TrackObjectSegmentBuilder = Segment . TrackObjectBuilder local CrossbeamBuilder = Segment . CrossbeamBuilder local trackPoints = workspace : FindFirstChild ( \"Track\" ) local cframeTrack = PointToPoint2Builder . new () : WithName ( \"MyTrack\" ) : WithPoints ( trackPoints ) : WithIsCircuited ( true ) : WithHashInterval ( 10 ) : Finish () local leftRailSection = SectionBuilder . new () : WithName ( \"LeftRail\" ) : WithSegment ( RailSegment . new () : WithBasePart ( RAIL_PART ) : WithOffset ( Vector3 . new ( - 3 , 0 , 0 )) : WithHorizontal ( true ) : WithMeshData ( MeshDataBuilder . new () : WithMesh ( \"CylinderMesh\" ) : WithOffset ( Vector3 . new ( 0 , 0 , 0 )) : WithScale ( Vector3 . new ( 1 , 1 , 0.2 )) : Finish () ) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local rightRailSection = SectionBuilder . new () : WithName ( \"RightRail\" ) : WithSegment ( RailSegmentBuilder . new () : WithBasePart ( RAIL_PART ) : WithOffset ( Vector3 . new ( 3 , 0 , 0 )) : WithHorizontal ( true ) : WithMeshData ( MeshDataBuilder . new () : WithMesh ( \"CylinderMesh\" ) : WithOffset ( Vector3 . new ( 0 , 0 , 0 )) : WithScale ( Vector3 . new ( 1 , 1 , 0.2 )) : Finish () ) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local tieSection = SectionBuilder . new () : WithName ( \"Tie\" ) : WithSegment ( TrackObjectSegmentBuilder . new () : WithTrackObject ( TIE_PART ) : WithOffset ( CFrame . new ( 0 , 0 , 0 )) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local crossbeamSection = SectionBuilder . new () : WithName ( \"Crossbeam\" ) : WithSegment ( CrossbeamSegmentBuilder . new () : WithBasePart ( CROSSBEAM_PART ) : WithStartOffset ( Vector3 . new ( 3 , 0 , 0 )) : WithEndOffset ( Vector3 . new ( - 3 , 0 , 0 )) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local trackGroup = TrackGroupBuilder . new () : WithName ( \"MyTrack\" ) : WithSection ( leftRailSection ) : WithSection ( rightRailSection ) : WithSection ( tieSection ) : WithSection ( crossbeamSection ) : Finish () local model = Instance . new ( \"Model\" ) local trackModel = trackGroup : Create ( cframeTrack , 0 , cframeTrack . Length ) trackModel . Parent = model local chainLiftModel = chainLiftSection : Create ( cframeTrack , 100 , 200 ) chainLiftModel . Parent = model local brakesModel = brakesSection : Create ( cframeTrack , 400 , 500 ) brakesModel . Parent = model model . Parent = workspace end","title":"Full Code"}]}