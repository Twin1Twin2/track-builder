{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home A Roblox plugin for designing your own tracks and building them quickly. Designed for the Roblox Roller Coaster and Theme Park Community.","title":"Home"},{"location":"#home","text":"A Roblox plugin for designing your own tracks and building them quickly. Designed for the Roblox Roller Coaster and Theme Park Community.","title":"Home"},{"location":"examples/","text":"Examples Examples go here! Assume MainTrack is the Track you want to build on. Intamin Flat Track Program Builds a track similar to Intamin's 2 Rail track local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) return function ( api ) local TrackGroup = api . TrackGroup local Section = api . Section local Segment = api . Segment local RailSegment = Segment . Rail local TrackObjectSegment = Segment . TrackObject local CrossbeamSegment = Segment . Crossbeam local CFrameTrack = api . CFrameTrack local mainTrack = CFrameTrack . Create ( ReplicatedStorage : FindFirstChild ( \"MainTrack\" )) local BASE_PART = Instance . new ( \"Part\" ) BASE_PART . Anchored = true BASE_PART . TopSurface = \"Smooth\" BASE_PART . BottomSurface = \"Smooth\" BASE_PART . FormFactor = \"Custom\" local leftRailSection = Section . fromData ({ Segment = RailSegment . fromData ({ Name = \"LeftRail\" , BasePart = BASE_PART , Offset = Vector3 . new ( - 3 , 0 , 0 ), Horizontal = true , Size = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), MeshData = { Mesh = \"CylinderMesh\" , Scale = Vector3 . new ( 1 , 1 , 0.2 ), --width is X, height is Y, and length is Z ALWAYS Offset = Vector3 . new (), } }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) local rightRailSection = Section . fromData ({ Segment = RailSegment . fromData ({ Name = \"RightRail\" , BasePart = BASE_PART , Offset = Vector3 . new ( 3 , 0 , 0 ), Horizontal = true , Size = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), MeshData = { Mesh = \"CylinderMesh\" , Scale = Vector3 . new ( 1 , 1 , 0.2 ), --width is X, height is Y, and length is Z ALWAYS Offset = Vector3 . new (), } }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) local crossbeamSection = Section . fromData ({ Segment = CrossbeamSegment . fromData ({ Name = \"Crossbeam\" , BasePart = BASE_PART , EndOffset = Vector3 . new ( 3 , 0 , 0 ), StartOffset = Vector3 . new ( - 3 , 0 , 0 ), Horizontal = false , Size = Vector3 . new ( .6 , .6 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), MeshData = { Mesh = \"BlockMesh\" , Scale = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Offset = Vector3 . new (), }, }), Interval = 5 , StartOffset = 0 , Optimize = false , BuildEnd = false , }) local TIE_PART = Instance . new ( \"Part\" ) TIE_PART . Size = Vector3 . new ( 6 , 0.6 , 0.6 ) TIE_PART . Anchored = true TIE_PART . TopSurface = \"Smooth\" TIE_PART . BottomSurface = \"Smooth\" TIE_PART . FormFactor = \"Custom\" local tieSection = Section . fromData ({ Segment = TrackObjectSegment . fromData ({ Name = \"Tie\" , Object = TIE_PART , Offset = CFrame . new (), UseLookVector = false , }), Interval = 5 , StartOffset = 0 , Optimize = false , BuildEnd = true , }) local trackGroup = TrackGroup . new () trackGroup . Name = \"TestingTrack\" trackGroup : Add ( leftRailSection ) trackGroup : Add ( rightRailSection ) trackGroup : Add ( crossbeamSection ) trackGroup : Add ( tieSection ) local model = trackGroup : Create ( mainTrack , 0 , mainTrack . Length ) model . Parent = workspace warn ( \"Finished!\" ) end BoxBuilderProgram Creates a RMC Single Rail Track local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) return function ( api ) local TrackGroup = api . TrackGroup local Section = api . Section local Segment = api . Segment local RailSegment = Segment . Rail local TrackObjectSegment = Segment . TrackObject local CrossbeamSegment = Segment . Crossbeam local BoxRailSegment = Segment . BoxRail local RectSegment = Segment . Rect local RectRailSegment = Segment . RectRail local CFrameTrack = api . CFrameTrack local mainTrack = CFrameTrack . Create ( ReplicatedStorage : FindFirstChild ( \"MainTrack\" )) local BASE_PART = Instance . new ( \"Part\" ) BASE_PART . Anchored = true BASE_PART . TopSurface = \"Smooth\" BASE_PART . BottomSurface = \"Smooth\" BASE_PART . FormFactor = \"Custom\" local WEDGE = Instance . new ( \"WedgePart\" ) WEDGE . Size = Vector3 . new ( 0.2 , 1 , 1 ) WEDGE . Anchored = true WEDGE . Material = Enum . Material . Metal WEDGE . BrickColor = BrickColor . Black () WEDGE . TopSurface = Enum . SurfaceType . Smooth WEDGE . BottomSurface = Enum . SurfaceType . Smooth local specialMesh = Instance . new ( \"SpecialMesh\" ) specialMesh . MeshType = Enum . MeshType . Wedge specialMesh . Scale = Vector3 . new ( 0.001 , 1 , 1 ) specialMesh . Parent = WEDGE local topBuilder = Section . fromData ({ Segment = BoxRailSegment . fromData ({ Name = \"Top\" , TopLeft = Vector3 . new ( 1.5 , 0.3 , 0 ), TopRight = Vector3 . new ( - 1.5 , 0.3 , 0 ), BottomLeft = Vector3 . new ( 1.5 , - 0.3 , 0 ), BottomRight = Vector3 . new ( - 1.5 , - 0.3 , 0 ), Wedge = WEDGE , }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) local spineBuilder = Section . fromData ({ Segment = BoxRailSegment . fromData ({ Name = \"Spine\" , TopLeft = Vector3 . new ( 1 , - 0.2 , 0 ), TopRight = Vector3 . new ( - 1 , - 0.2 , 0 ), BottomLeft = Vector3 . new ( 1 , - 1.5 , 0 ), BottomRight = Vector3 . new ( - 1 , - 1.5 , 0 ), DrawTop = false , DrawBottom = false , Wedge = WEDGE , }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) local BOTTOM_WEDGE = Instance . new ( \"WedgePart\" ) BOTTOM_WEDGE . Size = Vector3 . new ( 0.05 , 0 , 0 ) BOTTOM_WEDGE . Anchored = true BOTTOM_WEDGE . Material = Enum . Material . Metal BOTTOM_WEDGE . BrickColor = BrickColor . Black () BOTTOM_WEDGE . TopSurface = Enum . SurfaceType . Smooth BOTTOM_WEDGE . BottomSurface = Enum . SurfaceType . Smooth local bottomBuilder = Section . fromData ({ Segment = RectRailSegment . fromData ({ StartOffset1 = Vector3 . new ( 1.5 , - 1.5 , 0 ), StartOffset2 = Vector3 . new ( - 1.5 , - 1.5 , 0 ), EndOffset1 = Vector3 . new ( 1.5 , - 1.5 , 0 ), EndOffset2 = Vector3 . new ( - 1.5 , - 1.5 , 0 ), UseStart = true , Wedge = BOTTOM_WEDGE , }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) -- Creates a ChainLift local CHAIN_PART = BASE_PART : Clone () CHAIN_PART . Size = Vector3 . new ( 1 , 0.8 , 1 ) CHAIN_PART . BrickColor = BrickColor . new ( \"Dark stone grey\" ) CHAIN_PART . CanCollide = false CHAIN_PART . Anchored = true local CHAIN_IMAGE = Instance . new ( \"Texture\" ) CHAIN_IMAGE . StudsPerTileU = 1 CHAIN_IMAGE . StudsPerTileV = 1 CHAIN_IMAGE . Texture = \"http://www.roblox.com/asset/?id=56334448\" CHAIN_IMAGE . Face = \"Top\" CHAIN_IMAGE . Parent = CHAIN_PART local chainSection = Section . fromData ({ Segment = RailSegment . fromData ({ Name = \"Chain\" , BasePart = CHAIN_PART , Offset = Vector3 . new ( 0 , 0.3 , 0 ), Size = Vector3 . new ( 1 , 0.2 , 0 ), Rotation = Vector3 . new (), Horizontal = false , }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) local trackGroup = TrackGroup . new () trackGroup . Name = \"TestingTrack\" trackGroup : Add ( topBuilder ) trackGroup : Add ( spineBuilder ) trackGroup : Add ( bottomBuilder ) local model = trackGroup : Create ( mainTrack , 0 , mainTrack . Length ) local chainModel = chainSection : Create ( mainTrack , 410 , 670 ) chainModel . Parent = model model . Parent = workspace warn ( \"Finished!\" ) end","title":"Examples"},{"location":"examples/#examples","text":"Examples go here! Assume MainTrack is the Track you want to build on.","title":"Examples"},{"location":"examples/#intamin-flat-track-program","text":"Builds a track similar to Intamin's 2 Rail track local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) return function ( api ) local TrackGroup = api . TrackGroup local Section = api . Section local Segment = api . Segment local RailSegment = Segment . Rail local TrackObjectSegment = Segment . TrackObject local CrossbeamSegment = Segment . Crossbeam local CFrameTrack = api . CFrameTrack local mainTrack = CFrameTrack . Create ( ReplicatedStorage : FindFirstChild ( \"MainTrack\" )) local BASE_PART = Instance . new ( \"Part\" ) BASE_PART . Anchored = true BASE_PART . TopSurface = \"Smooth\" BASE_PART . BottomSurface = \"Smooth\" BASE_PART . FormFactor = \"Custom\" local leftRailSection = Section . fromData ({ Segment = RailSegment . fromData ({ Name = \"LeftRail\" , BasePart = BASE_PART , Offset = Vector3 . new ( - 3 , 0 , 0 ), Horizontal = true , Size = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), MeshData = { Mesh = \"CylinderMesh\" , Scale = Vector3 . new ( 1 , 1 , 0.2 ), --width is X, height is Y, and length is Z ALWAYS Offset = Vector3 . new (), } }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) local rightRailSection = Section . fromData ({ Segment = RailSegment . fromData ({ Name = \"RightRail\" , BasePart = BASE_PART , Offset = Vector3 . new ( 3 , 0 , 0 ), Horizontal = true , Size = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), MeshData = { Mesh = \"CylinderMesh\" , Scale = Vector3 . new ( 1 , 1 , 0.2 ), --width is X, height is Y, and length is Z ALWAYS Offset = Vector3 . new (), } }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) local crossbeamSection = Section . fromData ({ Segment = CrossbeamSegment . fromData ({ Name = \"Crossbeam\" , BasePart = BASE_PART , EndOffset = Vector3 . new ( 3 , 0 , 0 ), StartOffset = Vector3 . new ( - 3 , 0 , 0 ), Horizontal = false , Size = Vector3 . new ( .6 , .6 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), MeshData = { Mesh = \"BlockMesh\" , Scale = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Offset = Vector3 . new (), }, }), Interval = 5 , StartOffset = 0 , Optimize = false , BuildEnd = false , }) local TIE_PART = Instance . new ( \"Part\" ) TIE_PART . Size = Vector3 . new ( 6 , 0.6 , 0.6 ) TIE_PART . Anchored = true TIE_PART . TopSurface = \"Smooth\" TIE_PART . BottomSurface = \"Smooth\" TIE_PART . FormFactor = \"Custom\" local tieSection = Section . fromData ({ Segment = TrackObjectSegment . fromData ({ Name = \"Tie\" , Object = TIE_PART , Offset = CFrame . new (), UseLookVector = false , }), Interval = 5 , StartOffset = 0 , Optimize = false , BuildEnd = true , }) local trackGroup = TrackGroup . new () trackGroup . Name = \"TestingTrack\" trackGroup : Add ( leftRailSection ) trackGroup : Add ( rightRailSection ) trackGroup : Add ( crossbeamSection ) trackGroup : Add ( tieSection ) local model = trackGroup : Create ( mainTrack , 0 , mainTrack . Length ) model . Parent = workspace warn ( \"Finished!\" ) end","title":"Intamin Flat Track Program"},{"location":"examples/#boxbuilderprogram","text":"Creates a RMC Single Rail Track local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) return function ( api ) local TrackGroup = api . TrackGroup local Section = api . Section local Segment = api . Segment local RailSegment = Segment . Rail local TrackObjectSegment = Segment . TrackObject local CrossbeamSegment = Segment . Crossbeam local BoxRailSegment = Segment . BoxRail local RectSegment = Segment . Rect local RectRailSegment = Segment . RectRail local CFrameTrack = api . CFrameTrack local mainTrack = CFrameTrack . Create ( ReplicatedStorage : FindFirstChild ( \"MainTrack\" )) local BASE_PART = Instance . new ( \"Part\" ) BASE_PART . Anchored = true BASE_PART . TopSurface = \"Smooth\" BASE_PART . BottomSurface = \"Smooth\" BASE_PART . FormFactor = \"Custom\" local WEDGE = Instance . new ( \"WedgePart\" ) WEDGE . Size = Vector3 . new ( 0.2 , 1 , 1 ) WEDGE . Anchored = true WEDGE . Material = Enum . Material . Metal WEDGE . BrickColor = BrickColor . Black () WEDGE . TopSurface = Enum . SurfaceType . Smooth WEDGE . BottomSurface = Enum . SurfaceType . Smooth local specialMesh = Instance . new ( \"SpecialMesh\" ) specialMesh . MeshType = Enum . MeshType . Wedge specialMesh . Scale = Vector3 . new ( 0.001 , 1 , 1 ) specialMesh . Parent = WEDGE local topBuilder = Section . fromData ({ Segment = BoxRailSegment . fromData ({ Name = \"Top\" , TopLeft = Vector3 . new ( 1.5 , 0.3 , 0 ), TopRight = Vector3 . new ( - 1.5 , 0.3 , 0 ), BottomLeft = Vector3 . new ( 1.5 , - 0.3 , 0 ), BottomRight = Vector3 . new ( - 1.5 , - 0.3 , 0 ), Wedge = WEDGE , }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) local spineBuilder = Section . fromData ({ Segment = BoxRailSegment . fromData ({ Name = \"Spine\" , TopLeft = Vector3 . new ( 1 , - 0.2 , 0 ), TopRight = Vector3 . new ( - 1 , - 0.2 , 0 ), BottomLeft = Vector3 . new ( 1 , - 1.5 , 0 ), BottomRight = Vector3 . new ( - 1 , - 1.5 , 0 ), DrawTop = false , DrawBottom = false , Wedge = WEDGE , }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) local BOTTOM_WEDGE = Instance . new ( \"WedgePart\" ) BOTTOM_WEDGE . Size = Vector3 . new ( 0.05 , 0 , 0 ) BOTTOM_WEDGE . Anchored = true BOTTOM_WEDGE . Material = Enum . Material . Metal BOTTOM_WEDGE . BrickColor = BrickColor . Black () BOTTOM_WEDGE . TopSurface = Enum . SurfaceType . Smooth BOTTOM_WEDGE . BottomSurface = Enum . SurfaceType . Smooth local bottomBuilder = Section . fromData ({ Segment = RectRailSegment . fromData ({ StartOffset1 = Vector3 . new ( 1.5 , - 1.5 , 0 ), StartOffset2 = Vector3 . new ( - 1.5 , - 1.5 , 0 ), EndOffset1 = Vector3 . new ( 1.5 , - 1.5 , 0 ), EndOffset2 = Vector3 . new ( - 1.5 , - 1.5 , 0 ), UseStart = true , Wedge = BOTTOM_WEDGE , }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) -- Creates a ChainLift local CHAIN_PART = BASE_PART : Clone () CHAIN_PART . Size = Vector3 . new ( 1 , 0.8 , 1 ) CHAIN_PART . BrickColor = BrickColor . new ( \"Dark stone grey\" ) CHAIN_PART . CanCollide = false CHAIN_PART . Anchored = true local CHAIN_IMAGE = Instance . new ( \"Texture\" ) CHAIN_IMAGE . StudsPerTileU = 1 CHAIN_IMAGE . StudsPerTileV = 1 CHAIN_IMAGE . Texture = \"http://www.roblox.com/asset/?id=56334448\" CHAIN_IMAGE . Face = \"Top\" CHAIN_IMAGE . Parent = CHAIN_PART local chainSection = Section . fromData ({ Segment = RailSegment . fromData ({ Name = \"Chain\" , BasePart = CHAIN_PART , Offset = Vector3 . new ( 0 , 0.3 , 0 ), Size = Vector3 . new ( 1 , 0.2 , 0 ), Rotation = Vector3 . new (), Horizontal = false , }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) local trackGroup = TrackGroup . new () trackGroup . Name = \"TestingTrack\" trackGroup : Add ( topBuilder ) trackGroup : Add ( spineBuilder ) trackGroup : Add ( bottomBuilder ) local model = trackGroup : Create ( mainTrack , 0 , mainTrack . Length ) local chainModel = chainSection : Create ( mainTrack , 410 , 670 ) chainModel . Parent = model model . Parent = workspace warn ( \"Finished!\" ) end","title":"BoxBuilderProgram"},{"location":"api/","text":"API This page describes the API that is passed when you run a function from a ModuleScript using the Run Program button. API { CFrameTrack : module, Segment : module, Section : Section, TrackGroup : TrackGroup, PhysicsRails : PhysicsRails }","title":"Main"},{"location":"api/#api","text":"This page describes the API that is passed when you run a function from a ModuleScript using the Run Program button. API { CFrameTrack : module, Segment : module, Section : Section, TrackGroup : TrackGroup, PhysicsRails : PhysicsRails }","title":"API"},{"location":"api/cframe_track/","text":"CFrameTrack A 3D line that describes the positions of your track in the workspace Module CFrameTrack { CFrameTrack : CFrameTrack, IsType : function, PointToPoint : PointToPointCFrameTrack PointToPoint2 : PointToPointCFrameTrack2, Create : function, CreateFromData : function, CreateFromInstance : function } Create Functions Factory Pattern { PointToPoint = PointToPointCFrameTrack, PointToPoint2 = PointToPoint2CFrameTrack, } Create CFrameTrack.Create(value: Instance or table) -> CFrameTrack CreateFromData CFrameTrack.CreateFromData(data: table) -> CFrameTrack CreateFromInstance CFrameTrack.CreateFromInstance(instance: Instance) -> CFrameTrack CFrameTrack Constructors fromInstance PointToPoint2CFrameTrack.fromInstance(instance: Instance) -> PointToPoint2CFrameTrack PointToPoint instance: Instance +--> TrackClass: StringValue | +-- Value: \"PointToPoint\" +--> IsCircuited: BoolValue +--> DistanceBetweenPoints: NumberValue +--> Points: Instance |--> 1: CFrameInstance |--> 2: CFrameInstance |--> ... |--> N: CFrameInstance PointToPoint2 Constructors fromInstance PointToPoint2CFrameTrack.fromInstance(instance: Instance) -> PointToPoint2CFrameTrack instance instance: Instance +--> TrackClass: StringValue | +-- Value: \"PointToPoint2\" +--> IsCircuited: BoolValue +--> HashValue: NumberValue +--> Points: Instance |--> 1: CFrameInstance |--> 2: CFrameInstance |--> ... |--> N: CFrameInstance","title":"CFrameTrack"},{"location":"api/cframe_track/#cframetrack","text":"A 3D line that describes the positions of your track in the workspace","title":"CFrameTrack"},{"location":"api/cframe_track/#module","text":"CFrameTrack { CFrameTrack : CFrameTrack, IsType : function, PointToPoint : PointToPointCFrameTrack PointToPoint2 : PointToPointCFrameTrack2, Create : function, CreateFromData : function, CreateFromInstance : function }","title":"Module"},{"location":"api/cframe_track/#create-functions","text":"Factory Pattern { PointToPoint = PointToPointCFrameTrack, PointToPoint2 = PointToPoint2CFrameTrack, }","title":"Create Functions"},{"location":"api/cframe_track/#create","text":"CFrameTrack.Create(value: Instance or table) -> CFrameTrack","title":"Create"},{"location":"api/cframe_track/#createfromdata","text":"CFrameTrack.CreateFromData(data: table) -> CFrameTrack","title":"CreateFromData"},{"location":"api/cframe_track/#createfrominstance","text":"CFrameTrack.CreateFromInstance(instance: Instance) -> CFrameTrack","title":"CreateFromInstance"},{"location":"api/cframe_track/#cframetrack_1","text":"","title":"CFrameTrack"},{"location":"api/cframe_track/#constructors","text":"","title":"Constructors"},{"location":"api/cframe_track/#frominstance","text":"PointToPoint2CFrameTrack.fromInstance(instance: Instance) -> PointToPoint2CFrameTrack","title":"fromInstance"},{"location":"api/cframe_track/#pointtopoint","text":"instance: Instance +--> TrackClass: StringValue | +-- Value: \"PointToPoint\" +--> IsCircuited: BoolValue +--> DistanceBetweenPoints: NumberValue +--> Points: Instance |--> 1: CFrameInstance |--> 2: CFrameInstance |--> ... |--> N: CFrameInstance","title":"PointToPoint"},{"location":"api/cframe_track/#pointtopoint2","text":"","title":"PointToPoint2"},{"location":"api/cframe_track/#constructors_1","text":"","title":"Constructors"},{"location":"api/cframe_track/#frominstance_1","text":"PointToPoint2CFrameTrack.fromInstance(instance: Instance) -> PointToPoint2CFrameTrack","title":"fromInstance"},{"location":"api/cframe_track/#instance","text":"instance: Instance +--> TrackClass: StringValue | +-- Value: \"PointToPoint2\" +--> IsCircuited: BoolValue +--> HashValue: NumberValue +--> Points: Instance |--> 1: CFrameInstance |--> 2: CFrameInstance |--> ... |--> N: CFrameInstance","title":"instance"},{"location":"api/physics_rails/","text":"PhysicsRails Builds all the RailSegments it holds along a section of track at once and gives it physics properties. These physics can help move a track. Meant for physics based coasters. PhysicsRails : BaseSection { Name : string, Rails : RailSegments [], Interval : positiveNumber, } Methods Create Creates a Model whose children are segments created from startPosition to endPosition Segment : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Model CreateAsync Like Create, but wraps this call in a Promise and returns it. Segment : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Promise -> Model Constructors fromData Segment . fromData ( data : table ) -> Segment data { Name : string , Rails : RailSegments [], Interval : positiveNumber , } fromInstance Segment . fromInstance ( instance : Instance ) -> Segment instance Children { Rails : Instance , // see RailSegment.fromInstance Interval : NumberValue , }","title":"PhysicsRails"},{"location":"api/physics_rails/#physicsrails","text":"Builds all the RailSegments it holds along a section of track at once and gives it physics properties. These physics can help move a track. Meant for physics based coasters. PhysicsRails : BaseSection { Name : string, Rails : RailSegments [], Interval : positiveNumber, }","title":"PhysicsRails"},{"location":"api/physics_rails/#methods","text":"","title":"Methods"},{"location":"api/physics_rails/#create","text":"Creates a Model whose children are segments created from startPosition to endPosition Segment : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Model","title":"Create"},{"location":"api/physics_rails/#createasync","text":"Like Create, but wraps this call in a Promise and returns it. Segment : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Promise -> Model","title":"CreateAsync"},{"location":"api/physics_rails/#constructors","text":"","title":"Constructors"},{"location":"api/physics_rails/#fromdata","text":"Segment . fromData ( data : table ) -> Segment","title":"fromData"},{"location":"api/physics_rails/#data","text":"{ Name : string , Rails : RailSegments [], Interval : positiveNumber , }","title":"data"},{"location":"api/physics_rails/#frominstance","text":"Segment . fromInstance ( instance : Instance ) -> Segment","title":"fromInstance"},{"location":"api/physics_rails/#instance-children","text":"{ Rails : Instance , // see RailSegment.fromInstance Interval : NumberValue , }","title":"instance Children"},{"location":"api/section/","text":"Section API Builds the given Segment at a set position interval along a section of track. Section : BaseSection { Name : string, Segment : Segment, Interval : positiveNumber, StartOffset : number, Optimize : boolean, BuildEnd : boolean, } Methods Create Creates a Model whose children are segments created from startPosition to endPosition Section : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Model CreateAsync Like Create, but wraps this call in a Promise and returns it. Section : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Promise -> Model Constructors fromData Section . fromData ( data : table ) -> Section data { Name : ? string , Segment : Segment , Interval : positiveNumber , StartOffset : number , Optimize : boolean , BuildEnd : boolean , } fromInstance Section . fromInstance ( instance : Instance ) -> Section instance Children { Name : StringValue , Segment : Instance , // see Segment.CreateFromInstance Interval : NumberValue , StartOffset : NumberValue , Optimize : BoolValue , BuildEnd : BoolValue , }","title":"Section"},{"location":"api/section/#section-api","text":"Builds the given Segment at a set position interval along a section of track. Section : BaseSection { Name : string, Segment : Segment, Interval : positiveNumber, StartOffset : number, Optimize : boolean, BuildEnd : boolean, }","title":"Section API"},{"location":"api/section/#methods","text":"","title":"Methods"},{"location":"api/section/#create","text":"Creates a Model whose children are segments created from startPosition to endPosition Section : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Model","title":"Create"},{"location":"api/section/#createasync","text":"Like Create, but wraps this call in a Promise and returns it. Section : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Promise -> Model","title":"CreateAsync"},{"location":"api/section/#constructors","text":"","title":"Constructors"},{"location":"api/section/#fromdata","text":"Section . fromData ( data : table ) -> Section","title":"fromData"},{"location":"api/section/#data","text":"{ Name : ? string , Segment : Segment , Interval : positiveNumber , StartOffset : number , Optimize : boolean , BuildEnd : boolean , }","title":"data"},{"location":"api/section/#frominstance","text":"Section . fromInstance ( instance : Instance ) -> Section","title":"fromInstance"},{"location":"api/section/#instance-children","text":"{ Name : StringValue , Segment : Instance , // see Segment.CreateFromInstance Interval : NumberValue , StartOffset : NumberValue , Optimize : BoolValue , BuildEnd : BoolValue , }","title":"instance Children"},{"location":"api/segment/","text":"Segment Describes how to build a piece of track. Module Segment { Segment : Segment , IsType : function , MeshData : MeshData , Rail : RailSegment , RailBuilder : RailSegmentBuilder , TrackObject : TrackObjectSegment , TrackObjectBuilder : TrackObjectSegmentBuilder , MidTrackObject : MidTrackObjectSegment , MidTrackObjectBuilder : MidTrackObjectSegmentBuilder , Crossbeam : CrossbeamSegment , CrossbeamBuilder : CrossbeamSegmentBuilder , Rect : RectSegment , RectBuilder : RectSegmentBuilder , RectRail : RectRailSegment , RectRailBuilder : RectRailSegmentBuilder , Box : BoxSegment , BoxBuilder : BoxSegmentBuilder , Create : function , CreateFromData : function , CreateFromInstance : function , } Segment Base Class for all Segments Segment { Name : string } Methods Create Produces a new segment instance based off of the two CFrame positions given Segment : CreateAsync ( startCFrame : CFrame , endCFrame : CFrame ) -> Instance CreateAsync Like Create, but wraps this call in a Promise and returns it. Segment : CreateAsync ( startCFrame : CFrame , endCFrame : CFrame ) -> Promise -> Instance RailSegment Creates a BasePart that is positioned parallel to the Track. Similar to Rails in NewSmooth plugins RailSegment : Segment { BasePart : BasePart , Offset : Vector3 , Size : Vector3 , Rotation : Vector3 , Horizontal : boolean MeshData : MeshData , } Constructors fromData RailSegment . fromData ( data : table ) -> RailSegment data { Name : string , BasePart : BasePart , Offset : Vector3 , Size : Vector3 , Rotation : Vector3 , Horizontal : boolean MeshData : ? MeshData , } fromInstance RailSegment . fromInstance ( instance : Instance ) -> RailSegment instance Children { BasePart : BasePart , Offset : Vector3Value , Size : Vector3Value , Rotation : Vector3Value , Horizontal : BoolValue , MeshData : Instance , // see MeshData.fromInstance } MeshData Mesh data struct for the NewSmooth Algorithm. Used by: RailSegment CrossbeamSegment Constructors fromData MeshData . fromData ( data : table ) -> MeshData data { Mesh : string , MeshType : Enum . MeshType , Offset : Vector3 , Scale : Vector3 , } fromInstance MeshData . fromInstance ( instance : Instance ) -> MeshData instance Children { Mesh : StringValue , MeshType : StringValue , Offset : Vector3Value , Scale : Vector3Value , }","title":"Segment"},{"location":"api/segment/#segment","text":"Describes how to build a piece of track.","title":"Segment"},{"location":"api/segment/#module","text":"Segment { Segment : Segment , IsType : function , MeshData : MeshData , Rail : RailSegment , RailBuilder : RailSegmentBuilder , TrackObject : TrackObjectSegment , TrackObjectBuilder : TrackObjectSegmentBuilder , MidTrackObject : MidTrackObjectSegment , MidTrackObjectBuilder : MidTrackObjectSegmentBuilder , Crossbeam : CrossbeamSegment , CrossbeamBuilder : CrossbeamSegmentBuilder , Rect : RectSegment , RectBuilder : RectSegmentBuilder , RectRail : RectRailSegment , RectRailBuilder : RectRailSegmentBuilder , Box : BoxSegment , BoxBuilder : BoxSegmentBuilder , Create : function , CreateFromData : function , CreateFromInstance : function , }","title":"Module"},{"location":"api/segment/#segment_1","text":"Base Class for all Segments Segment { Name : string }","title":"Segment"},{"location":"api/segment/#methods","text":"","title":"Methods"},{"location":"api/segment/#create","text":"Produces a new segment instance based off of the two CFrame positions given Segment : CreateAsync ( startCFrame : CFrame , endCFrame : CFrame ) -> Instance","title":"Create"},{"location":"api/segment/#createasync","text":"Like Create, but wraps this call in a Promise and returns it. Segment : CreateAsync ( startCFrame : CFrame , endCFrame : CFrame ) -> Promise -> Instance","title":"CreateAsync"},{"location":"api/segment/#railsegment","text":"Creates a BasePart that is positioned parallel to the Track. Similar to Rails in NewSmooth plugins RailSegment : Segment { BasePart : BasePart , Offset : Vector3 , Size : Vector3 , Rotation : Vector3 , Horizontal : boolean MeshData : MeshData , }","title":"RailSegment"},{"location":"api/segment/#constructors","text":"","title":"Constructors"},{"location":"api/segment/#fromdata","text":"RailSegment . fromData ( data : table ) -> RailSegment","title":"fromData"},{"location":"api/segment/#data","text":"{ Name : string , BasePart : BasePart , Offset : Vector3 , Size : Vector3 , Rotation : Vector3 , Horizontal : boolean MeshData : ? MeshData , }","title":"data"},{"location":"api/segment/#frominstance","text":"RailSegment . fromInstance ( instance : Instance ) -> RailSegment","title":"fromInstance"},{"location":"api/segment/#instance-children","text":"{ BasePart : BasePart , Offset : Vector3Value , Size : Vector3Value , Rotation : Vector3Value , Horizontal : BoolValue , MeshData : Instance , // see MeshData.fromInstance }","title":"instance Children"},{"location":"api/segment/#meshdata","text":"Mesh data struct for the NewSmooth Algorithm. Used by: RailSegment CrossbeamSegment","title":"MeshData"},{"location":"api/segment/#constructors_1","text":"","title":"Constructors"},{"location":"api/segment/#fromdata_1","text":"MeshData . fromData ( data : table ) -> MeshData","title":"fromData"},{"location":"api/segment/#data_1","text":"{ Mesh : string , MeshType : Enum . MeshType , Offset : Vector3 , Scale : Vector3 , }","title":"data"},{"location":"api/segment/#frominstance_1","text":"MeshData . fromInstance ( instance : Instance ) -> MeshData","title":"fromInstance"},{"location":"api/segment/#instance-children_1","text":"{ Mesh : StringValue , MeshType : StringValue , Offset : Vector3Value , Scale : Vector3Value , }","title":"instance Children"},{"location":"api/track_group/","text":"TrackGroup Builds all the Sections it holds along a section of track at once. TrackGroup : BaseSection { Name : string, Sections : BaseSection[], } Methods Create Creates a Model TrackGroup : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Model CreateAsync Like Create, but wraps this call in a Promise and returns it. TrackGroup : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Promise -> Model Constructors fromData TrackGroup . fromData ( data : table ) -> TrackGroup data { Name : ? string , Sections : BaseSection [] } fromInstance TrackGroup . fromInstance ( instance : Instance ) -> TrackGroup instance Children { }","title":"TrackGroup"},{"location":"api/track_group/#trackgroup","text":"Builds all the Sections it holds along a section of track at once. TrackGroup : BaseSection { Name : string, Sections : BaseSection[], }","title":"TrackGroup"},{"location":"api/track_group/#methods","text":"","title":"Methods"},{"location":"api/track_group/#create","text":"Creates a Model TrackGroup : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Model","title":"Create"},{"location":"api/track_group/#createasync","text":"Like Create, but wraps this call in a Promise and returns it. TrackGroup : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Promise -> Model","title":"CreateAsync"},{"location":"api/track_group/#constructors","text":"","title":"Constructors"},{"location":"api/track_group/#fromdata","text":"TrackGroup . fromData ( data : table ) -> TrackGroup","title":"fromData"},{"location":"api/track_group/#data","text":"{ Name : ? string , Sections : BaseSection [] }","title":"data"},{"location":"api/track_group/#frominstance","text":"TrackGroup . fromInstance ( instance : Instance ) -> TrackGroup","title":"fromInstance"},{"location":"api/track_group/#instance-children","text":"{ }","title":"instance Children"},{"location":"quick_start/","text":"","title":"About"},{"location":"quick_start/installation/","text":"Installation","title":"Installation"},{"location":"quick_start/installation/#installation","text":"","title":"Installation"}]}