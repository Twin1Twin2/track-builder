{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home A Roblox plugin for designing your own tracks and building them quickly. Designed for the Roblox Roller Coaster and Theme Park Community. Warning This is still a work in progress. The API is still changing and thus this code may not work properly. Thanks to: The Coaster Team And documentation viewers like you. Thank you","title":"Home"},{"location":"#home","text":"A Roblox plugin for designing your own tracks and building them quickly. Designed for the Roblox Roller Coaster and Theme Park Community. Warning This is still a work in progress. The API is still changing and thus this code may not work properly.","title":"Home"},{"location":"#thanks-to","text":"The Coaster Team And documentation viewers like you. Thank you","title":"Thanks to:"},{"location":"changelog/","text":"Changelog Note This is the Changelog for the TrackBuilder plugin Based on https://keepachangelog.com/en/1.0.0/ [Unreleased] Added Able to Build TrackGroups from the GUI Load TrackGroups and Tracks from the GUI Set Start and End Position Build Pattern constructors for: Segments Section TrackGroup fromInstance constructors for: Segments Section TrackGroup Added Section SegmentOffset (not implemented) Changed Section Interval to SegmentLength Deprecated Fixed Crossbeam offsets not being passed correctly [0.0.2] - 2020-12-06 Added Initial docs page Changed Renamed Tie to TrackObject Shortened module index names for PointToPointCFrameTrack and PointToPointCFrameTrack2 Now PointToPoint and PointToPoint2 respectfully Fixed CFrameTrack.IsType now exposed in the top module Fixes type checking bug with BaseSection:Create() BuildLast with StartPosition > EndPosition [0.0.1] - 2020-12-06 Uploaded to Github Added Very minimal GUI Run Programs Print Track Positions","title":"Changelog"},{"location":"changelog/#changelog","text":"Note This is the Changelog for the TrackBuilder plugin Based on https://keepachangelog.com/en/1.0.0/","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"[Unreleased]"},{"location":"changelog/#added","text":"Able to Build TrackGroups from the GUI Load TrackGroups and Tracks from the GUI Set Start and End Position Build Pattern constructors for: Segments Section TrackGroup fromInstance constructors for: Segments Section TrackGroup Added Section SegmentOffset (not implemented)","title":"Added"},{"location":"changelog/#changed","text":"Section Interval to SegmentLength","title":"Changed"},{"location":"changelog/#deprecated","text":"","title":"Deprecated"},{"location":"changelog/#fixed","text":"Crossbeam offsets not being passed correctly","title":"Fixed"},{"location":"changelog/#002-2020-12-06","text":"","title":"[0.0.2] - 2020-12-06"},{"location":"changelog/#added_1","text":"Initial docs page","title":"Added"},{"location":"changelog/#changed_1","text":"Renamed Tie to TrackObject Shortened module index names for PointToPointCFrameTrack and PointToPointCFrameTrack2 Now PointToPoint and PointToPoint2 respectfully","title":"Changed"},{"location":"changelog/#fixed_1","text":"CFrameTrack.IsType now exposed in the top module Fixes type checking bug with BaseSection:Create() BuildLast with StartPosition > EndPosition","title":"Fixed"},{"location":"changelog/#001-2020-12-06","text":"Uploaded to Github","title":"[0.0.1] - 2020-12-06"},{"location":"changelog/#added_2","text":"Very minimal GUI Run Programs Print Track Positions","title":"Added"},{"location":"examples/","text":"Examples Examples go here! Assume MainTrack is the Track you want to build on. Intamin Flat Track Program Builds a track similar to Intamin's 2 Rail track local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) return function ( api ) local TrackGroup = api . TrackGroup local Section = api . Section local Segment = api . Segment local RailSegment = Segment . Rail local TrackObjectSegment = Segment . TrackObject local CrossbeamSegment = Segment . Crossbeam local CFrameTrack = api . CFrameTrack local mainTrack = CFrameTrack . Create ( ReplicatedStorage : FindFirstChild ( \"MainTrack\" )) local BASE_PART = Instance . new ( \"Part\" ) BASE_PART . Anchored = true BASE_PART . TopSurface = \"Smooth\" BASE_PART . BottomSurface = \"Smooth\" BASE_PART . FormFactor = \"Custom\" local leftRailSection = Section . fromData ({ Segment = RailSegment . fromData ({ Name = \"LeftRail\" , BasePart = BASE_PART , Offset = Vector3 . new ( - 3 , 0 , 0 ), Horizontal = true , Size = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), MeshData = { Mesh = \"CylinderMesh\" , Scale = Vector3 . new ( 1 , 1 , 0.2 ), --width is X, height is Y, and length is Z ALWAYS Offset = Vector3 . new (), } }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) local rightRailSection = Section . fromData ({ Segment = RailSegment . fromData ({ Name = \"RightRail\" , BasePart = BASE_PART , Offset = Vector3 . new ( 3 , 0 , 0 ), Horizontal = true , Size = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), MeshData = { Mesh = \"CylinderMesh\" , Scale = Vector3 . new ( 1 , 1 , 0.2 ), --width is X, height is Y, and length is Z ALWAYS Offset = Vector3 . new (), } }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) local crossbeamSection = Section . fromData ({ Segment = CrossbeamSegment . fromData ({ Name = \"Crossbeam\" , BasePart = BASE_PART , EndOffset = Vector3 . new ( 3 , 0 , 0 ), StartOffset = Vector3 . new ( - 3 , 0 , 0 ), Horizontal = false , Size = Vector3 . new ( .6 , .6 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), MeshData = { Mesh = \"BlockMesh\" , Scale = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Offset = Vector3 . new (), }, }), Interval = 5 , StartOffset = 0 , Optimize = false , BuildEnd = false , }) local TIE_PART = Instance . new ( \"Part\" ) TIE_PART . Size = Vector3 . new ( 6 , 0.6 , 0.6 ) TIE_PART . Anchored = true TIE_PART . TopSurface = \"Smooth\" TIE_PART . BottomSurface = \"Smooth\" TIE_PART . FormFactor = \"Custom\" local tieSection = Section . fromData ({ Segment = TrackObjectSegment . fromData ({ Name = \"Tie\" , Object = TIE_PART , Offset = CFrame . new (), UseLookVector = false , }), Interval = 5 , StartOffset = 0 , Optimize = false , BuildEnd = true , }) local trackGroup = TrackGroup . new () trackGroup . Name = \"TestingTrack\" trackGroup : Add ( leftRailSection ) trackGroup : Add ( rightRailSection ) trackGroup : Add ( crossbeamSection ) trackGroup : Add ( tieSection ) local model = trackGroup : Create ( mainTrack , 0 , mainTrack . Length ) model . Parent = workspace warn ( \"Finished!\" ) end BoxBuilderProgram Creates a RMC Single Rail Track local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) return function ( api ) local TrackGroup = api . TrackGroup local Section = api . Section local Segment = api . Segment local RailSegment = Segment . Rail local TrackObjectSegment = Segment . TrackObject local CrossbeamSegment = Segment . Crossbeam local BoxRailSegment = Segment . BoxRail local RectSegment = Segment . Rect local RectRailSegment = Segment . RectRail local CFrameTrack = api . CFrameTrack local mainTrack = CFrameTrack . Create ( ReplicatedStorage : FindFirstChild ( \"MainTrack\" )) local BASE_PART = Instance . new ( \"Part\" ) BASE_PART . Anchored = true BASE_PART . TopSurface = \"Smooth\" BASE_PART . BottomSurface = \"Smooth\" BASE_PART . FormFactor = \"Custom\" local WEDGE = Instance . new ( \"WedgePart\" ) WEDGE . Size = Vector3 . new ( 0.2 , 1 , 1 ) WEDGE . Anchored = true WEDGE . Material = Enum . Material . Metal WEDGE . BrickColor = BrickColor . Black () WEDGE . TopSurface = Enum . SurfaceType . Smooth WEDGE . BottomSurface = Enum . SurfaceType . Smooth local specialMesh = Instance . new ( \"SpecialMesh\" ) specialMesh . MeshType = Enum . MeshType . Wedge specialMesh . Scale = Vector3 . new ( 0.001 , 1 , 1 ) specialMesh . Parent = WEDGE local topBuilder = Section . fromData ({ Segment = BoxRailSegment . fromData ({ Name = \"Top\" , TopLeft = Vector3 . new ( 1.5 , 0.3 , 0 ), TopRight = Vector3 . new ( - 1.5 , 0.3 , 0 ), BottomLeft = Vector3 . new ( 1.5 , - 0.3 , 0 ), BottomRight = Vector3 . new ( - 1.5 , - 0.3 , 0 ), Wedge = WEDGE , }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) local spineBuilder = Section . fromData ({ Segment = BoxRailSegment . fromData ({ Name = \"Spine\" , TopLeft = Vector3 . new ( 1 , - 0.2 , 0 ), TopRight = Vector3 . new ( - 1 , - 0.2 , 0 ), BottomLeft = Vector3 . new ( 1 , - 1.5 , 0 ), BottomRight = Vector3 . new ( - 1 , - 1.5 , 0 ), DrawTop = false , DrawBottom = false , Wedge = WEDGE , }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) local BOTTOM_WEDGE = Instance . new ( \"WedgePart\" ) BOTTOM_WEDGE . Size = Vector3 . new ( 0.05 , 0 , 0 ) BOTTOM_WEDGE . Anchored = true BOTTOM_WEDGE . Material = Enum . Material . Metal BOTTOM_WEDGE . BrickColor = BrickColor . Black () BOTTOM_WEDGE . TopSurface = Enum . SurfaceType . Smooth BOTTOM_WEDGE . BottomSurface = Enum . SurfaceType . Smooth local bottomBuilder = Section . fromData ({ Segment = RectRailSegment . fromData ({ StartOffset1 = Vector3 . new ( 1.5 , - 1.5 , 0 ), StartOffset2 = Vector3 . new ( - 1.5 , - 1.5 , 0 ), EndOffset1 = Vector3 . new ( 1.5 , - 1.5 , 0 ), EndOffset2 = Vector3 . new ( - 1.5 , - 1.5 , 0 ), UseStart = true , Wedge = BOTTOM_WEDGE , }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) -- Creates a ChainLift local CHAIN_PART = BASE_PART : Clone () CHAIN_PART . Size = Vector3 . new ( 1 , 0.8 , 1 ) CHAIN_PART . BrickColor = BrickColor . new ( \"Dark stone grey\" ) CHAIN_PART . CanCollide = false CHAIN_PART . Anchored = true local CHAIN_IMAGE = Instance . new ( \"Texture\" ) CHAIN_IMAGE . StudsPerTileU = 1 CHAIN_IMAGE . StudsPerTileV = 1 CHAIN_IMAGE . Texture = \"http://www.roblox.com/asset/?id=56334448\" CHAIN_IMAGE . Face = \"Top\" CHAIN_IMAGE . Parent = CHAIN_PART local chainSection = Section . fromData ({ Segment = RailSegment . fromData ({ Name = \"Chain\" , BasePart = CHAIN_PART , Offset = Vector3 . new ( 0 , 0.3 , 0 ), Size = Vector3 . new ( 1 , 0.2 , 0 ), Rotation = Vector3 . new (), Horizontal = false , }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) local trackGroup = TrackGroup . new () trackGroup . Name = \"TestingTrack\" trackGroup : Add ( topBuilder ) trackGroup : Add ( spineBuilder ) trackGroup : Add ( bottomBuilder ) local model = trackGroup : Create ( mainTrack , 0 , mainTrack . Length ) local chainModel = chainSection : Create ( mainTrack , 410 , 670 ) chainModel . Parent = model model . Parent = workspace warn ( \"Finished!\" ) end","title":"Examples"},{"location":"examples/#examples","text":"Examples go here! Assume MainTrack is the Track you want to build on.","title":"Examples"},{"location":"examples/#intamin-flat-track-program","text":"Builds a track similar to Intamin's 2 Rail track local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) return function ( api ) local TrackGroup = api . TrackGroup local Section = api . Section local Segment = api . Segment local RailSegment = Segment . Rail local TrackObjectSegment = Segment . TrackObject local CrossbeamSegment = Segment . Crossbeam local CFrameTrack = api . CFrameTrack local mainTrack = CFrameTrack . Create ( ReplicatedStorage : FindFirstChild ( \"MainTrack\" )) local BASE_PART = Instance . new ( \"Part\" ) BASE_PART . Anchored = true BASE_PART . TopSurface = \"Smooth\" BASE_PART . BottomSurface = \"Smooth\" BASE_PART . FormFactor = \"Custom\" local leftRailSection = Section . fromData ({ Segment = RailSegment . fromData ({ Name = \"LeftRail\" , BasePart = BASE_PART , Offset = Vector3 . new ( - 3 , 0 , 0 ), Horizontal = true , Size = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), MeshData = { Mesh = \"CylinderMesh\" , Scale = Vector3 . new ( 1 , 1 , 0.2 ), --width is X, height is Y, and length is Z ALWAYS Offset = Vector3 . new (), } }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) local rightRailSection = Section . fromData ({ Segment = RailSegment . fromData ({ Name = \"RightRail\" , BasePart = BASE_PART , Offset = Vector3 . new ( 3 , 0 , 0 ), Horizontal = true , Size = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), MeshData = { Mesh = \"CylinderMesh\" , Scale = Vector3 . new ( 1 , 1 , 0.2 ), --width is X, height is Y, and length is Z ALWAYS Offset = Vector3 . new (), } }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) local crossbeamSection = Section . fromData ({ Segment = CrossbeamSegment . fromData ({ Name = \"Crossbeam\" , BasePart = BASE_PART , EndOffset = Vector3 . new ( 3 , 0 , 0 ), StartOffset = Vector3 . new ( - 3 , 0 , 0 ), Horizontal = false , Size = Vector3 . new ( .6 , .6 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), MeshData = { Mesh = \"BlockMesh\" , Scale = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Offset = Vector3 . new (), }, }), Interval = 5 , StartOffset = 0 , Optimize = false , BuildEnd = false , }) local TIE_PART = Instance . new ( \"Part\" ) TIE_PART . Size = Vector3 . new ( 6 , 0.6 , 0.6 ) TIE_PART . Anchored = true TIE_PART . TopSurface = \"Smooth\" TIE_PART . BottomSurface = \"Smooth\" TIE_PART . FormFactor = \"Custom\" local tieSection = Section . fromData ({ Segment = TrackObjectSegment . fromData ({ Name = \"Tie\" , Object = TIE_PART , Offset = CFrame . new (), UseLookVector = false , }), Interval = 5 , StartOffset = 0 , Optimize = false , BuildEnd = true , }) local trackGroup = TrackGroup . new () trackGroup . Name = \"TestingTrack\" trackGroup : Add ( leftRailSection ) trackGroup : Add ( rightRailSection ) trackGroup : Add ( crossbeamSection ) trackGroup : Add ( tieSection ) local model = trackGroup : Create ( mainTrack , 0 , mainTrack . Length ) model . Parent = workspace warn ( \"Finished!\" ) end","title":"Intamin Flat Track Program"},{"location":"examples/#boxbuilderprogram","text":"Creates a RMC Single Rail Track local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) return function ( api ) local TrackGroup = api . TrackGroup local Section = api . Section local Segment = api . Segment local RailSegment = Segment . Rail local TrackObjectSegment = Segment . TrackObject local CrossbeamSegment = Segment . Crossbeam local BoxRailSegment = Segment . BoxRail local RectSegment = Segment . Rect local RectRailSegment = Segment . RectRail local CFrameTrack = api . CFrameTrack local mainTrack = CFrameTrack . Create ( ReplicatedStorage : FindFirstChild ( \"MainTrack\" )) local BASE_PART = Instance . new ( \"Part\" ) BASE_PART . Anchored = true BASE_PART . TopSurface = \"Smooth\" BASE_PART . BottomSurface = \"Smooth\" BASE_PART . FormFactor = \"Custom\" local WEDGE = Instance . new ( \"WedgePart\" ) WEDGE . Size = Vector3 . new ( 0.2 , 1 , 1 ) WEDGE . Anchored = true WEDGE . Material = Enum . Material . Metal WEDGE . BrickColor = BrickColor . Black () WEDGE . TopSurface = Enum . SurfaceType . Smooth WEDGE . BottomSurface = Enum . SurfaceType . Smooth local specialMesh = Instance . new ( \"SpecialMesh\" ) specialMesh . MeshType = Enum . MeshType . Wedge specialMesh . Scale = Vector3 . new ( 0.001 , 1 , 1 ) specialMesh . Parent = WEDGE local topBuilder = Section . fromData ({ Segment = BoxRailSegment . fromData ({ Name = \"Top\" , TopLeft = Vector3 . new ( 1.5 , 0.3 , 0 ), TopRight = Vector3 . new ( - 1.5 , 0.3 , 0 ), BottomLeft = Vector3 . new ( 1.5 , - 0.3 , 0 ), BottomRight = Vector3 . new ( - 1.5 , - 0.3 , 0 ), Wedge = WEDGE , }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) local spineBuilder = Section . fromData ({ Segment = BoxRailSegment . fromData ({ Name = \"Spine\" , TopLeft = Vector3 . new ( 1 , - 0.2 , 0 ), TopRight = Vector3 . new ( - 1 , - 0.2 , 0 ), BottomLeft = Vector3 . new ( 1 , - 1.5 , 0 ), BottomRight = Vector3 . new ( - 1 , - 1.5 , 0 ), DrawTop = false , DrawBottom = false , Wedge = WEDGE , }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) local BOTTOM_WEDGE = Instance . new ( \"WedgePart\" ) BOTTOM_WEDGE . Size = Vector3 . new ( 0.05 , 0 , 0 ) BOTTOM_WEDGE . Anchored = true BOTTOM_WEDGE . Material = Enum . Material . Metal BOTTOM_WEDGE . BrickColor = BrickColor . Black () BOTTOM_WEDGE . TopSurface = Enum . SurfaceType . Smooth BOTTOM_WEDGE . BottomSurface = Enum . SurfaceType . Smooth local bottomBuilder = Section . fromData ({ Segment = RectRailSegment . fromData ({ StartOffset1 = Vector3 . new ( 1.5 , - 1.5 , 0 ), StartOffset2 = Vector3 . new ( - 1.5 , - 1.5 , 0 ), EndOffset1 = Vector3 . new ( 1.5 , - 1.5 , 0 ), EndOffset2 = Vector3 . new ( - 1.5 , - 1.5 , 0 ), UseStart = true , Wedge = BOTTOM_WEDGE , }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) -- Creates a ChainLift local CHAIN_PART = BASE_PART : Clone () CHAIN_PART . Size = Vector3 . new ( 1 , 0.8 , 1 ) CHAIN_PART . BrickColor = BrickColor . new ( \"Dark stone grey\" ) CHAIN_PART . CanCollide = false CHAIN_PART . Anchored = true local CHAIN_IMAGE = Instance . new ( \"Texture\" ) CHAIN_IMAGE . StudsPerTileU = 1 CHAIN_IMAGE . StudsPerTileV = 1 CHAIN_IMAGE . Texture = \"http://www.roblox.com/asset/?id=56334448\" CHAIN_IMAGE . Face = \"Top\" CHAIN_IMAGE . Parent = CHAIN_PART local chainSection = Section . fromData ({ Segment = RailSegment . fromData ({ Name = \"Chain\" , BasePart = CHAIN_PART , Offset = Vector3 . new ( 0 , 0.3 , 0 ), Size = Vector3 . new ( 1 , 0.2 , 0 ), Rotation = Vector3 . new (), Horizontal = false , }), Interval = 5 , StartOffset = 0 , Optimize = true , BuildEnd = false , }) local trackGroup = TrackGroup . new () trackGroup . Name = \"TestingTrack\" trackGroup : Add ( topBuilder ) trackGroup : Add ( spineBuilder ) trackGroup : Add ( bottomBuilder ) local model = trackGroup : Create ( mainTrack , 0 , mainTrack . Length ) local chainModel = chainSection : Create ( mainTrack , 410 , 670 ) chainModel . Parent = model model . Parent = workspace warn ( \"Finished!\" ) end","title":"BoxBuilderProgram"},{"location":"api/","text":"API This page describes the API that is passed when you run a function from a ModuleScript using the Run Program button. Warning The API is still a work in progress and can change at any time. API { CFrameTrack : module, Segment : module, Section : Section, TrackGroup : TrackGroup, PhysicsRails : PhysicsRails }","title":"Main"},{"location":"api/#api","text":"This page describes the API that is passed when you run a function from a ModuleScript using the Run Program button. Warning The API is still a work in progress and can change at any time. API { CFrameTrack : module, Segment : module, Section : Section, TrackGroup : TrackGroup, PhysicsRails : PhysicsRails }","title":"API"},{"location":"api/cframe_track/","text":"CFrameTrack A 3D line that describes the positions of your track in the workspace Module CFrameTrack { CFrameTrack : CFrameTrack, IsType : function, PointToPoint : PointToPointCFrameTrack PointToPoint2 : PointToPointCFrameTrack2, Create : function, CreateFromData : function, CreateFromInstance : function } Create Functions Factory Pattern { PointToPoint = PointToPointCFrameTrack, PointToPoint2 = PointToPoint2CFrameTrack, } Create CFrameTrack.Create(value: Instance or table) -> CFrameTrack CreateFromData CFrameTrack.CreateFromData(data: table) -> CFrameTrack CreateFromInstance CFrameTrack.CreateFromInstance(instance: Instance) -> CFrameTrack CFrameTrack Constructors fromInstance PointToPoint2CFrameTrack.fromInstance(instance: Instance) -> PointToPoint2CFrameTrack PointToPoint instance: Instance +--> TrackClass: StringValue | +-- Value: \"PointToPoint\" +--> IsCircuited: BoolValue +--> DistanceBetweenPoints: NumberValue +--> Points: Instance |--> 1: CFrameInstance |--> 2: CFrameInstance |--> ... |--> N: CFrameInstance PointToPoint2 Constructors fromInstance PointToPoint2CFrameTrack.fromInstance(instance: Instance) -> PointToPoint2CFrameTrack instance instance: Instance +--> TrackClass: StringValue | +-- Value: \"PointToPoint2\" +--> IsCircuited: BoolValue +--> HashValue: NumberValue +--> Points: Instance |--> 1: CFrameInstance |--> 2: CFrameInstance |--> ... |--> N: CFrameInstance","title":"CFrameTrack"},{"location":"api/cframe_track/#cframetrack","text":"A 3D line that describes the positions of your track in the workspace","title":"CFrameTrack"},{"location":"api/cframe_track/#module","text":"CFrameTrack { CFrameTrack : CFrameTrack, IsType : function, PointToPoint : PointToPointCFrameTrack PointToPoint2 : PointToPointCFrameTrack2, Create : function, CreateFromData : function, CreateFromInstance : function }","title":"Module"},{"location":"api/cframe_track/#create-functions","text":"Factory Pattern { PointToPoint = PointToPointCFrameTrack, PointToPoint2 = PointToPoint2CFrameTrack, }","title":"Create Functions"},{"location":"api/cframe_track/#create","text":"CFrameTrack.Create(value: Instance or table) -> CFrameTrack","title":"Create"},{"location":"api/cframe_track/#createfromdata","text":"CFrameTrack.CreateFromData(data: table) -> CFrameTrack","title":"CreateFromData"},{"location":"api/cframe_track/#createfrominstance","text":"CFrameTrack.CreateFromInstance(instance: Instance) -> CFrameTrack","title":"CreateFromInstance"},{"location":"api/cframe_track/#cframetrack_1","text":"","title":"CFrameTrack"},{"location":"api/cframe_track/#constructors","text":"","title":"Constructors"},{"location":"api/cframe_track/#frominstance","text":"PointToPoint2CFrameTrack.fromInstance(instance: Instance) -> PointToPoint2CFrameTrack","title":"fromInstance"},{"location":"api/cframe_track/#pointtopoint","text":"instance: Instance +--> TrackClass: StringValue | +-- Value: \"PointToPoint\" +--> IsCircuited: BoolValue +--> DistanceBetweenPoints: NumberValue +--> Points: Instance |--> 1: CFrameInstance |--> 2: CFrameInstance |--> ... |--> N: CFrameInstance","title":"PointToPoint"},{"location":"api/cframe_track/#pointtopoint2","text":"","title":"PointToPoint2"},{"location":"api/cframe_track/#constructors_1","text":"","title":"Constructors"},{"location":"api/cframe_track/#frominstance_1","text":"PointToPoint2CFrameTrack.fromInstance(instance: Instance) -> PointToPoint2CFrameTrack","title":"fromInstance"},{"location":"api/cframe_track/#instance","text":"instance: Instance +--> TrackClass: StringValue | +-- Value: \"PointToPoint2\" +--> IsCircuited: BoolValue +--> HashValue: NumberValue +--> Points: Instance |--> 1: CFrameInstance |--> 2: CFrameInstance |--> ... |--> N: CFrameInstance","title":"instance"},{"location":"api/physics_rails/","text":"PhysicsRails Builds all the RailSegments it holds along a section of track at once and gives it physics properties. These physics can help move a track. Meant for physics based coasters. PhysicsRails : BaseSection { Name : string, Rails : RailSegments [], Interval : positiveNumber, } Methods Create Creates a Model whose children are segments created from startPosition to endPosition Segment : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Model CreateAsync Like Create, but wraps this call in a Promise and returns it. Segment : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Promise -> Model Constructors fromData Segment . fromData ( data : table ) -> Segment data { Name : string , Rails : RailSegments [], Interval : positiveNumber , } fromInstance Segment . fromInstance ( instance : Instance ) -> Segment instance Children { Rails : Instance , // see RailSegment.fromInstance Interval : NumberValue , }","title":"PhysicsRails"},{"location":"api/physics_rails/#physicsrails","text":"Builds all the RailSegments it holds along a section of track at once and gives it physics properties. These physics can help move a track. Meant for physics based coasters. PhysicsRails : BaseSection { Name : string, Rails : RailSegments [], Interval : positiveNumber, }","title":"PhysicsRails"},{"location":"api/physics_rails/#methods","text":"","title":"Methods"},{"location":"api/physics_rails/#create","text":"Creates a Model whose children are segments created from startPosition to endPosition Segment : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Model","title":"Create"},{"location":"api/physics_rails/#createasync","text":"Like Create, but wraps this call in a Promise and returns it. Segment : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Promise -> Model","title":"CreateAsync"},{"location":"api/physics_rails/#constructors","text":"","title":"Constructors"},{"location":"api/physics_rails/#fromdata","text":"Segment . fromData ( data : table ) -> Segment","title":"fromData"},{"location":"api/physics_rails/#data","text":"{ Name : string , Rails : RailSegments [], Interval : positiveNumber , }","title":"data"},{"location":"api/physics_rails/#frominstance","text":"Segment . fromInstance ( instance : Instance ) -> Segment","title":"fromInstance"},{"location":"api/physics_rails/#instance-children","text":"{ Rails : Instance , // see RailSegment.fromInstance Interval : NumberValue , }","title":"instance Children"},{"location":"api/section/","text":"Section API Builds the given Segment at a set position interval along a section of track. Section : BaseSection { Name : string, Segment : Segment, Interval : positiveNumber, StartOffset : number, Optimize : boolean, BuildEnd : boolean, } Methods Create Creates a Model whose children are segments created from startPosition to endPosition Section : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Model CreateAsync Like Create, but wraps this call in a Promise and returns it. Section : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Promise -> Model Constructors fromData Section . fromData ( data : table ) -> Section data { Name : ? string , Segment : Segment , Interval : positiveNumber , StartOffset : number , Optimize : boolean , BuildEnd : boolean , } fromInstance Section . fromInstance ( instance : Instance ) -> Section instance Children { Name : StringValue , Segment : Instance , // see Segment.CreateFromInstance Interval : NumberValue , StartOffset : NumberValue , Optimize : BoolValue , BuildEnd : BoolValue , }","title":"Section"},{"location":"api/section/#section-api","text":"Builds the given Segment at a set position interval along a section of track. Section : BaseSection { Name : string, Segment : Segment, Interval : positiveNumber, StartOffset : number, Optimize : boolean, BuildEnd : boolean, }","title":"Section API"},{"location":"api/section/#methods","text":"","title":"Methods"},{"location":"api/section/#create","text":"Creates a Model whose children are segments created from startPosition to endPosition Section : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Model","title":"Create"},{"location":"api/section/#createasync","text":"Like Create, but wraps this call in a Promise and returns it. Section : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Promise -> Model","title":"CreateAsync"},{"location":"api/section/#constructors","text":"","title":"Constructors"},{"location":"api/section/#fromdata","text":"Section . fromData ( data : table ) -> Section","title":"fromData"},{"location":"api/section/#data","text":"{ Name : ? string , Segment : Segment , Interval : positiveNumber , StartOffset : number , Optimize : boolean , BuildEnd : boolean , }","title":"data"},{"location":"api/section/#frominstance","text":"Section . fromInstance ( instance : Instance ) -> Section","title":"fromInstance"},{"location":"api/section/#instance-children","text":"{ Name : StringValue , Segment : Instance , // see Segment.CreateFromInstance Interval : NumberValue , StartOffset : NumberValue , Optimize : BoolValue , BuildEnd : BoolValue , }","title":"instance Children"},{"location":"api/segment/","text":"Segment (Module) Describes how to build a piece of track. Module Segment { Segment : Segment , IsType : function ( object : any ) -> ( boolean , ? string ), MeshData : MeshData , Rail : RailSegment , RailBuilder : RailSegmentBuilder , TrackObject : TrackObjectSegment , TrackObjectBuilder : TrackObjectSegmentBuilder , MidTrackObject : MidTrackObjectSegment , MidTrackObjectBuilder : MidTrackObjectSegmentBuilder , Crossbeam : CrossbeamSegment , CrossbeamBuilder : CrossbeamSegmentBuilder , Rect : RectSegment , RectBuilder : RectSegmentBuilder , RectRail : RectRailSegment , RectRailBuilder : RectRailSegmentBuilder , Box : BoxSegment , BoxBuilder : BoxSegmentBuilder , Create : function ( object : table | Instance ) -> Segment , CreateFromData : function ( data : table ) -> Segment , CreateFromInstance : function ( instance : Instance ) -> Segment , } IsType Segment.IsType(object : any) -> boolean, ?string Type checking function for a Segment. Returns true if a Segment Create Segment.Create(object : any) -> boolean, ?string Type checking function for a Segment. Returns true if a Segment CreateFromData Segment.CreateFromData(object : any) -> boolean, ?string Factory pattern for creating a Segment. Table must have a string called SegmentType as a value. CreateFromInstance Segment.CreateFromInstance(object : any) -> boolean, ?string Factory pattern for creating a Segment. Creates a Segment from an Instance. Instance must have a StringValue named SegmentType as one of it's children. Factory Pattern The Segment module provides methods to use a factory pattern. Here's a list of the names used and their corresponding classes: { Rail = RailSegment , TrackObject = TrackObjectSegment , MidTrackObject = MidTrackObjectSegment , Crossbeam = CrossbeamSegment , Rect = RectSegment , RectRail = RectRailSegment , BoxRail = BoxRailSegment , } Segment Base Class for all Segments Segment { Name : string } Methods Create Produces a new segment instance based off of the two CFrame positions given Segment : CreateAsync ( startCFrame : CFrame , endCFrame : CFrame ) -> Instance CreateAsync Like Create, but wraps this call in a Promise and returns it. Segment : CreateAsync ( startCFrame : CFrame , endCFrame : CFrame ) -> Promise -> Instance MeshData { Mesh : string, MeshType : Enum.MeshType, Offset : Vector3, Scale : Vector3, } Mesh data struct for the NewSmooth Algorithm. Used by: RailSegment CrossbeamSegment Properties Mesh Constructors fromData MeshData . fromData ( data : table ) -> MeshData data { Mesh : string , MeshType : Enum . MeshType , Offset : Vector3 , Scale : Vector3 , } fromInstance MeshData . fromInstance ( instance : Instance ) -> MeshData instance Children { Mesh : StringValue , MeshType : StringValue , Offset : Vector3Value , Scale : Vector3Value , } fromMesh MeshData . fromInstance ( instance : Instance ) -> MeshData Instance must have a child which is a Mesh. MeshDataBuilder MeshDataBuilder { Mesh : string, MeshType : string, Offset : Vector3, Scale : Vector3, } Methods WithMesh MeshDataBuilder : WithMesh ( mesh : string ) -> self WithMeshType MeshDataBuilder : WithMeshType ( mesh : string ) -> self WithOffset MeshDataBuilder : WithOffset ( offset : Vector3 ) -> self WithScale MeshDataBuilder : WithScale ( scale : Vector3 ) -> self RailSegment Extends Segment Creates a BasePart that is positioned and sized parallel to the Track. Similar to Rails in NewSmooth plugins RailSegment : Segment { BasePart : BasePart , Offset : Vector3 , Size : Vector3 , Rotation : Vector3 , Horizontal : boolean MeshData : MeshData , } Properties BasePart The part used to make the rails. This will be cloned each time a new segment is created. Offset The offset from the CFrame Size Z is ignored Rotation Rotation Horizontal If this is horizontal. Used by CylinderMesh rails MeshData Data for a mesh that will be added to the rail on segment creation. See MeshData Constructors fromData RailSegment . fromData ( data : table ) -> RailSegment data { Name : string , BasePart : BasePart , Offset : Vector3 , Size : Vector3 , Rotation : Vector3 , Horizontal : boolean MeshData : ? MeshData , } fromInstance RailSegment . fromInstance ( instance : Instance ) -> RailSegment instance Children { BasePart : BasePart , Offset : Vector3Value , Size : Vector3Value , Rotation : Vector3Value , Horizontal : BoolValue , MeshData : Instance , // see MeshData.fromInstance } RailSegmentBuilder Constructors new RailSegmentBuilder . new () -> RailSegmentBuilder Methods WithBasePart RailSegmentBuilder : WithBasePart ( basePart : BasePart ) -> self WithOffset RailSegmentBuilder : WithOffset ( offset : Vector3 ) -> self WithSize RailSegmentBuilder : WithSize ( size : Vector3 ) -> self WithHorizontal RailSegmentBuilder : WithHorizontal ( horizontal : boolean ) -> self WithMeshData RailSegmentBuilder : WithMeshData ( meshData : MeshData ) -> self TrackObjectSegment Extends Segment Creates an object, either a BasePart or a Model, that is positioned at a given point in the track. Similar to ties in NewSmooth. TrackObjectSegment : Segment { Object : BasePart | Model , Offset : CFrame , UseLookVector : boolean } Properties Object The part used to make the rails. This will be cloned each time a new segment is created. Offset The offset from the CFrame UseLookVector If true, uses LookVector and applies no rotation. Constructors fromData TrackObjectSegment . fromData ( data : table ) -> TrackObjectSegment data { Name : string , Object : BasePart | Model , Offset : CFrame , UseLookVector : boolean } fromInstance TrackObjectSegment . fromInstance ( instance : Instance ) -> TrackObjectSegment instance Children { Object : BasePart | Model , Offset : CFrameValue , UseLookVector : BoolValue , } TrackObjectSegmentBuilder Constructors new TrackObjectSegmentBuilder . new () -> TrackObjectSegmentBuilder Methods WithObject TrackObjectSegmentBuilder : WithObject ( object : BasePart | Model ) -> self WithOffset TrackObjectSegmentBuilder : WithOffset ( offset : CFrame ) -> self WithUseLookVector TrackObjectSegmentBuilder : WithUseLookVector ( useLookVector : boolean ) -> self MidTrackObjectSegment Extends Segment Creates an object, either a BasePart or a Model, that is positioned at a given point in the track. Compared to TrackObject, will position the object between two TrackPositions. MidTrackObjectSegment : Segment { Object : BasePart | Model , Offset : CFrame , UseLookVector : boolean } Properties Object The part used to make the rails. This will be cloned each time a new segment is created. Offset The offset from the CFrame UseLookVector If true, uses LookVector and applies no rotation. Constructors fromData MidTrackObjectSegment . fromData ( data : table ) -> MidTrackObjectSegment data { Name : string , Object : BasePart | Model , Offset : CFrame , UseLookVector : boolean } fromInstance MidTrackObjectSegment . fromInstance ( instance : Instance ) -> MidTrackObjectSegment instance Children { Object : BasePart | Model , Offset : CFrameValue , UseLookVector : BoolValue , } MidTrackObjectSegmentBuilder Constructors new MidTrackObjectSegmentBuilder . new () -> MidTrackObjectSegmentBuilder Methods WithObject MidTrackObjectSegmentBuilder : WithObject ( object : BasePart | Model ) -> self WithOffset MidTrackObjectSegmentBuilder : WithOffset ( offset : CFrame ) -> self WithUseLookVector MidTrackObjectSegmentBuilder : WithUseLookVector ( useLookVector : boolean ) -> self CrossbeamSegment Extends Segment Creates a BasePart that is positioned and sized parallel to the Track. Similar to Crossbeams in NewSmooth plugins CrossbeamSegment : Segment { BasePart : BasePart , StartOffset : Vector3 , EndOffset : Vector3 , Size : Vector3 , Rotation : Vector3 , Horizontal : boolean MeshData : MeshData , } Properties BasePart The part used to make the rails. This will be cloned each time a new segment is created. StartOffset The offset from the CFrame EndOffset The offset from the CFrame Size Z is ignored Rotation Rotation Horizontal If this is horizontal. Used by CylinderMesh rails MeshData Data for a mesh that will be added to the rail on segment creation. See MeshData Constructors fromData CrossbeamSegment . fromData ( data : table ) -> CrossbeamSegment data { Name : string , BasePart : BasePart , Offset : Vector3 , Size : Vector3 , Rotation : Vector3 , Horizontal : boolean MeshData : ? MeshData , } fromInstance CrossbeamSegment . fromInstance ( instance : Instance ) -> CrossbeamSegment instance Children { BasePart : BasePart , Offset : Vector3Value , Size : Vector3Value , Rotation : Vector3Value , Horizontal : BoolValue , MeshData : Instance , // see MeshData.fromInstance } CrossbeamSegmentBuilder Constructors new CrossbeamSegmentBuilder . new () -> CrossbeamSegmentBuilder Methods WithBasePart CrossbeamSegmentBuilder : WithBasePart ( basePart : BasePart ) -> self WithStartOffset CrossbeamSegmentBuilder : WithStartOffset ( offset : Vector3 ) -> self WithEndOffset CrossbeamSegmentBuilder : WithEndOffset ( offset : Vector3 ) -> self WithSize CrossbeamSegmentBuilder : WithSize ( size : Vector3 ) -> self WithHorizontal CrossbeamSegmentBuilder : WithHorizontal ( horizontal : boolean ) -> self WithMeshData CrossbeamSegmentBuilder : WithMeshData ( meshData : MeshData ) -> self RectSegment Extends Segment Creates a Rectangle made out of 2 triangle/wedges and positioned at a given point in the track. RectSegment : Segment { Wedge : WedgePart , P0 : Vector3 , P1 : Vector3 , P2 : Vector3 , P3 : Vector3 , } Properties Wedge The WedgePart used to make the rectangle. This will be cloned each time a new segment is created. P0 Offset 1 P1 Offset 2 P2 Offset 3 P3 Offset 4 Constructors fromData RectSegment . fromData ( data : table ) -> RectSegment data { Name : string , Wedge : WedgePart , P0 : Vector3 , P1 : Vector3 , P2 : Vector3 , P3 : Vector3 , } fromInstance RectSegment . fromInstance ( instance : Instance ) -> RectSegment instance Children { Wedge : WedgePart , P0 : Vector3Value , P1 : Vector3Value , P2 : Vector3Value , P3 : Vector3Value , } RectSegmentBuilder Constructors new RectSegmentBuilder . new () -> RectSegmentBuilder Methods WithWedge RectSegmentBuilder : WithWedge ( basePart : BasePart ) -> self WithP0 RectSegmentBuilder : WithP0 ( offset : Vector3 ) -> self WithP1 RectSegmentBuilder : WithP1 ( offset : Vector3 ) -> self WithP2 RectSegmentBuilder : WithP2 ( offset : Vector3 ) -> self WithP3 RectSegmentBuilder : WithP3 ( offset : Vector3 ) -> self RectRailSegment Extends Segment Creates a BasePart that is positioned and sized parallel to the Track. Similar to Rails in NewSmooth plugins RectRailSegment : Segment { Wedge : WedgePart , StartOffset1 : Vector3 , StartOffset2 : Vector3 , EndOffset1 : Vector3 , EndOffset2 : Vector3 , } Properties Wedge StartOffset1 Offset relative to the start position StartOffset2 Offset relative to the start position EndOffset1 Offset relative to the end position EndOffset2 Offset relative to the end position Constructors fromData RectRailSegment . fromData ( data : table ) -> RectRailSegment data { Name : string , Wedge : WedgePart , StartOffset1 : Vector3 , StartOffset2 : Vector3 , EndOffset1 : Vector3 , EndOffset2 : Vector3 , } fromInstance RectRailSegment . fromInstance ( instance : Instance ) -> RectRailSegment instance Children { Wedge : WedgePart , StartOffset1 : Vector3Value , StartOffset2 : Vector3Value , EndOffset1 : Vector3Value , EndOffset2 : Vector3Value , } RectRailSegmentBuilder { Name : string , Wedge : WedgePart , StartOffset1 : Vector3 , StartOffset2 : Vector3 , EndOffset1 : Vector3 , EndOffset2 : Vector3 , } Constructors new RectRailSegmentBuilder . new () -> RectRailSegmentBuilder Methods WithWedge RectRailSegmentBuilder : WithWedge ( wedge : WedgePart ) -> self WithOffset RectRailSegmentBuilder : WithOffset ( offset : Vector3 ) -> self BoxRailSegment Extends Segment Creates a BasePart that is positioned and sized parallel to the Track. Similar to Rails in NewSmooth plugins BoxRailSegment : Segment { Wedge : WedgePart , TopLeft : Vector3 , TopRight : Vector3 , BottomLeft : Vector3 , BottomRight : Vector3 , DrawTop : boolean , DrawBottom : boolean , DrawLeft : boolean , DrawRight : boolean , } Properties Wedge The wedge used to make the box. This will be cloned each time a new segment is created. TopLeft TopRight BottomLeft BottomRight DrawTop DrawBottom DrawLeft DrawRight Constructors fromData BoxRailSegment . fromData ( data : table ) -> BoxRailSegment data { Name : string , Wedge : WedgePart , TopLeft : Vector3 , TopRight : Vector3 , BottomLeft : Vector3 , BottomRight : Vector3 , DrawTop : ? boolean , DrawBottom : ? boolean , DrawLeft : ? boolean , DrawRight : ? boolean , } fromInstance BoxRailSegment . fromInstance ( instance : Instance ) -> BoxRailSegment instance Children { Wedge : WedgePart , TopLeft : Vector3Value , TopRight : Vector3Value , BottomLeft : Vector3Value , BottomRight : Vector3Value , DrawTop : BoolValue , DrawBottom : BoolValue , DrawLeft : BoolValue , DrawRight : BoolValue , } BoxRailSegmentBuilder Constructors new BoxRailSegmentBuilder . new () -> BoxRailSegmentBuilder Methods WithWedge BoxRailSegmentBuilder : WithWedge ( wedge : WedgePart ) -> self WithTopLeft BoxRailSegmentBuilder : WithTopLeft ( offset : Vector3 ) -> self WithTopRight BoxRailSegmentBuilder : WithTopRight ( offset : Vector3 ) -> self WithBottomLeft BoxRailSegmentBuilder : WithBottomLeft ( offset : Vector3 ) -> self WithBottomRight BoxRailSegmentBuilder : WithBottomRight ( offset : Vector3 ) -> self WithDrawTop BoxRailSegmentBuilder : WithDrawTop ( value : boolean ) -> self WithDrawBottom BoxRailSegmentBuilder : WithDrawBottom ( value : boolean ) -> self WithDrawLeft BoxRailSegmentBuilder : WithDrawLeft ( value : boolean ) -> self WithDrawRight BoxRailSegmentBuilder : WithDrawRight ( value : boolean ) -> self","title":"Segment"},{"location":"api/segment/#segment-module","text":"Describes how to build a piece of track.","title":"Segment (Module)"},{"location":"api/segment/#module","text":"Segment { Segment : Segment , IsType : function ( object : any ) -> ( boolean , ? string ), MeshData : MeshData , Rail : RailSegment , RailBuilder : RailSegmentBuilder , TrackObject : TrackObjectSegment , TrackObjectBuilder : TrackObjectSegmentBuilder , MidTrackObject : MidTrackObjectSegment , MidTrackObjectBuilder : MidTrackObjectSegmentBuilder , Crossbeam : CrossbeamSegment , CrossbeamBuilder : CrossbeamSegmentBuilder , Rect : RectSegment , RectBuilder : RectSegmentBuilder , RectRail : RectRailSegment , RectRailBuilder : RectRailSegmentBuilder , Box : BoxSegment , BoxBuilder : BoxSegmentBuilder , Create : function ( object : table | Instance ) -> Segment , CreateFromData : function ( data : table ) -> Segment , CreateFromInstance : function ( instance : Instance ) -> Segment , }","title":"Module"},{"location":"api/segment/#istype","text":"Segment.IsType(object : any) -> boolean, ?string Type checking function for a Segment. Returns true if a Segment","title":"IsType"},{"location":"api/segment/#create","text":"Segment.Create(object : any) -> boolean, ?string Type checking function for a Segment. Returns true if a Segment","title":"Create"},{"location":"api/segment/#createfromdata","text":"Segment.CreateFromData(object : any) -> boolean, ?string Factory pattern for creating a Segment. Table must have a string called SegmentType as a value.","title":"CreateFromData"},{"location":"api/segment/#createfrominstance","text":"Segment.CreateFromInstance(object : any) -> boolean, ?string Factory pattern for creating a Segment. Creates a Segment from an Instance. Instance must have a StringValue named SegmentType as one of it's children.","title":"CreateFromInstance"},{"location":"api/segment/#factory-pattern","text":"The Segment module provides methods to use a factory pattern. Here's a list of the names used and their corresponding classes: { Rail = RailSegment , TrackObject = TrackObjectSegment , MidTrackObject = MidTrackObjectSegment , Crossbeam = CrossbeamSegment , Rect = RectSegment , RectRail = RectRailSegment , BoxRail = BoxRailSegment , }","title":"Factory Pattern"},{"location":"api/segment/#segment","text":"Base Class for all Segments Segment { Name : string }","title":"Segment"},{"location":"api/segment/#methods","text":"","title":"Methods"},{"location":"api/segment/#create_1","text":"Produces a new segment instance based off of the two CFrame positions given Segment : CreateAsync ( startCFrame : CFrame , endCFrame : CFrame ) -> Instance","title":"Create"},{"location":"api/segment/#createasync","text":"Like Create, but wraps this call in a Promise and returns it. Segment : CreateAsync ( startCFrame : CFrame , endCFrame : CFrame ) -> Promise -> Instance","title":"CreateAsync"},{"location":"api/segment/#meshdata","text":"{ Mesh : string, MeshType : Enum.MeshType, Offset : Vector3, Scale : Vector3, } Mesh data struct for the NewSmooth Algorithm. Used by: RailSegment CrossbeamSegment","title":"MeshData"},{"location":"api/segment/#properties","text":"","title":"Properties"},{"location":"api/segment/#mesh","text":"","title":"Mesh"},{"location":"api/segment/#constructors","text":"","title":"Constructors"},{"location":"api/segment/#fromdata","text":"MeshData . fromData ( data : table ) -> MeshData","title":"fromData"},{"location":"api/segment/#data","text":"{ Mesh : string , MeshType : Enum . MeshType , Offset : Vector3 , Scale : Vector3 , }","title":"data"},{"location":"api/segment/#frominstance","text":"MeshData . fromInstance ( instance : Instance ) -> MeshData","title":"fromInstance"},{"location":"api/segment/#instance-children","text":"{ Mesh : StringValue , MeshType : StringValue , Offset : Vector3Value , Scale : Vector3Value , }","title":"instance Children"},{"location":"api/segment/#frommesh","text":"MeshData . fromInstance ( instance : Instance ) -> MeshData Instance must have a child which is a Mesh.","title":"fromMesh"},{"location":"api/segment/#meshdatabuilder","text":"MeshDataBuilder { Mesh : string, MeshType : string, Offset : Vector3, Scale : Vector3, }","title":"MeshDataBuilder"},{"location":"api/segment/#methods_1","text":"","title":"Methods"},{"location":"api/segment/#withmesh","text":"MeshDataBuilder : WithMesh ( mesh : string ) -> self","title":"WithMesh"},{"location":"api/segment/#withmeshtype","text":"MeshDataBuilder : WithMeshType ( mesh : string ) -> self","title":"WithMeshType"},{"location":"api/segment/#withoffset","text":"MeshDataBuilder : WithOffset ( offset : Vector3 ) -> self","title":"WithOffset"},{"location":"api/segment/#withscale","text":"MeshDataBuilder : WithScale ( scale : Vector3 ) -> self","title":"WithScale"},{"location":"api/segment/#railsegment","text":"Extends Segment Creates a BasePart that is positioned and sized parallel to the Track. Similar to Rails in NewSmooth plugins RailSegment : Segment { BasePart : BasePart , Offset : Vector3 , Size : Vector3 , Rotation : Vector3 , Horizontal : boolean MeshData : MeshData , }","title":"RailSegment"},{"location":"api/segment/#properties_1","text":"BasePart The part used to make the rails. This will be cloned each time a new segment is created. Offset The offset from the CFrame Size Z is ignored Rotation Rotation Horizontal If this is horizontal. Used by CylinderMesh rails MeshData Data for a mesh that will be added to the rail on segment creation. See MeshData","title":"Properties"},{"location":"api/segment/#constructors_1","text":"","title":"Constructors"},{"location":"api/segment/#fromdata_1","text":"RailSegment . fromData ( data : table ) -> RailSegment","title":"fromData"},{"location":"api/segment/#data_1","text":"{ Name : string , BasePart : BasePart , Offset : Vector3 , Size : Vector3 , Rotation : Vector3 , Horizontal : boolean MeshData : ? MeshData , }","title":"data"},{"location":"api/segment/#frominstance_1","text":"RailSegment . fromInstance ( instance : Instance ) -> RailSegment","title":"fromInstance"},{"location":"api/segment/#instance-children_1","text":"{ BasePart : BasePart , Offset : Vector3Value , Size : Vector3Value , Rotation : Vector3Value , Horizontal : BoolValue , MeshData : Instance , // see MeshData.fromInstance }","title":"instance Children"},{"location":"api/segment/#railsegmentbuilder","text":"","title":"RailSegmentBuilder"},{"location":"api/segment/#constructors_2","text":"","title":"Constructors"},{"location":"api/segment/#new","text":"RailSegmentBuilder . new () -> RailSegmentBuilder","title":"new"},{"location":"api/segment/#methods_2","text":"","title":"Methods"},{"location":"api/segment/#withbasepart","text":"RailSegmentBuilder : WithBasePart ( basePart : BasePart ) -> self","title":"WithBasePart"},{"location":"api/segment/#withoffset_1","text":"RailSegmentBuilder : WithOffset ( offset : Vector3 ) -> self","title":"WithOffset"},{"location":"api/segment/#withsize","text":"RailSegmentBuilder : WithSize ( size : Vector3 ) -> self","title":"WithSize"},{"location":"api/segment/#withhorizontal","text":"RailSegmentBuilder : WithHorizontal ( horizontal : boolean ) -> self","title":"WithHorizontal"},{"location":"api/segment/#withmeshdata","text":"RailSegmentBuilder : WithMeshData ( meshData : MeshData ) -> self","title":"WithMeshData"},{"location":"api/segment/#trackobjectsegment","text":"Extends Segment Creates an object, either a BasePart or a Model, that is positioned at a given point in the track. Similar to ties in NewSmooth. TrackObjectSegment : Segment { Object : BasePart | Model , Offset : CFrame , UseLookVector : boolean }","title":"TrackObjectSegment"},{"location":"api/segment/#properties_2","text":"Object The part used to make the rails. This will be cloned each time a new segment is created. Offset The offset from the CFrame UseLookVector If true, uses LookVector and applies no rotation.","title":"Properties"},{"location":"api/segment/#constructors_3","text":"","title":"Constructors"},{"location":"api/segment/#fromdata_2","text":"TrackObjectSegment . fromData ( data : table ) -> TrackObjectSegment","title":"fromData"},{"location":"api/segment/#data_2","text":"{ Name : string , Object : BasePart | Model , Offset : CFrame , UseLookVector : boolean }","title":"data"},{"location":"api/segment/#frominstance_2","text":"TrackObjectSegment . fromInstance ( instance : Instance ) -> TrackObjectSegment","title":"fromInstance"},{"location":"api/segment/#instance-children_2","text":"{ Object : BasePart | Model , Offset : CFrameValue , UseLookVector : BoolValue , }","title":"instance Children"},{"location":"api/segment/#trackobjectsegmentbuilder","text":"","title":"TrackObjectSegmentBuilder"},{"location":"api/segment/#constructors_4","text":"","title":"Constructors"},{"location":"api/segment/#new_1","text":"TrackObjectSegmentBuilder . new () -> TrackObjectSegmentBuilder","title":"new"},{"location":"api/segment/#methods_3","text":"","title":"Methods"},{"location":"api/segment/#withobject","text":"TrackObjectSegmentBuilder : WithObject ( object : BasePart | Model ) -> self","title":"WithObject"},{"location":"api/segment/#withoffset_2","text":"TrackObjectSegmentBuilder : WithOffset ( offset : CFrame ) -> self","title":"WithOffset"},{"location":"api/segment/#withuselookvector","text":"TrackObjectSegmentBuilder : WithUseLookVector ( useLookVector : boolean ) -> self","title":"WithUseLookVector"},{"location":"api/segment/#midtrackobjectsegment","text":"Extends Segment Creates an object, either a BasePart or a Model, that is positioned at a given point in the track. Compared to TrackObject, will position the object between two TrackPositions. MidTrackObjectSegment : Segment { Object : BasePart | Model , Offset : CFrame , UseLookVector : boolean }","title":"MidTrackObjectSegment"},{"location":"api/segment/#properties_3","text":"Object The part used to make the rails. This will be cloned each time a new segment is created. Offset The offset from the CFrame UseLookVector If true, uses LookVector and applies no rotation.","title":"Properties"},{"location":"api/segment/#constructors_5","text":"","title":"Constructors"},{"location":"api/segment/#fromdata_3","text":"MidTrackObjectSegment . fromData ( data : table ) -> MidTrackObjectSegment","title":"fromData"},{"location":"api/segment/#data_3","text":"{ Name : string , Object : BasePart | Model , Offset : CFrame , UseLookVector : boolean }","title":"data"},{"location":"api/segment/#frominstance_3","text":"MidTrackObjectSegment . fromInstance ( instance : Instance ) -> MidTrackObjectSegment","title":"fromInstance"},{"location":"api/segment/#instance-children_3","text":"{ Object : BasePart | Model , Offset : CFrameValue , UseLookVector : BoolValue , }","title":"instance Children"},{"location":"api/segment/#midtrackobjectsegmentbuilder","text":"","title":"MidTrackObjectSegmentBuilder"},{"location":"api/segment/#constructors_6","text":"","title":"Constructors"},{"location":"api/segment/#new_2","text":"MidTrackObjectSegmentBuilder . new () -> MidTrackObjectSegmentBuilder","title":"new"},{"location":"api/segment/#methods_4","text":"","title":"Methods"},{"location":"api/segment/#withobject_1","text":"MidTrackObjectSegmentBuilder : WithObject ( object : BasePart | Model ) -> self","title":"WithObject"},{"location":"api/segment/#withoffset_3","text":"MidTrackObjectSegmentBuilder : WithOffset ( offset : CFrame ) -> self","title":"WithOffset"},{"location":"api/segment/#withuselookvector_1","text":"MidTrackObjectSegmentBuilder : WithUseLookVector ( useLookVector : boolean ) -> self","title":"WithUseLookVector"},{"location":"api/segment/#crossbeamsegment","text":"Extends Segment Creates a BasePart that is positioned and sized parallel to the Track. Similar to Crossbeams in NewSmooth plugins CrossbeamSegment : Segment { BasePart : BasePart , StartOffset : Vector3 , EndOffset : Vector3 , Size : Vector3 , Rotation : Vector3 , Horizontal : boolean MeshData : MeshData , }","title":"CrossbeamSegment"},{"location":"api/segment/#properties_4","text":"BasePart The part used to make the rails. This will be cloned each time a new segment is created. StartOffset The offset from the CFrame EndOffset The offset from the CFrame Size Z is ignored Rotation Rotation Horizontal If this is horizontal. Used by CylinderMesh rails MeshData Data for a mesh that will be added to the rail on segment creation. See MeshData","title":"Properties"},{"location":"api/segment/#constructors_7","text":"","title":"Constructors"},{"location":"api/segment/#fromdata_4","text":"CrossbeamSegment . fromData ( data : table ) -> CrossbeamSegment","title":"fromData"},{"location":"api/segment/#data_4","text":"{ Name : string , BasePart : BasePart , Offset : Vector3 , Size : Vector3 , Rotation : Vector3 , Horizontal : boolean MeshData : ? MeshData , }","title":"data"},{"location":"api/segment/#frominstance_4","text":"CrossbeamSegment . fromInstance ( instance : Instance ) -> CrossbeamSegment","title":"fromInstance"},{"location":"api/segment/#instance-children_4","text":"{ BasePart : BasePart , Offset : Vector3Value , Size : Vector3Value , Rotation : Vector3Value , Horizontal : BoolValue , MeshData : Instance , // see MeshData.fromInstance }","title":"instance Children"},{"location":"api/segment/#crossbeamsegmentbuilder","text":"","title":"CrossbeamSegmentBuilder"},{"location":"api/segment/#constructors_8","text":"","title":"Constructors"},{"location":"api/segment/#new_3","text":"CrossbeamSegmentBuilder . new () -> CrossbeamSegmentBuilder","title":"new"},{"location":"api/segment/#methods_5","text":"","title":"Methods"},{"location":"api/segment/#withbasepart_1","text":"CrossbeamSegmentBuilder : WithBasePart ( basePart : BasePart ) -> self","title":"WithBasePart"},{"location":"api/segment/#withstartoffset","text":"CrossbeamSegmentBuilder : WithStartOffset ( offset : Vector3 ) -> self","title":"WithStartOffset"},{"location":"api/segment/#withendoffset","text":"CrossbeamSegmentBuilder : WithEndOffset ( offset : Vector3 ) -> self","title":"WithEndOffset"},{"location":"api/segment/#withsize_1","text":"CrossbeamSegmentBuilder : WithSize ( size : Vector3 ) -> self","title":"WithSize"},{"location":"api/segment/#withhorizontal_1","text":"CrossbeamSegmentBuilder : WithHorizontal ( horizontal : boolean ) -> self","title":"WithHorizontal"},{"location":"api/segment/#withmeshdata_1","text":"CrossbeamSegmentBuilder : WithMeshData ( meshData : MeshData ) -> self","title":"WithMeshData"},{"location":"api/segment/#rectsegment","text":"Extends Segment Creates a Rectangle made out of 2 triangle/wedges and positioned at a given point in the track. RectSegment : Segment { Wedge : WedgePart , P0 : Vector3 , P1 : Vector3 , P2 : Vector3 , P3 : Vector3 , }","title":"RectSegment"},{"location":"api/segment/#properties_5","text":"Wedge The WedgePart used to make the rectangle. This will be cloned each time a new segment is created. P0 Offset 1 P1 Offset 2 P2 Offset 3 P3 Offset 4","title":"Properties"},{"location":"api/segment/#constructors_9","text":"","title":"Constructors"},{"location":"api/segment/#fromdata_5","text":"RectSegment . fromData ( data : table ) -> RectSegment","title":"fromData"},{"location":"api/segment/#data_5","text":"{ Name : string , Wedge : WedgePart , P0 : Vector3 , P1 : Vector3 , P2 : Vector3 , P3 : Vector3 , }","title":"data"},{"location":"api/segment/#frominstance_5","text":"RectSegment . fromInstance ( instance : Instance ) -> RectSegment","title":"fromInstance"},{"location":"api/segment/#instance-children_5","text":"{ Wedge : WedgePart , P0 : Vector3Value , P1 : Vector3Value , P2 : Vector3Value , P3 : Vector3Value , }","title":"instance Children"},{"location":"api/segment/#rectsegmentbuilder","text":"","title":"RectSegmentBuilder"},{"location":"api/segment/#constructors_10","text":"","title":"Constructors"},{"location":"api/segment/#new_4","text":"RectSegmentBuilder . new () -> RectSegmentBuilder","title":"new"},{"location":"api/segment/#methods_6","text":"","title":"Methods"},{"location":"api/segment/#withwedge","text":"RectSegmentBuilder : WithWedge ( basePart : BasePart ) -> self","title":"WithWedge"},{"location":"api/segment/#withp0","text":"RectSegmentBuilder : WithP0 ( offset : Vector3 ) -> self","title":"WithP0"},{"location":"api/segment/#withp1","text":"RectSegmentBuilder : WithP1 ( offset : Vector3 ) -> self","title":"WithP1"},{"location":"api/segment/#withp2","text":"RectSegmentBuilder : WithP2 ( offset : Vector3 ) -> self","title":"WithP2"},{"location":"api/segment/#withp3","text":"RectSegmentBuilder : WithP3 ( offset : Vector3 ) -> self","title":"WithP3"},{"location":"api/segment/#rectrailsegment","text":"Extends Segment Creates a BasePart that is positioned and sized parallel to the Track. Similar to Rails in NewSmooth plugins RectRailSegment : Segment { Wedge : WedgePart , StartOffset1 : Vector3 , StartOffset2 : Vector3 , EndOffset1 : Vector3 , EndOffset2 : Vector3 , }","title":"RectRailSegment"},{"location":"api/segment/#properties_6","text":"Wedge StartOffset1 Offset relative to the start position StartOffset2 Offset relative to the start position EndOffset1 Offset relative to the end position EndOffset2 Offset relative to the end position","title":"Properties"},{"location":"api/segment/#constructors_11","text":"","title":"Constructors"},{"location":"api/segment/#fromdata_6","text":"RectRailSegment . fromData ( data : table ) -> RectRailSegment","title":"fromData"},{"location":"api/segment/#data_6","text":"{ Name : string , Wedge : WedgePart , StartOffset1 : Vector3 , StartOffset2 : Vector3 , EndOffset1 : Vector3 , EndOffset2 : Vector3 , }","title":"data"},{"location":"api/segment/#frominstance_6","text":"RectRailSegment . fromInstance ( instance : Instance ) -> RectRailSegment","title":"fromInstance"},{"location":"api/segment/#instance-children_6","text":"{ Wedge : WedgePart , StartOffset1 : Vector3Value , StartOffset2 : Vector3Value , EndOffset1 : Vector3Value , EndOffset2 : Vector3Value , }","title":"instance Children"},{"location":"api/segment/#rectrailsegmentbuilder","text":"{ Name : string , Wedge : WedgePart , StartOffset1 : Vector3 , StartOffset2 : Vector3 , EndOffset1 : Vector3 , EndOffset2 : Vector3 , }","title":"RectRailSegmentBuilder"},{"location":"api/segment/#constructors_12","text":"","title":"Constructors"},{"location":"api/segment/#new_5","text":"RectRailSegmentBuilder . new () -> RectRailSegmentBuilder","title":"new"},{"location":"api/segment/#methods_7","text":"","title":"Methods"},{"location":"api/segment/#withwedge_1","text":"RectRailSegmentBuilder : WithWedge ( wedge : WedgePart ) -> self","title":"WithWedge"},{"location":"api/segment/#withoffset_4","text":"RectRailSegmentBuilder : WithOffset ( offset : Vector3 ) -> self","title":"WithOffset"},{"location":"api/segment/#boxrailsegment","text":"Extends Segment Creates a BasePart that is positioned and sized parallel to the Track. Similar to Rails in NewSmooth plugins BoxRailSegment : Segment { Wedge : WedgePart , TopLeft : Vector3 , TopRight : Vector3 , BottomLeft : Vector3 , BottomRight : Vector3 , DrawTop : boolean , DrawBottom : boolean , DrawLeft : boolean , DrawRight : boolean , }","title":"BoxRailSegment"},{"location":"api/segment/#properties_7","text":"Wedge The wedge used to make the box. This will be cloned each time a new segment is created. TopLeft TopRight BottomLeft BottomRight DrawTop DrawBottom DrawLeft DrawRight","title":"Properties"},{"location":"api/segment/#constructors_13","text":"","title":"Constructors"},{"location":"api/segment/#fromdata_7","text":"BoxRailSegment . fromData ( data : table ) -> BoxRailSegment","title":"fromData"},{"location":"api/segment/#data_7","text":"{ Name : string , Wedge : WedgePart , TopLeft : Vector3 , TopRight : Vector3 , BottomLeft : Vector3 , BottomRight : Vector3 , DrawTop : ? boolean , DrawBottom : ? boolean , DrawLeft : ? boolean , DrawRight : ? boolean , }","title":"data"},{"location":"api/segment/#frominstance_7","text":"BoxRailSegment . fromInstance ( instance : Instance ) -> BoxRailSegment","title":"fromInstance"},{"location":"api/segment/#instance-children_7","text":"{ Wedge : WedgePart , TopLeft : Vector3Value , TopRight : Vector3Value , BottomLeft : Vector3Value , BottomRight : Vector3Value , DrawTop : BoolValue , DrawBottom : BoolValue , DrawLeft : BoolValue , DrawRight : BoolValue , }","title":"instance Children"},{"location":"api/segment/#boxrailsegmentbuilder","text":"","title":"BoxRailSegmentBuilder"},{"location":"api/segment/#constructors_14","text":"","title":"Constructors"},{"location":"api/segment/#new_6","text":"BoxRailSegmentBuilder . new () -> BoxRailSegmentBuilder","title":"new"},{"location":"api/segment/#methods_8","text":"","title":"Methods"},{"location":"api/segment/#withwedge_2","text":"BoxRailSegmentBuilder : WithWedge ( wedge : WedgePart ) -> self","title":"WithWedge"},{"location":"api/segment/#withtopleft","text":"BoxRailSegmentBuilder : WithTopLeft ( offset : Vector3 ) -> self","title":"WithTopLeft"},{"location":"api/segment/#withtopright","text":"BoxRailSegmentBuilder : WithTopRight ( offset : Vector3 ) -> self","title":"WithTopRight"},{"location":"api/segment/#withbottomleft","text":"BoxRailSegmentBuilder : WithBottomLeft ( offset : Vector3 ) -> self","title":"WithBottomLeft"},{"location":"api/segment/#withbottomright","text":"BoxRailSegmentBuilder : WithBottomRight ( offset : Vector3 ) -> self","title":"WithBottomRight"},{"location":"api/segment/#withdrawtop","text":"BoxRailSegmentBuilder : WithDrawTop ( value : boolean ) -> self","title":"WithDrawTop"},{"location":"api/segment/#withdrawbottom","text":"BoxRailSegmentBuilder : WithDrawBottom ( value : boolean ) -> self","title":"WithDrawBottom"},{"location":"api/segment/#withdrawleft","text":"BoxRailSegmentBuilder : WithDrawLeft ( value : boolean ) -> self","title":"WithDrawLeft"},{"location":"api/segment/#withdrawright","text":"BoxRailSegmentBuilder : WithDrawRight ( value : boolean ) -> self","title":"WithDrawRight"},{"location":"api/track_group/","text":"TrackGroup Builds all the Sections it holds along a section of track at once. TrackGroup : BaseSection { Name : string, Sections : BaseSection[], } Methods Create Creates a Model TrackGroup : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Model CreateAsync Like Create, but wraps this call in a Promise and returns it. TrackGroup : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Promise -> Model Constructors fromData TrackGroup . fromData ( data : table ) -> TrackGroup data { Name : ? string , Sections : BaseSection [] } fromInstance TrackGroup . fromInstance ( instance : Instance ) -> TrackGroup instance Children { }","title":"TrackGroup"},{"location":"api/track_group/#trackgroup","text":"Builds all the Sections it holds along a section of track at once. TrackGroup : BaseSection { Name : string, Sections : BaseSection[], }","title":"TrackGroup"},{"location":"api/track_group/#methods","text":"","title":"Methods"},{"location":"api/track_group/#create","text":"Creates a Model TrackGroup : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Model","title":"Create"},{"location":"api/track_group/#createasync","text":"Like Create, but wraps this call in a Promise and returns it. TrackGroup : CreateAsync ( cframeTrack : CFrameTrack , startPosition : number , endPosition : number ) -> Promise -> Model","title":"CreateAsync"},{"location":"api/track_group/#constructors","text":"","title":"Constructors"},{"location":"api/track_group/#fromdata","text":"TrackGroup . fromData ( data : table ) -> TrackGroup","title":"fromData"},{"location":"api/track_group/#data","text":"{ Name : ? string , Sections : BaseSection [] }","title":"data"},{"location":"api/track_group/#frominstance","text":"TrackGroup . fromInstance ( instance : Instance ) -> TrackGroup","title":"fromInstance"},{"location":"api/track_group/#instance-children","text":"{ }","title":"instance Children"},{"location":"quick_start/","text":"About This is a plugin for building tracks for roller coasters fast Better description coming soon. Why Because speed and less clicking","title":"About"},{"location":"quick_start/#about","text":"This is a plugin for building tracks for roller coasters fast Better description coming soon.","title":"About"},{"location":"quick_start/#why","text":"Because speed and less clicking","title":"Why"},{"location":"quick_start/installation/","text":"Installation From Roblox Install the plugin from here [Insert Link Here] From Github Download a copy from the releases. Alternatively, you can clone the project using git and use Rojo to build it yourself.","title":"Installation"},{"location":"quick_start/installation/#installation","text":"","title":"Installation"},{"location":"quick_start/installation/#from-roblox","text":"Install the plugin from here [Insert Link Here]","title":"From Roblox"},{"location":"quick_start/installation/#from-github","text":"Download a copy from the releases. Alternatively, you can clone the project using git and use Rojo to build it yourself.","title":"From Github"},{"location":"quick_start/porting_from_newsmooth/","text":"Porting From NewSmooth Warning This tutorial is still a work in progress For this tutorial, we will be referencing the Intamin NewSmooth converter. Specifically, we will be looking at the SuperSpine TrackType. Additionally, we will be adding our own twist to the crossbeams that you cannot normally do with NewSmooth without switching converters. Warning This tutorial will not go over setting up physics for physics based coasters. Rails -- physics rails local rails = { leftrail = { current = Vector3 . new ( - 3 , 0 , 0 ), previous = Vector3 . new ( - 3 , 0 , 0 ), Horizontal = true , BrickColor = ba . RailColor , Size = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), Mesh = \"CylinderMesh\" , Meshscale = Vector3 . new ( 1 , 1 , 0.2 ), --width is X, height is Y, and length is Z ALWAYS Meshoffset = Vector3 . new (), Properties = { --any properties you want on the bricks like Friction or Material or Transparency Friction = 0 , } }, rightrail = { current = Vector3 . new ( 3 , 0 , 0 ), previous = Vector3 . new ( 3 , 0 , 0 ), Horizontal = true , BrickColor = ba . RailColor , Size = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), Mesh = \"CylinderMesh\" , Meshoffset = Vector3 . new (), Meshscale = Vector3 . new ( 1 , 1 , 0.2 ), --width is X, height is Y, and length is Z ALWAYS Properties = { Friction = 0 , }, }, } --- Super Spine rails rails = { beam1 = { current = Vector3 . new ( 0 , - 1 - 0.3 , 0 ), previous = Vector3 . new ( 0 , - 1 - 0.3 , 0 ), Horizontal = false , BrickColor = ba . SpineColor , Size = Vector3 . new ( 1.8 , 2 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), Mesh = \"BlockMesh\" , Meshscale = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Meshoffset = Vector3 . new (), Properties = { CanCollide = false , }, }, beam2 = { current = Vector3 . new ( 0 , - 2.3 , 0 ), previous = Vector3 . new ( 0 , - 2.3 , 0 ), Horizontal = true , BrickColor = ba . SpineColor , Size = Vector3 . new ( 1.8 , 1.8 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), Mesh = \"CylinderMesh\" , Meshscale = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Meshoffset = Vector3 . new (), Properties = { CanCollide = false , }, }, }, RailSegment Misc Part Properties BrickColor Properties Works by cloning the given part. See size for Size property Current and Previous For all rails, the current and previous are the exact same. Crossbeams have a different current and previous . RailSegment.Offset Horizontal Horizontal is a value which tells if this rail should be rotated along the _ axis. It is used primarily by CylinderMesh rails. In the future, this could be changed to allow all axis. RailSegment.Horizontal Size RailSegment.Size Rotation RailSegment.Rotation Ties -- Super Spine ties ties = { tie1 = { ClassName = \"Part\" , offset = CFrame . new ( 0 , 0 , 0 ), BrickColor = ba . TieColor , Mesh = \"BlockMesh\" , Meshscale = Vector3 . new ( 1 , 1 , 1 ), --width is X, height is Y, and length is Z ALWAYS Meshoffset = Vector3 . new (), Properties = { CanCollide = false , Size = Vector3 . new ( 6 , .6 , .6 ), }, }, }, TrackObject A TrackObject is an object placed at a given point on the track. It does not require resizing as Rails and Crossbeams stretch to expand to the whole segment. A TrackObject's object can be either anything that is a BasePart or a Model with it's PrimaryPart set. It was named TrackObject instead of Tie to signify the versatility of this Segment . You will see in the later section Brakes, Transport, and MagLaunch/Brakes how it could it be used for these elements. Misc Part Properties ClassName BrickColor Mesh MeshScale MeshOffset Properties TrackObject.Object Offset TrackObject.Offset Crossbeams -- Super Spine Crossbeams crossbeams = { crossbeam = { current = Vector3 . new ( 3 , 0 , 0 ), previous = Vector3 . new ( - 3 , 0 , 0 ), Horizontal = false , BrickColor = ba . SpineColor , Size = Vector3 . new ( .6 , .6 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), Mesh = \"BlockMesh\" , Meshscale = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Meshoffset = Vector3 . new (), Properties = { CanCollide = false , }, }, }, Misc Part Properties BrickColor Properties Current CrossbeamSegment.EndOffset Previous CrossbeamSegment.StartOffset Horizontal CrossbeamSegment.Horizontal Size CrossbeamSegment.Size Rotation CrossbeamSegment.Rotation MeshData CrossbeamSegment.MeshData Similar to RailSegment's MeshData. Chainlift A Chainlift is just a square rail with a chain texture. Brakes, Transport, and MagLaunch/Brakes These elements in NewSmooth are designed to stretch to fit a variety of Segment lengths. It is recommended you convert these to a model and use them as TrackObjects.","title":"Porting From NewSmooth"},{"location":"quick_start/porting_from_newsmooth/#porting-from-newsmooth","text":"Warning This tutorial is still a work in progress For this tutorial, we will be referencing the Intamin NewSmooth converter. Specifically, we will be looking at the SuperSpine TrackType. Additionally, we will be adding our own twist to the crossbeams that you cannot normally do with NewSmooth without switching converters. Warning This tutorial will not go over setting up physics for physics based coasters.","title":"Porting From NewSmooth"},{"location":"quick_start/porting_from_newsmooth/#rails","text":"-- physics rails local rails = { leftrail = { current = Vector3 . new ( - 3 , 0 , 0 ), previous = Vector3 . new ( - 3 , 0 , 0 ), Horizontal = true , BrickColor = ba . RailColor , Size = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), Mesh = \"CylinderMesh\" , Meshscale = Vector3 . new ( 1 , 1 , 0.2 ), --width is X, height is Y, and length is Z ALWAYS Meshoffset = Vector3 . new (), Properties = { --any properties you want on the bricks like Friction or Material or Transparency Friction = 0 , } }, rightrail = { current = Vector3 . new ( 3 , 0 , 0 ), previous = Vector3 . new ( 3 , 0 , 0 ), Horizontal = true , BrickColor = ba . RailColor , Size = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), Mesh = \"CylinderMesh\" , Meshoffset = Vector3 . new (), Meshscale = Vector3 . new ( 1 , 1 , 0.2 ), --width is X, height is Y, and length is Z ALWAYS Properties = { Friction = 0 , }, }, } --- Super Spine rails rails = { beam1 = { current = Vector3 . new ( 0 , - 1 - 0.3 , 0 ), previous = Vector3 . new ( 0 , - 1 - 0.3 , 0 ), Horizontal = false , BrickColor = ba . SpineColor , Size = Vector3 . new ( 1.8 , 2 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), Mesh = \"BlockMesh\" , Meshscale = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Meshoffset = Vector3 . new (), Properties = { CanCollide = false , }, }, beam2 = { current = Vector3 . new ( 0 , - 2.3 , 0 ), previous = Vector3 . new ( 0 , - 2.3 , 0 ), Horizontal = true , BrickColor = ba . SpineColor , Size = Vector3 . new ( 1.8 , 1.8 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), Mesh = \"CylinderMesh\" , Meshscale = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Meshoffset = Vector3 . new (), Properties = { CanCollide = false , }, }, }, RailSegment","title":"Rails"},{"location":"quick_start/porting_from_newsmooth/#misc-part-properties","text":"BrickColor Properties Works by cloning the given part. See size for Size property","title":"Misc Part Properties"},{"location":"quick_start/porting_from_newsmooth/#current-and-previous","text":"For all rails, the current and previous are the exact same. Crossbeams have a different current and previous . RailSegment.Offset","title":"Current and Previous"},{"location":"quick_start/porting_from_newsmooth/#horizontal","text":"Horizontal is a value which tells if this rail should be rotated along the _ axis. It is used primarily by CylinderMesh rails. In the future, this could be changed to allow all axis. RailSegment.Horizontal","title":"Horizontal"},{"location":"quick_start/porting_from_newsmooth/#size","text":"RailSegment.Size","title":"Size"},{"location":"quick_start/porting_from_newsmooth/#rotation","text":"RailSegment.Rotation","title":"Rotation"},{"location":"quick_start/porting_from_newsmooth/#ties","text":"-- Super Spine ties ties = { tie1 = { ClassName = \"Part\" , offset = CFrame . new ( 0 , 0 , 0 ), BrickColor = ba . TieColor , Mesh = \"BlockMesh\" , Meshscale = Vector3 . new ( 1 , 1 , 1 ), --width is X, height is Y, and length is Z ALWAYS Meshoffset = Vector3 . new (), Properties = { CanCollide = false , Size = Vector3 . new ( 6 , .6 , .6 ), }, }, }, TrackObject A TrackObject is an object placed at a given point on the track. It does not require resizing as Rails and Crossbeams stretch to expand to the whole segment. A TrackObject's object can be either anything that is a BasePart or a Model with it's PrimaryPart set. It was named TrackObject instead of Tie to signify the versatility of this Segment . You will see in the later section Brakes, Transport, and MagLaunch/Brakes how it could it be used for these elements.","title":"Ties"},{"location":"quick_start/porting_from_newsmooth/#misc-part-properties_1","text":"ClassName BrickColor Mesh MeshScale MeshOffset Properties TrackObject.Object","title":"Misc Part Properties"},{"location":"quick_start/porting_from_newsmooth/#offset","text":"TrackObject.Offset","title":"Offset"},{"location":"quick_start/porting_from_newsmooth/#crossbeams","text":"-- Super Spine Crossbeams crossbeams = { crossbeam = { current = Vector3 . new ( 3 , 0 , 0 ), previous = Vector3 . new ( - 3 , 0 , 0 ), Horizontal = false , BrickColor = ba . SpineColor , Size = Vector3 . new ( .6 , .6 , 0 ), --width is X, height is Y, and length is Z ALWAYS Rotation = Vector3 . new (), Mesh = \"BlockMesh\" , Meshscale = Vector3 . new ( 1 , 1 , 0 ), --width is X, height is Y, and length is Z ALWAYS Meshoffset = Vector3 . new (), Properties = { CanCollide = false , }, }, },","title":"Crossbeams"},{"location":"quick_start/porting_from_newsmooth/#misc-part-properties_2","text":"BrickColor Properties","title":"Misc Part Properties"},{"location":"quick_start/porting_from_newsmooth/#current","text":"CrossbeamSegment.EndOffset","title":"Current"},{"location":"quick_start/porting_from_newsmooth/#previous","text":"CrossbeamSegment.StartOffset","title":"Previous"},{"location":"quick_start/porting_from_newsmooth/#horizontal_1","text":"CrossbeamSegment.Horizontal","title":"Horizontal"},{"location":"quick_start/porting_from_newsmooth/#size_1","text":"CrossbeamSegment.Size","title":"Size"},{"location":"quick_start/porting_from_newsmooth/#rotation_1","text":"CrossbeamSegment.Rotation","title":"Rotation"},{"location":"quick_start/porting_from_newsmooth/#meshdata","text":"CrossbeamSegment.MeshData Similar to RailSegment's MeshData.","title":"MeshData"},{"location":"quick_start/porting_from_newsmooth/#chainlift","text":"A Chainlift is just a square rail with a chain texture.","title":"Chainlift"},{"location":"quick_start/porting_from_newsmooth/#brakes-transport-and-maglaunchbrakes","text":"These elements in NewSmooth are designed to stretch to fit a variety of Segment lengths. It is recommended you convert these to a model and use them as TrackObjects.","title":"Brakes, Transport, and MagLaunch/Brakes"},{"location":"quick_start/writing_a_program/","text":"Writing A Program Warning This is still a work in progress. The API is still changing and thus this code may not work properly. Why Program? For programmers or anyone with a good handle of Roblox Lua, it can be faster than setting it up manually. Additionally, the GUI is still a work in progress, so you still have access to all of the API. What is a Program? ModuleScript that returns a function. This function takes the API as it's argument The API is passed in as an argument instead of injected into the script environment as Roblox would yell at you for errors. Track Setup As there are a ton a points, we will set this up via Instance. Setup Points Requires that the points be named in order from start to end. TheEpicTwin's Edit of Spacek's Coaster Plugin OrderedPoints local trackPoints = workspace : FindFirstChild ( \"Track\" ) local cframeTrack = PointToPoint2Builder . new () : WithName ( \"MyTrack\" ) : WithPoints ( trackPoints ) : WithIsCircuited ( true ) : WithHashInterval ( 10 ) : Finish () Program API CFrameTrack Segment Section TrackGroup PhysicsRails CFrameTrack a 3D line that defines the position of the track. Segment builds a Part or Model from on a start and an end CFrame. Section builds segments from a start and end position for a given track. TrackGroup builds multiple sections for a track from a start and end position. Segments: Rail TrackObject MidTrackObject Crossbeam Rect RectRail BoxRail For now, we will only be using 3. Check the examples if you would like to see how the others are used. Left Rail local RailSegmentBuilder = Segment . RailBuilder local leftRailSection = SectionBuilder . new () : WithName ( \"LeftRail\" ) : WithSegment ( RailSegmentBuilder . new () : WithBasePart ( RAIL_PART ) : WithOffset ( Vector3 . new ( - 3 , 0 , 0 )) : WithHorizontal ( true ) : WithMeshData ( MeshDataBuilder . new () : WithMesh ( \"CylinderMesh\" ) : WithOffset ( Vector3 . new ( 0 , 0 , 0 )) : WithScale ( Vector3 . new ( 1 , 1 , 0.2 )) : Finish () ) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () Right Rail local rightRailSection = SectionBuilder . new () : WithName ( \"RightRail\" ) : WithSegment ( RailSegmentBuilder . new () : WithBasePart ( RAIL_PART ) : WithOffset ( Vector3 . new ( 3 , 0 , 0 )) : WithHorizontal ( true ) : WithMeshData ( MeshDataBuilder . new () : WithMesh ( \"CylinderMesh\" ) : WithOffset ( Vector3 . new ( 0 , 0 , 0 )) : WithScale ( Vector3 . new ( 1 , 1 , 0.2 )) : Finish () ) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () Tie local tieSection = SectionBuilder . new () : WithName ( \"Tie\" ) : WithSegment ( TrackObjectSegmentBuilder . new () : WithTrackObject ( TIE_PART ) : WithOffset ( CFrame . new ( 0 , 0 , 0 )) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () Crossbeam local crossbeamSection = SectionBuilder . new () : WithName ( \"Crossbeam\" ) : WithSegment ( CrossbeamSegmentBuilder . new () : WithBasePart ( CROSSBEAM_PART ) : WithStartOffset ( Vector3 . new ( 3 , 0 , 0 )) : WithEndOffset ( Vector3 . new ( - 3 , 0 , 0 )) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () Build local trackGroup = TrackGroupBuilder . new () : WithName ( \"MyTrack\" ) : WithSection ( leftRailSection ) : WithSection ( rightRailSection ) : WithSection ( tieSection ) : WithSection ( crossbeamSection ) : Finish () local trackModel = trackGroup : Create ( cframeTrack , 0 , cframeTrack . Length ) trackModel . Parent = workspace Full Code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 return function ( api ) local TrackGroup = api . TrackGroup local Section = api . Section local CFrameTrack = api . CFrameTrack local PointToPoint2Builder = CFrameTrack . PointToPoint2Builder local Segment = api . Segment local RailSegmentBuilder = Segment . RailBuilder local TrackObjectSegmentBuilder = Segment . TrackObjectBuilder local CrossbeamBuilder = Segment . CrossbeamBuilder local trackPoints = workspace : FindFirstChild ( \"Track\" ) local cframeTrack = PointToPoint2Builder . new () : WithName ( \"MyTrack\" ) : WithPoints ( trackPoints ) : WithIsCircuited ( true ) : WithHashInterval ( 10 ) : Finish () local leftRailSection = SectionBuilder . new () : WithName ( \"LeftRail\" ) : WithSegment ( RailSegment . new () : WithBasePart ( RAIL_PART ) : WithOffset ( Vector3 . new ( - 3 , 0 , 0 )) : WithHorizontal ( true ) : WithMeshData ( MeshDataBuilder . new () : WithMesh ( \"CylinderMesh\" ) : WithOffset ( Vector3 . new ( 0 , 0 , 0 )) : WithScale ( Vector3 . new ( 1 , 1 , 0.2 )) : Finish () ) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local rightRailSection = SectionBuilder . new () : WithName ( \"RightRail\" ) : WithSegment ( RailSegmentBuilder . new () : WithBasePart ( RAIL_PART ) : WithOffset ( Vector3 . new ( 3 , 0 , 0 )) : WithHorizontal ( true ) : WithMeshData ( MeshDataBuilder . new () : WithMesh ( \"CylinderMesh\" ) : WithOffset ( Vector3 . new ( 0 , 0 , 0 )) : WithScale ( Vector3 . new ( 1 , 1 , 0.2 )) : Finish () ) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local tieSection = SectionBuilder . new () : WithName ( \"Tie\" ) : WithSegment ( TrackObjectSegmentBuilder . new () : WithTrackObject ( TIE_PART ) : WithOffset ( CFrame . new ( 0 , 0 , 0 )) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local crossbeamSection = SectionBuilder . new () : WithName ( \"Crossbeam\" ) : WithSegment ( CrossbeamSegmentBuilder . new () : WithBasePart ( CROSSBEAM_PART ) : WithStartOffset ( Vector3 . new ( 3 , 0 , 0 )) : WithEndOffset ( Vector3 . new ( - 3 , 0 , 0 )) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local trackGroup = TrackGroupBuilder . new () : WithName ( \"MyTrack\" ) : WithSection ( leftRailSection ) : WithSection ( rightRailSection ) : WithSection ( tieSection ) : WithSection ( crossbeamSection ) : Finish () local model = Instance . new ( \"Model\" ) local trackModel = trackGroup : Create ( cframeTrack , 0 , cframeTrack . Length ) trackModel . Parent = model local chainLiftModel = chainLiftSection : Create ( cframeTrack , 100 , 200 ) chainLiftModel . Parent = model local brakesModel = brakesSection : Create ( cframeTrack , 400 , 500 ) brakesModel . Parent = model model . Parent = workspace end","title":"Writing A Program"},{"location":"quick_start/writing_a_program/#writing-a-program","text":"Warning This is still a work in progress. The API is still changing and thus this code may not work properly.","title":"Writing A Program"},{"location":"quick_start/writing_a_program/#why-program","text":"For programmers or anyone with a good handle of Roblox Lua, it can be faster than setting it up manually. Additionally, the GUI is still a work in progress, so you still have access to all of the API.","title":"Why Program?"},{"location":"quick_start/writing_a_program/#what-is-a-program","text":"ModuleScript that returns a function. This function takes the API as it's argument The API is passed in as an argument instead of injected into the script environment as Roblox would yell at you for errors.","title":"What is a Program?"},{"location":"quick_start/writing_a_program/#track-setup","text":"As there are a ton a points, we will set this up via Instance.","title":"Track Setup"},{"location":"quick_start/writing_a_program/#setup-points","text":"Requires that the points be named in order from start to end. TheEpicTwin's Edit of Spacek's Coaster Plugin OrderedPoints local trackPoints = workspace : FindFirstChild ( \"Track\" ) local cframeTrack = PointToPoint2Builder . new () : WithName ( \"MyTrack\" ) : WithPoints ( trackPoints ) : WithIsCircuited ( true ) : WithHashInterval ( 10 ) : Finish ()","title":"Setup Points"},{"location":"quick_start/writing_a_program/#program-api","text":"CFrameTrack Segment Section TrackGroup PhysicsRails CFrameTrack a 3D line that defines the position of the track. Segment builds a Part or Model from on a start and an end CFrame. Section builds segments from a start and end position for a given track. TrackGroup builds multiple sections for a track from a start and end position. Segments: Rail TrackObject MidTrackObject Crossbeam Rect RectRail BoxRail For now, we will only be using 3. Check the examples if you would like to see how the others are used.","title":"Program API"},{"location":"quick_start/writing_a_program/#left-rail","text":"local RailSegmentBuilder = Segment . RailBuilder local leftRailSection = SectionBuilder . new () : WithName ( \"LeftRail\" ) : WithSegment ( RailSegmentBuilder . new () : WithBasePart ( RAIL_PART ) : WithOffset ( Vector3 . new ( - 3 , 0 , 0 )) : WithHorizontal ( true ) : WithMeshData ( MeshDataBuilder . new () : WithMesh ( \"CylinderMesh\" ) : WithOffset ( Vector3 . new ( 0 , 0 , 0 )) : WithScale ( Vector3 . new ( 1 , 1 , 0.2 )) : Finish () ) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish ()","title":"Left Rail"},{"location":"quick_start/writing_a_program/#right-rail","text":"local rightRailSection = SectionBuilder . new () : WithName ( \"RightRail\" ) : WithSegment ( RailSegmentBuilder . new () : WithBasePart ( RAIL_PART ) : WithOffset ( Vector3 . new ( 3 , 0 , 0 )) : WithHorizontal ( true ) : WithMeshData ( MeshDataBuilder . new () : WithMesh ( \"CylinderMesh\" ) : WithOffset ( Vector3 . new ( 0 , 0 , 0 )) : WithScale ( Vector3 . new ( 1 , 1 , 0.2 )) : Finish () ) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish ()","title":"Right Rail"},{"location":"quick_start/writing_a_program/#tie","text":"local tieSection = SectionBuilder . new () : WithName ( \"Tie\" ) : WithSegment ( TrackObjectSegmentBuilder . new () : WithTrackObject ( TIE_PART ) : WithOffset ( CFrame . new ( 0 , 0 , 0 )) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish ()","title":"Tie"},{"location":"quick_start/writing_a_program/#crossbeam","text":"local crossbeamSection = SectionBuilder . new () : WithName ( \"Crossbeam\" ) : WithSegment ( CrossbeamSegmentBuilder . new () : WithBasePart ( CROSSBEAM_PART ) : WithStartOffset ( Vector3 . new ( 3 , 0 , 0 )) : WithEndOffset ( Vector3 . new ( - 3 , 0 , 0 )) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish ()","title":"Crossbeam"},{"location":"quick_start/writing_a_program/#build","text":"local trackGroup = TrackGroupBuilder . new () : WithName ( \"MyTrack\" ) : WithSection ( leftRailSection ) : WithSection ( rightRailSection ) : WithSection ( tieSection ) : WithSection ( crossbeamSection ) : Finish () local trackModel = trackGroup : Create ( cframeTrack , 0 , cframeTrack . Length ) trackModel . Parent = workspace","title":"Build"},{"location":"quick_start/writing_a_program/#full-code","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 return function ( api ) local TrackGroup = api . TrackGroup local Section = api . Section local CFrameTrack = api . CFrameTrack local PointToPoint2Builder = CFrameTrack . PointToPoint2Builder local Segment = api . Segment local RailSegmentBuilder = Segment . RailBuilder local TrackObjectSegmentBuilder = Segment . TrackObjectBuilder local CrossbeamBuilder = Segment . CrossbeamBuilder local trackPoints = workspace : FindFirstChild ( \"Track\" ) local cframeTrack = PointToPoint2Builder . new () : WithName ( \"MyTrack\" ) : WithPoints ( trackPoints ) : WithIsCircuited ( true ) : WithHashInterval ( 10 ) : Finish () local leftRailSection = SectionBuilder . new () : WithName ( \"LeftRail\" ) : WithSegment ( RailSegment . new () : WithBasePart ( RAIL_PART ) : WithOffset ( Vector3 . new ( - 3 , 0 , 0 )) : WithHorizontal ( true ) : WithMeshData ( MeshDataBuilder . new () : WithMesh ( \"CylinderMesh\" ) : WithOffset ( Vector3 . new ( 0 , 0 , 0 )) : WithScale ( Vector3 . new ( 1 , 1 , 0.2 )) : Finish () ) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local rightRailSection = SectionBuilder . new () : WithName ( \"RightRail\" ) : WithSegment ( RailSegmentBuilder . new () : WithBasePart ( RAIL_PART ) : WithOffset ( Vector3 . new ( 3 , 0 , 0 )) : WithHorizontal ( true ) : WithMeshData ( MeshDataBuilder . new () : WithMesh ( \"CylinderMesh\" ) : WithOffset ( Vector3 . new ( 0 , 0 , 0 )) : WithScale ( Vector3 . new ( 1 , 1 , 0.2 )) : Finish () ) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local tieSection = SectionBuilder . new () : WithName ( \"Tie\" ) : WithSegment ( TrackObjectSegmentBuilder . new () : WithTrackObject ( TIE_PART ) : WithOffset ( CFrame . new ( 0 , 0 , 0 )) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local crossbeamSection = SectionBuilder . new () : WithName ( \"Crossbeam\" ) : WithSegment ( CrossbeamSegmentBuilder . new () : WithBasePart ( CROSSBEAM_PART ) : WithStartOffset ( Vector3 . new ( 3 , 0 , 0 )) : WithEndOffset ( Vector3 . new ( - 3 , 0 , 0 )) : Finish () ) : WithSegmentLength ( 5 ) : WithSectionStart ( 0 ) : WithOptimize ( true ) : WithBuildEnd ( false ) : Finish () local trackGroup = TrackGroupBuilder . new () : WithName ( \"MyTrack\" ) : WithSection ( leftRailSection ) : WithSection ( rightRailSection ) : WithSection ( tieSection ) : WithSection ( crossbeamSection ) : Finish () local model = Instance . new ( \"Model\" ) local trackModel = trackGroup : Create ( cframeTrack , 0 , cframeTrack . Length ) trackModel . Parent = model local chainLiftModel = chainLiftSection : Create ( cframeTrack , 100 , 200 ) chainLiftModel . Parent = model local brakesModel = brakesSection : Create ( cframeTrack , 400 , 500 ) brakesModel . Parent = model model . Parent = workspace end","title":"Full Code"}]}